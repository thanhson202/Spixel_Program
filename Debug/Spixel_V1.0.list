
Spixel_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004794  08004794  00005794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080047c0  080047c0  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c0  080047c0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000057c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080047c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000010  080047d8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080047d8  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c086  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6b  00000000  00000000  000120bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00013c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095f  00000000  00000000  00014818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d5e  00000000  00000000  00015177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e06e  00000000  00000000  0002eed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000992e3  00000000  00000000  0003cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ac  00000000  00000000  000d626c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d9418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	0800477c 	.word	0x0800477c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	0800477c 	.word	0x0800477c

08000224 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == CH1_Pin)
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000234:	d103      	bne.n	800023e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		read_pwm(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fc72 	bl	8000b20 <read_pwm>
 800023c:	e067      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH2_Pin)
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000244:	d103      	bne.n	800024e <HAL_GPIO_EXTI_Callback+0x2a>
	{
		read_pwm(2);
 8000246:	2002      	movs	r0, #2
 8000248:	f000 fc6a 	bl	8000b20 <read_pwm>
 800024c:	e05f      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH3_Pin)
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000254:	d103      	bne.n	800025e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		read_pwm(3);
 8000256:	2003      	movs	r0, #3
 8000258:	f000 fc62 	bl	8000b20 <read_pwm>
 800025c:	e057      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH4_Pin)
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d103      	bne.n	800026c <HAL_GPIO_EXTI_Callback+0x48>
	{
		read_pwm(4);
 8000264:	2004      	movs	r0, #4
 8000266:	f000 fc5b 	bl	8000b20 <read_pwm>
 800026a:	e050      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH5_Pin)
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	2b08      	cmp	r3, #8
 8000270:	d103      	bne.n	800027a <HAL_GPIO_EXTI_Callback+0x56>
	{
		read_pwm(5);
 8000272:	2005      	movs	r0, #5
 8000274:	f000 fc54 	bl	8000b20 <read_pwm>
 8000278:	e049      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH6_Pin)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b10      	cmp	r3, #16
 800027e:	d103      	bne.n	8000288 <HAL_GPIO_EXTI_Callback+0x64>
	{
		read_pwm(6);
 8000280:	2006      	movs	r0, #6
 8000282:	f000 fc4d 	bl	8000b20 <read_pwm>
 8000286:	e042      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH7_Pin)
 8000288:	88fb      	ldrh	r3, [r7, #6]
 800028a:	2b20      	cmp	r3, #32
 800028c:	d103      	bne.n	8000296 <HAL_GPIO_EXTI_Callback+0x72>
	{
		read_pwm(7);
 800028e:	2007      	movs	r0, #7
 8000290:	f000 fc46 	bl	8000b20 <read_pwm>
 8000294:	e03b      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH8_Pin)
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	2b40      	cmp	r3, #64	@ 0x40
 800029a:	d103      	bne.n	80002a4 <HAL_GPIO_EXTI_Callback+0x80>
	{
		read_pwm(8);
 800029c:	2008      	movs	r0, #8
 800029e:	f000 fc3f 	bl	8000b20 <read_pwm>
 80002a2:	e034      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH9_Pin)
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	2b80      	cmp	r3, #128	@ 0x80
 80002a8:	d103      	bne.n	80002b2 <HAL_GPIO_EXTI_Callback+0x8e>
	{
		read_pwm(9);
 80002aa:	2009      	movs	r0, #9
 80002ac:	f000 fc38 	bl	8000b20 <read_pwm>
 80002b0:	e02d      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH10_Pin)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80002b8:	d103      	bne.n	80002c2 <HAL_GPIO_EXTI_Callback+0x9e>
	{
		read_pwm(10);
 80002ba:	200a      	movs	r0, #10
 80002bc:	f000 fc30 	bl	8000b20 <read_pwm>
 80002c0:	e025      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH11_Pin)
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002c8:	d103      	bne.n	80002d2 <HAL_GPIO_EXTI_Callback+0xae>
	{
		read_pwm(11);
 80002ca:	200b      	movs	r0, #11
 80002cc:	f000 fc28 	bl	8000b20 <read_pwm>
 80002d0:	e01d      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == SS1_Pin)
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2b04      	cmp	r3, #4
 80002d6:	d103      	bne.n	80002e0 <HAL_GPIO_EXTI_Callback+0xbc>
	{
		read_pwm(12);
 80002d8:	200c      	movs	r0, #12
 80002da:	f000 fc21 	bl	8000b20 <read_pwm>
 80002de:	e016      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	}
	else if(GPIO_Pin == SS2_Pin)
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80002e6:	d103      	bne.n	80002f0 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		read_pwm(13);
 80002e8:	200d      	movs	r0, #13
 80002ea:	f000 fc19 	bl	8000b20 <read_pwm>
 80002ee:	e00e      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	}
	else if(GPIO_Pin == SS3_Pin)
 80002f0:	88fb      	ldrh	r3, [r7, #6]
 80002f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80002f6:	d103      	bne.n	8000300 <HAL_GPIO_EXTI_Callback+0xdc>
	{
		read_pwm(14);
 80002f8:	200e      	movs	r0, #14
 80002fa:	f000 fc11 	bl	8000b20 <read_pwm>
 80002fe:	e006      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	}
	else if(GPIO_Pin == SS4_Pin)
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000306:	d102      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	{
		read_pwm(15);
 8000308:	200f      	movs	r0, #15
 800030a:	f000 fc09 	bl	8000b20 <read_pwm>
	}
	  convert();
 800030e:	f001 fab9 	bl	8001884 <convert>

}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000320:	f002 fb06 	bl	8002930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f838 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f000 fa44 	bl	80007b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800032c:	f000 f87a 	bl	8000424 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000330:	f000 f8c8 	bl	80004c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000334:	f000 f952 	bl	80005dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000338:	f000 fa12 	bl	8000760 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800033c:	f000 f9da 	bl	80006f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // TIM2 BROOM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000340:	2104      	movs	r1, #4
 8000342:	4811      	ldr	r0, [pc, #68]	@ (8000388 <main+0x6c>)
 8000344:	f003 fb74 	bl	8003a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000348:	2108      	movs	r1, #8
 800034a:	480f      	ldr	r0, [pc, #60]	@ (8000388 <main+0x6c>)
 800034c:	f003 fb70 	bl	8003a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000350:	210c      	movs	r1, #12
 8000352:	480d      	ldr	r0, [pc, #52]	@ (8000388 <main+0x6c>)
 8000354:	f003 fb6c 	bl	8003a30 <HAL_TIM_PWM_Start>

  //TIM3 WHEEL
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000358:	2100      	movs	r1, #0
 800035a:	480c      	ldr	r0, [pc, #48]	@ (800038c <main+0x70>)
 800035c:	f003 fb68 	bl	8003a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000360:	2104      	movs	r1, #4
 8000362:	480a      	ldr	r0, [pc, #40]	@ (800038c <main+0x70>)
 8000364:	f003 fb64 	bl	8003a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000368:	2108      	movs	r1, #8
 800036a:	4808      	ldr	r0, [pc, #32]	@ (800038c <main+0x70>)
 800036c:	f003 fb60 	bl	8003a30 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000370:	4807      	ldr	r0, [pc, #28]	@ (8000390 <main+0x74>)
 8000372:	f003 faad 	bl	80038d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 8000376:	4807      	ldr	r0, [pc, #28]	@ (8000394 <main+0x78>)
 8000378:	f003 faaa 	bl	80038d0 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  control();
 800037c:	f001 fef4 	bl	8002168 <control>
	  Status_SS();
 8000380:	f001 fc3e 	bl	8001c00 <Status_SS>
	  control();
 8000384:	bf00      	nop
 8000386:	e7f9      	b.n	800037c <main+0x60>
 8000388:	20000078 	.word	0x20000078
 800038c:	200000c0 	.word	0x200000c0
 8000390:	20000030 	.word	0x20000030
 8000394:	20000108 	.word	0x20000108

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	@ 0x40
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2228      	movs	r2, #40	@ 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 f9bc 	bl	8004724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	2301      	movs	r3, #1
 80003ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	2302      	movs	r3, #2
 80003ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fe15 	bl	8003010 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ec:	f000 fb0c 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2302      	movs	r3, #2
 80003f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2102      	movs	r1, #2
 800040a:	4618      	mov	r0, r3
 800040c:	f003 f882 	bl	8003514 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000416:	f000 faf7 	bl	8000a08 <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3740      	adds	r7, #64	@ 0x40
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000438:	463b      	mov	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000440:	4b1e      	ldr	r3, [pc, #120]	@ (80004bc <MX_TIM1_Init+0x98>)
 8000442:	4a1f      	ldr	r2, [pc, #124]	@ (80004c0 <MX_TIM1_Init+0x9c>)
 8000444:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000446:	4b1d      	ldr	r3, [pc, #116]	@ (80004bc <MX_TIM1_Init+0x98>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044c:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <MX_TIM1_Init+0x98>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000452:	4b1a      	ldr	r3, [pc, #104]	@ (80004bc <MX_TIM1_Init+0x98>)
 8000454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000458:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045a:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <MX_TIM1_Init+0x98>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <MX_TIM1_Init+0x98>)
 8000462:	2200      	movs	r2, #0
 8000464:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <MX_TIM1_Init+0x98>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800046c:	4813      	ldr	r0, [pc, #76]	@ (80004bc <MX_TIM1_Init+0x98>)
 800046e:	f003 f9df 	bl	8003830 <HAL_TIM_Base_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000478:	f000 fac6 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	4619      	mov	r1, r3
 8000488:	480c      	ldr	r0, [pc, #48]	@ (80004bc <MX_TIM1_Init+0x98>)
 800048a:	f003 fc4d 	bl	8003d28 <HAL_TIM_ConfigClockSource>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000494:	f000 fab8 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000498:	2300      	movs	r3, #0
 800049a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a0:	463b      	mov	r3, r7
 80004a2:	4619      	mov	r1, r3
 80004a4:	4805      	ldr	r0, [pc, #20]	@ (80004bc <MX_TIM1_Init+0x98>)
 80004a6:	f003 fff3 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004b0:	f000 faaa 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	3718      	adds	r7, #24
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000030 	.word	0x20000030
 80004c0:	40012c00 	.word	0x40012c00

080004c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08e      	sub	sp, #56	@ 0x38
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d8:	f107 0320 	add.w	r3, r7, #32
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
 80004f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004f4:	4b38      	ldr	r3, [pc, #224]	@ (80005d8 <MX_TIM2_Init+0x114>)
 80004f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80004fc:	4b36      	ldr	r3, [pc, #216]	@ (80005d8 <MX_TIM2_Init+0x114>)
 80004fe:	2263      	movs	r2, #99	@ 0x63
 8000500:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000502:	4b35      	ldr	r3, [pc, #212]	@ (80005d8 <MX_TIM2_Init+0x114>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14400-1;
 8000508:	4b33      	ldr	r3, [pc, #204]	@ (80005d8 <MX_TIM2_Init+0x114>)
 800050a:	f643 023f 	movw	r2, #14399	@ 0x383f
 800050e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000510:	4b31      	ldr	r3, [pc, #196]	@ (80005d8 <MX_TIM2_Init+0x114>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b30      	ldr	r3, [pc, #192]	@ (80005d8 <MX_TIM2_Init+0x114>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800051c:	482e      	ldr	r0, [pc, #184]	@ (80005d8 <MX_TIM2_Init+0x114>)
 800051e:	f003 f987 	bl	8003830 <HAL_TIM_Base_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000528:	f000 fa6e 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000530:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000532:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000536:	4619      	mov	r1, r3
 8000538:	4827      	ldr	r0, [pc, #156]	@ (80005d8 <MX_TIM2_Init+0x114>)
 800053a:	f003 fbf5 	bl	8003d28 <HAL_TIM_ConfigClockSource>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000544:	f000 fa60 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000548:	4823      	ldr	r0, [pc, #140]	@ (80005d8 <MX_TIM2_Init+0x114>)
 800054a:	f003 fa19 	bl	8003980 <HAL_TIM_PWM_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000554:	f000 fa58 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055c:	2300      	movs	r3, #0
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000560:	f107 0320 	add.w	r3, r7, #32
 8000564:	4619      	mov	r1, r3
 8000566:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <MX_TIM2_Init+0x114>)
 8000568:	f003 ff92 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000572:	f000 fa49 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000576:	2360      	movs	r3, #96	@ 0x60
 8000578:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2204      	movs	r2, #4
 800058a:	4619      	mov	r1, r3
 800058c:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <MX_TIM2_Init+0x114>)
 800058e:	f003 fb09 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000598:	f000 fa36 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2208      	movs	r2, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <MX_TIM2_Init+0x114>)
 80005a4:	f003 fafe 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80005ae:	f000 fa2b 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	220c      	movs	r2, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <MX_TIM2_Init+0x114>)
 80005ba:	f003 faf3 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80005c4:	f000 fa20 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_TIM2_Init+0x114>)
 80005ca:	f002 f855 	bl	8002678 <HAL_TIM_MspPostInit>

}
 80005ce:	bf00      	nop
 80005d0:	3738      	adds	r7, #56	@ 0x38
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08e      	sub	sp, #56	@ 0x38
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]
 800060a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800060c:	4b37      	ldr	r3, [pc, #220]	@ (80006ec <MX_TIM3_Init+0x110>)
 800060e:	4a38      	ldr	r2, [pc, #224]	@ (80006f0 <MX_TIM3_Init+0x114>)
 8000610:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 8000612:	4b36      	ldr	r3, [pc, #216]	@ (80006ec <MX_TIM3_Init+0x110>)
 8000614:	2231      	movs	r2, #49	@ 0x31
 8000616:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <MX_TIM3_Init+0x110>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 28800-1;
 800061e:	4b33      	ldr	r3, [pc, #204]	@ (80006ec <MX_TIM3_Init+0x110>)
 8000620:	f247 027f 	movw	r2, #28799	@ 0x707f
 8000624:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <MX_TIM3_Init+0x110>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062c:	4b2f      	ldr	r3, [pc, #188]	@ (80006ec <MX_TIM3_Init+0x110>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000632:	482e      	ldr	r0, [pc, #184]	@ (80006ec <MX_TIM3_Init+0x110>)
 8000634:	f003 f8fc 	bl	8003830 <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800063e:	f000 f9e3 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800064c:	4619      	mov	r1, r3
 800064e:	4827      	ldr	r0, [pc, #156]	@ (80006ec <MX_TIM3_Init+0x110>)
 8000650:	f003 fb6a 	bl	8003d28 <HAL_TIM_ConfigClockSource>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800065a:	f000 f9d5 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800065e:	4823      	ldr	r0, [pc, #140]	@ (80006ec <MX_TIM3_Init+0x110>)
 8000660:	f003 f98e 	bl	8003980 <HAL_TIM_PWM_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800066a:	f000 f9cd 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4619      	mov	r1, r3
 800067c:	481b      	ldr	r0, [pc, #108]	@ (80006ec <MX_TIM3_Init+0x110>)
 800067e:	f003 ff07 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000688:	f000 f9be 	bl	8000a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068c:	2360      	movs	r3, #96	@ 0x60
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4812      	ldr	r0, [pc, #72]	@ (80006ec <MX_TIM3_Init+0x110>)
 80006a4:	f003 fa7e 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006ae:	f000 f9ab 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2204      	movs	r2, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <MX_TIM3_Init+0x110>)
 80006ba:	f003 fa73 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80006c4:	f000 f9a0 	bl	8000a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2208      	movs	r2, #8
 80006cc:	4619      	mov	r1, r3
 80006ce:	4807      	ldr	r0, [pc, #28]	@ (80006ec <MX_TIM3_Init+0x110>)
 80006d0:	f003 fa68 	bl	8003ba4 <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80006da:	f000 f995 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006de:	4803      	ldr	r0, [pc, #12]	@ (80006ec <MX_TIM3_Init+0x110>)
 80006e0:	f001 ffca 	bl	8002678 <HAL_TIM_MspPostInit>

}
 80006e4:	bf00      	nop
 80006e6:	3738      	adds	r7, #56	@ 0x38
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200000c0 	.word	0x200000c0
 80006f0:	40000400 	.word	0x40000400

080006f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_TIM6_Init+0x64>)
 8000704:	4a15      	ldr	r2, [pc, #84]	@ (800075c <MX_TIM6_Init+0x68>)
 8000706:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_TIM6_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_TIM6_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_TIM6_Init+0x64>)
 8000716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800071a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_TIM6_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000722:	480d      	ldr	r0, [pc, #52]	@ (8000758 <MX_TIM6_Init+0x64>)
 8000724:	f003 f884 	bl	8003830 <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800072e:	f000 f96b 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_TIM6_Init+0x64>)
 8000740:	f003 fea6 	bl	8004490 <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800074a:	f000 f95d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000108 	.word	0x20000108
 800075c:	40001000 	.word	0x40001000

08000760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_USART1_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART1_UART_Init+0x4c>)
 8000798:	f003 fee6 	bl	8004568 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f931 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000150 	.word	0x20000150
 80007b0:	40013800 	.word	0x40013800

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b88      	ldr	r3, [pc, #544]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a87      	ldr	r2, [pc, #540]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b85      	ldr	r3, [pc, #532]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4b82      	ldr	r3, [pc, #520]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a81      	ldr	r2, [pc, #516]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b7f      	ldr	r3, [pc, #508]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f8:	4b7c      	ldr	r3, [pc, #496]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a7b      	ldr	r2, [pc, #492]	@ (80009ec <MX_GPIO_Init+0x238>)
 80007fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b79      	ldr	r3, [pc, #484]	@ (80009ec <MX_GPIO_Init+0x238>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000810:	4b76      	ldr	r3, [pc, #472]	@ (80009ec <MX_GPIO_Init+0x238>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a75      	ldr	r2, [pc, #468]	@ (80009ec <MX_GPIO_Init+0x238>)
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b73      	ldr	r3, [pc, #460]	@ (80009ec <MX_GPIO_Init+0x238>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0320 	and.w	r3, r3, #32
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000828:	4b70      	ldr	r3, [pc, #448]	@ (80009ec <MX_GPIO_Init+0x238>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a6f      	ldr	r2, [pc, #444]	@ (80009ec <MX_GPIO_Init+0x238>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b6d      	ldr	r3, [pc, #436]	@ (80009ec <MX_GPIO_Init+0x238>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0310 	and.w	r3, r3, #16
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000846:	486a      	ldr	r0, [pc, #424]	@ (80009f0 <MX_GPIO_Init+0x23c>)
 8000848:	f002 fbb1 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000852:	4868      	ldr	r0, [pc, #416]	@ (80009f4 <MX_GPIO_Init+0x240>)
 8000854:	f002 fbab 	bl	8002fae <HAL_GPIO_WritePin>
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin|F_R_1A_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800085e:	4866      	ldr	r0, [pc, #408]	@ (80009f8 <MX_GPIO_Init+0x244>)
 8000860:	f002 fba5 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2101      	movs	r1, #1
 8000868:	4864      	ldr	r0, [pc, #400]	@ (80009fc <MX_GPIO_Init+0x248>)
 800086a:	f002 fba0 	bl	8002fae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin CH5_Pin CH6_Pin CH7_Pin
                           CH8_Pin CH9_Pin CH10_Pin CH11_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|CH5_Pin|CH6_Pin|CH7_Pin
 800086e:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 8000872:	61bb      	str	r3, [r7, #24]
                          |CH8_Pin|CH9_Pin|CH10_Pin|CH11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	4b62      	ldr	r3, [pc, #392]	@ (8000a00 <MX_GPIO_Init+0x24c>)
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	4619      	mov	r1, r3
 8000882:	485b      	ldr	r0, [pc, #364]	@ (80009f0 <MX_GPIO_Init+0x23c>)
 8000884:	f002 f9e8 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS5_Pin SS6_Pin SS7_Pin SS8_Pin */
  GPIO_InitStruct.Pin = SS5_Pin|SS6_Pin|SS7_Pin|SS8_Pin;
 8000888:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4619      	mov	r1, r3
 800089c:	4857      	ldr	r0, [pc, #348]	@ (80009fc <MX_GPIO_Init+0x248>)
 800089e:	f002 f9db 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin SS3_Pin SS4_Pin */
  GPIO_InitStruct.Pin = SS2_Pin|SS3_Pin|SS4_Pin;
 80008a2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a8:	4b56      	ldr	r3, [pc, #344]	@ (8000a04 <MX_GPIO_Init+0x250>)
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	4619      	mov	r1, r3
 80008b6:	4851      	ldr	r0, [pc, #324]	@ (80009fc <MX_GPIO_Init+0x248>)
 80008b8:	f002 f9ce 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_Pin LIGHT_Pin SLN_Pin OUT_Pin */
  GPIO_InitStruct.Pin = CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin;
 80008bc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2302      	movs	r3, #2
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4619      	mov	r1, r3
 80008d4:	4846      	ldr	r0, [pc, #280]	@ (80009f0 <MX_GPIO_Init+0x23c>)
 80008d6:	f002 f9bf 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK_2B_Pin EN_2B_Pin F_R_2B_Pin BRK_2A_Pin
                           EN_2A_Pin F_R_2A_Pin BRK_1B_Pin EN_1B_Pin */
  GPIO_InitStruct.Pin = BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 80008da:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80008de:	61bb      	str	r3, [r7, #24]
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2302      	movs	r3, #2
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4840      	ldr	r0, [pc, #256]	@ (80009f4 <MX_GPIO_Init+0x240>)
 80008f4:	f002 f9b0 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_R_1B_Pin BRK_1A_Pin EN_1A_Pin */
  GPIO_InitStruct.Pin = F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin;
 80008f8:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	4619      	mov	r1, r3
 8000910:	4839      	ldr	r0, [pc, #228]	@ (80009f8 <MX_GPIO_Init+0x244>)
 8000912:	f002 f9a1 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_R_1A_Pin */
  GPIO_InitStruct.Pin = F_R_1A_Pin;
 8000916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(F_R_1A_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4619      	mov	r1, r3
 800092e:	4832      	ldr	r0, [pc, #200]	@ (80009f8 <MX_GPIO_Init+0x244>)
 8000930:	f002 f992 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_Pin CH2_Pin CH3_Pin */
  GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin|CH3_Pin;
 8000934:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <MX_GPIO_Init+0x24c>)
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	4619      	mov	r1, r3
 8000948:	482b      	ldr	r0, [pc, #172]	@ (80009f8 <MX_GPIO_Init+0x244>)
 800094a:	f002 f985 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH4_Pin */
  GPIO_InitStruct.Pin = CH4_Pin;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	4b2b      	ldr	r3, [pc, #172]	@ (8000a00 <MX_GPIO_Init+0x24c>)
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	4619      	mov	r1, r3
 8000960:	4824      	ldr	r0, [pc, #144]	@ (80009f4 <MX_GPIO_Init+0x240>)
 8000962:	f002 f979 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2302      	movs	r3, #2
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	4619      	mov	r1, r3
 800097c:	481f      	ldr	r0, [pc, #124]	@ (80009fc <MX_GPIO_Init+0x248>)
 800097e:	f002 f96b 	bl	8002c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2006      	movs	r0, #6
 8000988:	f002 f92f 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800098c:	2006      	movs	r0, #6
 800098e:	f002 f948 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2008      	movs	r0, #8
 8000998:	f002 f927 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800099c:	2008      	movs	r0, #8
 800099e:	f002 f940 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2009      	movs	r0, #9
 80009a8:	f002 f91f 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009ac:	2009      	movs	r0, #9
 80009ae:	f002 f938 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	200a      	movs	r0, #10
 80009b8:	f002 f917 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009bc:	200a      	movs	r0, #10
 80009be:	f002 f930 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2017      	movs	r0, #23
 80009c8:	f002 f90f 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009cc:	2017      	movs	r0, #23
 80009ce:	f002 f928 	bl	8002c22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2028      	movs	r0, #40	@ 0x28
 80009d8:	f002 f907 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009dc:	2028      	movs	r0, #40	@ 0x28
 80009de:	f002 f920 	bl	8002c22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	40011400 	.word	0x40011400
 80009f8:	40011000 	.word	0x40011000
 80009fc:	40011800 	.word	0x40011800
 8000a00:	10110000 	.word	0x10110000
 8000a04:	10210000 	.word	0x10210000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <Error_Handler+0x8>

08000a14 <map>:
	 read_ss1,read_ss2,read_ss3,read_ss4;



uint16_t map(uint16_t x,uint16_t In_Max,uint16_t In_Min,uint16_t Out_Max,uint16_t Out_Min )
{
 8000a14:	b490      	push	{r4, r7}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4623      	mov	r3, r4
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	4603      	mov	r3, r0
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	807b      	strh	r3, [r7, #2]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	803b      	strh	r3, [r7, #0]
	return(((x-In_Min)*(Out_Max-Out_Min)/(In_Max-In_Min))+Out_Min);
 8000a32:	88fa      	ldrh	r2, [r7, #6]
 8000a34:	887b      	ldrh	r3, [r7, #2]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	8839      	ldrh	r1, [r7, #0]
 8000a3a:	8a3a      	ldrh	r2, [r7, #16]
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	fb03 f202 	mul.w	r2, r3, r2
 8000a42:	88b9      	ldrh	r1, [r7, #4]
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	1acb      	subs	r3, r1, r3
 8000a48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	8a3b      	ldrh	r3, [r7, #16]
 8000a50:	4413      	add	r3, r2
 8000a52:	b29b      	uxth	r3, r3
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc90      	pop	{r4, r7}
 8000a5c:	4770      	bx	lr

08000a5e <media_filter>:

uint32_t media_filter(uint32_t* array_read, int size) {
 8000a5e:	b480      	push	{r7}
 8000a60:	b097      	sub	sp, #92	@ 0x5c
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]


    uint32_t temp_array[15];
    for (int i = 0; i < size; i++) {
 8000a68:	2300      	movs	r3, #0
 8000a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a6c:	e00d      	b.n	8000a8a <media_filter+0x2c>
        temp_array[i] = array_read[i];
 8000a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	3358      	adds	r3, #88	@ 0x58
 8000a7e:	443b      	add	r3, r7
 8000a80:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (int i = 0; i < size; i++) {
 8000a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a86:	3301      	adds	r3, #1
 8000a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8000a8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dbed      	blt.n	8000a6e <media_filter+0x10>
    }

    // Sắp xếp mảng tạm bằng Insertion Sort
    for (int i = 1; i < size; i++) {
 8000a92:	2301      	movs	r3, #1
 8000a94:	653b      	str	r3, [r7, #80]	@ 0x50
 8000a96:	e031      	b.n	8000afc <media_filter+0x9e>
        uint32_t temp = temp_array[i];
 8000a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	3358      	adds	r3, #88	@ 0x58
 8000a9e:	443b      	add	r3, r7
 8000aa0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
        int j = i - 1;
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c

        while (j >= 0 && temp_array[j] > temp) {
 8000aac:	e00f      	b.n	8000ace <media_filter+0x70>
            temp_array[j + 1] = temp_array[j];
 8000aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ab0:	1c59      	adds	r1, r3, #1
 8000ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	3358      	adds	r3, #88	@ 0x58
 8000ab8:	443b      	add	r3, r7
 8000aba:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8000abe:	008b      	lsls	r3, r1, #2
 8000ac0:	3358      	adds	r3, #88	@ 0x58
 8000ac2:	443b      	add	r3, r7
 8000ac4:	f843 2c4c 	str.w	r2, [r3, #-76]
            j--;
 8000ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aca:	3b01      	subs	r3, #1
 8000acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while (j >= 0 && temp_array[j] > temp) {
 8000ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db08      	blt.n	8000ae6 <media_filter+0x88>
 8000ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	3358      	adds	r3, #88	@ 0x58
 8000ada:	443b      	add	r3, r7
 8000adc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000ae0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d3e3      	bcc.n	8000aae <media_filter+0x50>
        }
        temp_array[j + 1] = temp;
 8000ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ae8:	3301      	adds	r3, #1
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	3358      	adds	r3, #88	@ 0x58
 8000aee:	443b      	add	r3, r7
 8000af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000af2:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (int i = 1; i < size; i++) {
 8000af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000af8:	3301      	adds	r3, #1
 8000afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8000afc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbc9      	blt.n	8000a98 <media_filter+0x3a>
    }

    // Trả về giá trị trung vị
    return temp_array[size / 2];
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	0fda      	lsrs	r2, r3, #31
 8000b08:	4413      	add	r3, r2
 8000b0a:	105b      	asrs	r3, r3, #1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	3358      	adds	r3, #88	@ 0x58
 8000b10:	443b      	add	r3, r7
 8000b12:	f853 3c4c 	ldr.w	r3, [r3, #-76]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	375c      	adds	r7, #92	@ 0x5c
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <read_pwm>:
void read_pwm(int val_ch)
	{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0fa      	sub	sp, #488	@ 0x1e8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000b2a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8000b2e:	6018      	str	r0, [r3, #0]
		switch(val_ch)
 8000b30:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000b34:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	2b0e      	cmp	r3, #14
 8000b3e:	f200 8685 	bhi.w	800184c <read_pwm+0xd2c>
 8000b42:	a201      	add	r2, pc, #4	@ (adr r2, 8000b48 <read_pwm+0x28>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000b85 	.word	0x08000b85
 8000b4c:	08000ca1 	.word	0x08000ca1
 8000b50:	08000dbd 	.word	0x08000dbd
 8000b54:	08000ed7 	.word	0x08000ed7
 8000b58:	08000fb9 	.word	0x08000fb9
 8000b5c:	08001075 	.word	0x08001075
 8000b60:	08001159 	.word	0x08001159
 8000b64:	08001215 	.word	0x08001215
 8000b68:	080012e3 	.word	0x080012e3
 8000b6c:	080013e3 	.word	0x080013e3
 8000b70:	080014eb 	.word	0x080014eb
 8000b74:	08001611 	.word	0x08001611
 8000b78:	0800169d 	.word	0x0800169d
 8000b7c:	0800172f 	.word	0x0800172f
 8000b80:	080017bd 	.word	0x080017bd
		{
			case 1:
				if(HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin)==1)
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	489c      	ldr	r0, [pc, #624]	@ (8000dfc <read_pwm+0x2dc>)
 8000b8a:	f002 f9f9 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d116      	bne.n	8000bc2 <read_pwm+0xa2>
					{
						read_1.start = htim1.Instance->CNT;
 8000b94:	4b9a      	ldr	r3, [pc, #616]	@ (8000e00 <read_pwm+0x2e0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b9a:	4a9a      	ldr	r2, [pc, #616]	@ (8000e04 <read_pwm+0x2e4>)
 8000b9c:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH1_Pin;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	4b98      	ldr	r3, [pc, #608]	@ (8000e08 <read_pwm+0x2e8>)
 8000ba8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4890      	ldr	r0, [pc, #576]	@ (8000dfc <read_pwm+0x2dc>)
 8000bba:	f002 f84d 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH1_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000bbe:	f000 be45 	b.w	800184c <read_pwm+0xd2c>
						read_1.end = htim1.Instance->CNT;
 8000bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8000e00 <read_pwm+0x2e0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc8:	4a8e      	ldr	r2, [pc, #568]	@ (8000e04 <read_pwm+0x2e4>)
 8000bca:	6053      	str	r3, [r2, #4]
						if(read_1.start > read_1.end)
 8000bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8000e04 <read_pwm+0x2e4>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8000e04 <read_pwm+0x2e4>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d90a      	bls.n	8000bee <read_pwm+0xce>
							read_1.out = 65535 - read_1.start + read_1.end;
 8000bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8000e04 <read_pwm+0x2e4>)
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4b89      	ldr	r3, [pc, #548]	@ (8000e04 <read_pwm+0x2e4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000be6:	33ff      	adds	r3, #255	@ 0xff
 8000be8:	4a86      	ldr	r2, [pc, #536]	@ (8000e04 <read_pwm+0x2e4>)
 8000bea:	6093      	str	r3, [r2, #8]
 8000bec:	e006      	b.n	8000bfc <read_pwm+0xdc>
							read_1.out = read_1.end - read_1.start;
 8000bee:	4b85      	ldr	r3, [pc, #532]	@ (8000e04 <read_pwm+0x2e4>)
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4b84      	ldr	r3, [pc, #528]	@ (8000e04 <read_pwm+0x2e4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	4a82      	ldr	r2, [pc, #520]	@ (8000e04 <read_pwm+0x2e4>)
 8000bfa:	6093      	str	r3, [r2, #8]
						if(read_1.out > 61200)
 8000bfc:	4b81      	ldr	r3, [pc, #516]	@ (8000e04 <read_pwm+0x2e4>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d904      	bls.n	8000c12 <read_pwm+0xf2>
							read_1.out = 61200;
 8000c08:	4b7e      	ldr	r3, [pc, #504]	@ (8000e04 <read_pwm+0x2e4>)
 8000c0a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	e01a      	b.n	8000c48 <read_pwm+0x128>
						else if(read_1.out < 7000)
 8000c12:	4b7c      	ldr	r3, [pc, #496]	@ (8000e04 <read_pwm+0x2e4>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d804      	bhi.n	8000c28 <read_pwm+0x108>
							read_1.out = 7000;
 8000c1e:	4b79      	ldr	r3, [pc, #484]	@ (8000e04 <read_pwm+0x2e4>)
 8000c20:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	e00f      	b.n	8000c48 <read_pwm+0x128>
						else if(40000 <= read_1.out && read_1.out <= 45000)
 8000c28:	4b76      	ldr	r3, [pc, #472]	@ (8000e04 <read_pwm+0x2e4>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d909      	bls.n	8000c48 <read_pwm+0x128>
 8000c34:	4b73      	ldr	r3, [pc, #460]	@ (8000e04 <read_pwm+0x2e4>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d803      	bhi.n	8000c48 <read_pwm+0x128>
							read_1.out = 43200;
 8000c40:	4b70      	ldr	r3, [pc, #448]	@ (8000e04 <read_pwm+0x2e4>)
 8000c42:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8000c46:	609a      	str	r2, [r3, #8]
						array_read_ch1[count_ch1] = read_1.out;
 8000c48:	4b70      	ldr	r3, [pc, #448]	@ (8000e0c <read_pwm+0x2ec>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a6d      	ldr	r2, [pc, #436]	@ (8000e04 <read_pwm+0x2e4>)
 8000c4e:	6892      	ldr	r2, [r2, #8]
 8000c50:	496f      	ldr	r1, [pc, #444]	@ (8000e10 <read_pwm+0x2f0>)
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					    count_ch1 = (count_ch1 + 1) % size;
 8000c56:	4b6d      	ldr	r3, [pc, #436]	@ (8000e0c <read_pwm+0x2ec>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a6d      	ldr	r2, [pc, #436]	@ (8000e14 <read_pwm+0x2f4>)
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c64:	fb01 f202 	mul.w	r2, r1, r2
 8000c68:	1a9b      	subs	r3, r3, r2
 8000c6a:	4a68      	ldr	r2, [pc, #416]	@ (8000e0c <read_pwm+0x2ec>)
 8000c6c:	6013      	str	r3, [r2, #0]
						read_1.out = media_filter(array_read_ch1,10);
 8000c6e:	210a      	movs	r1, #10
 8000c70:	4867      	ldr	r0, [pc, #412]	@ (8000e10 <read_pwm+0x2f0>)
 8000c72:	f7ff fef4 	bl	8000a5e <media_filter>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a62      	ldr	r2, [pc, #392]	@ (8000e04 <read_pwm+0x2e4>)
 8000c7a:	6093      	str	r3, [r2, #8]
						GPIO_InitStruct.Pin = CH1_Pin;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c80:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c84:	4b64      	ldr	r3, [pc, #400]	@ (8000e18 <read_pwm+0x2f8>)
 8000c86:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000c94:	4619      	mov	r1, r3
 8000c96:	4859      	ldr	r0, [pc, #356]	@ (8000dfc <read_pwm+0x2dc>)
 8000c98:	f001 ffde 	bl	8002c58 <HAL_GPIO_Init>
			break;
 8000c9c:	f000 bdd6 	b.w	800184c <read_pwm+0xd2c>
			case 2:
				if(HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin)==1)
 8000ca0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca4:	4855      	ldr	r0, [pc, #340]	@ (8000dfc <read_pwm+0x2dc>)
 8000ca6:	f002 f96b 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d116      	bne.n	8000cde <read_pwm+0x1be>
					{
						read_2.start = htim1.Instance->CNT;
 8000cb0:	4b53      	ldr	r3, [pc, #332]	@ (8000e00 <read_pwm+0x2e0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb6:	4a59      	ldr	r2, [pc, #356]	@ (8000e1c <read_pwm+0x2fc>)
 8000cb8:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH2_Pin;
 8000cba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cbe:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc2:	4b51      	ldr	r3, [pc, #324]	@ (8000e08 <read_pwm+0x2e8>)
 8000cc4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4849      	ldr	r0, [pc, #292]	@ (8000dfc <read_pwm+0x2dc>)
 8000cd6:	f001 ffbf 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH2_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000cda:	f000 bdb7 	b.w	800184c <read_pwm+0xd2c>
						read_2.end = htim1.Instance->CNT;
 8000cde:	4b48      	ldr	r3, [pc, #288]	@ (8000e00 <read_pwm+0x2e0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce4:	4a4d      	ldr	r2, [pc, #308]	@ (8000e1c <read_pwm+0x2fc>)
 8000ce6:	6053      	str	r3, [r2, #4]
						if(read_2.start > read_2.end)
 8000ce8:	4b4c      	ldr	r3, [pc, #304]	@ (8000e1c <read_pwm+0x2fc>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b4b      	ldr	r3, [pc, #300]	@ (8000e1c <read_pwm+0x2fc>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d90a      	bls.n	8000d0a <read_pwm+0x1ea>
							read_2.out = 65535 - read_2.start + read_2.end;
 8000cf4:	4b49      	ldr	r3, [pc, #292]	@ (8000e1c <read_pwm+0x2fc>)
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4b48      	ldr	r3, [pc, #288]	@ (8000e1c <read_pwm+0x2fc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000d02:	33ff      	adds	r3, #255	@ 0xff
 8000d04:	4a45      	ldr	r2, [pc, #276]	@ (8000e1c <read_pwm+0x2fc>)
 8000d06:	6093      	str	r3, [r2, #8]
 8000d08:	e006      	b.n	8000d18 <read_pwm+0x1f8>
							read_2.out = read_2.end - read_2.start;
 8000d0a:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <read_pwm+0x2fc>)
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4b43      	ldr	r3, [pc, #268]	@ (8000e1c <read_pwm+0x2fc>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	4a41      	ldr	r2, [pc, #260]	@ (8000e1c <read_pwm+0x2fc>)
 8000d16:	6093      	str	r3, [r2, #8]
						if(read_2.out >= 61200)
 8000d18:	4b40      	ldr	r3, [pc, #256]	@ (8000e1c <read_pwm+0x2fc>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d904      	bls.n	8000d2e <read_pwm+0x20e>
							read_2.out = 61200;
 8000d24:	4b3d      	ldr	r3, [pc, #244]	@ (8000e1c <read_pwm+0x2fc>)
 8000d26:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	e01a      	b.n	8000d64 <read_pwm+0x244>
						else if(read_2.out <= 7000)
 8000d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <read_pwm+0x2fc>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d804      	bhi.n	8000d44 <read_pwm+0x224>
							read_2.out = 7000;
 8000d3a:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <read_pwm+0x2fc>)
 8000d3c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	e00f      	b.n	8000d64 <read_pwm+0x244>
						else if(40000 < read_2.out && read_2.out < 45000)
 8000d44:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <read_pwm+0x2fc>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d909      	bls.n	8000d64 <read_pwm+0x244>
 8000d50:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <read_pwm+0x2fc>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d803      	bhi.n	8000d64 <read_pwm+0x244>
							read_2.out = 43250;
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <read_pwm+0x2fc>)
 8000d5e:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8000d62:	609a      	str	r2, [r3, #8]
						array_read_ch2[count_ch2] = read_2.out;
 8000d64:	4b2e      	ldr	r3, [pc, #184]	@ (8000e20 <read_pwm+0x300>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a2c      	ldr	r2, [pc, #176]	@ (8000e1c <read_pwm+0x2fc>)
 8000d6a:	6892      	ldr	r2, [r2, #8]
 8000d6c:	492d      	ldr	r1, [pc, #180]	@ (8000e24 <read_pwm+0x304>)
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					    count_ch2 = (count_ch2 + 1) % size;
 8000d72:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <read_pwm+0x300>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a26      	ldr	r2, [pc, #152]	@ (8000e14 <read_pwm+0x2f4>)
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d80:	fb01 f202 	mul.w	r2, r1, r2
 8000d84:	1a9b      	subs	r3, r3, r2
 8000d86:	4a26      	ldr	r2, [pc, #152]	@ (8000e20 <read_pwm+0x300>)
 8000d88:	6013      	str	r3, [r2, #0]
						read_2.out = media_filter(array_read_ch2,10);
 8000d8a:	210a      	movs	r1, #10
 8000d8c:	4825      	ldr	r0, [pc, #148]	@ (8000e24 <read_pwm+0x304>)
 8000d8e:	f7ff fe66 	bl	8000a5e <media_filter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a21      	ldr	r2, [pc, #132]	@ (8000e1c <read_pwm+0x2fc>)
 8000d96:	6093      	str	r3, [r2, #8]
						GPIO_InitStruct.Pin = CH2_Pin;
 8000d98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <read_pwm+0x2f8>)
 8000da2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000db0:	4619      	mov	r1, r3
 8000db2:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <read_pwm+0x2dc>)
 8000db4:	f001 ff50 	bl	8002c58 <HAL_GPIO_Init>
			break;
 8000db8:	f000 bd48 	b.w	800184c <read_pwm+0xd2c>
			case 3:
				if(HAL_GPIO_ReadPin(CH3_GPIO_Port, CH3_Pin)==1)
 8000dbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc0:	480e      	ldr	r0, [pc, #56]	@ (8000dfc <read_pwm+0x2dc>)
 8000dc2:	f002 f8dd 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d12f      	bne.n	8000e2c <read_pwm+0x30c>
					{
						read_3.start = htim1.Instance->CNT;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <read_pwm+0x2e0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <read_pwm+0x308>)
 8000dd4:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH3_Pin;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dda:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <read_pwm+0x2e8>)
 8000de0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8000dee:	4619      	mov	r1, r3
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <read_pwm+0x2dc>)
 8000df2:	f001 ff31 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH3_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000df6:	f000 bd29 	b.w	800184c <read_pwm+0xd2c>
 8000dfa:	bf00      	nop
 8000dfc:	40011000 	.word	0x40011000
 8000e00:	20000030 	.word	0x20000030
 8000e04:	2000022c 	.word	0x2000022c
 8000e08:	10210000 	.word	0x10210000
 8000e0c:	200001d4 	.word	0x200001d4
 8000e10:	200001dc 	.word	0x200001dc
 8000e14:	20000000 	.word	0x20000000
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	2000023c 	.word	0x2000023c
 8000e20:	200001d8 	.word	0x200001d8
 8000e24:	20000204 	.word	0x20000204
 8000e28:	2000024c 	.word	0x2000024c
						read_3.end = htim1.Instance->CNT;
 8000e2c:	4b9f      	ldr	r3, [pc, #636]	@ (80010ac <read_pwm+0x58c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e32:	4a9f      	ldr	r2, [pc, #636]	@ (80010b0 <read_pwm+0x590>)
 8000e34:	6053      	str	r3, [r2, #4]
						if(read_3.start > read_3.end)
 8000e36:	4b9e      	ldr	r3, [pc, #632]	@ (80010b0 <read_pwm+0x590>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b9d      	ldr	r3, [pc, #628]	@ (80010b0 <read_pwm+0x590>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d90a      	bls.n	8000e58 <read_pwm+0x338>
							read_3.out = 65535 - read_3.start + read_3.end;
 8000e42:	4b9b      	ldr	r3, [pc, #620]	@ (80010b0 <read_pwm+0x590>)
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4b9a      	ldr	r3, [pc, #616]	@ (80010b0 <read_pwm+0x590>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e50:	33ff      	adds	r3, #255	@ 0xff
 8000e52:	4a97      	ldr	r2, [pc, #604]	@ (80010b0 <read_pwm+0x590>)
 8000e54:	6093      	str	r3, [r2, #8]
 8000e56:	e006      	b.n	8000e66 <read_pwm+0x346>
							read_3.out = read_3.end - read_3.start;
 8000e58:	4b95      	ldr	r3, [pc, #596]	@ (80010b0 <read_pwm+0x590>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4b94      	ldr	r3, [pc, #592]	@ (80010b0 <read_pwm+0x590>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	4a93      	ldr	r2, [pc, #588]	@ (80010b0 <read_pwm+0x590>)
 8000e64:	6093      	str	r3, [r2, #8]
						if(read_3.out >= 61200)
 8000e66:	4b92      	ldr	r3, [pc, #584]	@ (80010b0 <read_pwm+0x590>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d904      	bls.n	8000e7c <read_pwm+0x35c>
							read_3.out = 61200;
 8000e72:	4b8f      	ldr	r3, [pc, #572]	@ (80010b0 <read_pwm+0x590>)
 8000e74:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	e01a      	b.n	8000eb2 <read_pwm+0x392>
						else if(read_3.out <= 7000)
 8000e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80010b0 <read_pwm+0x590>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d804      	bhi.n	8000e92 <read_pwm+0x372>
							read_3.out = 7000;
 8000e88:	4b89      	ldr	r3, [pc, #548]	@ (80010b0 <read_pwm+0x590>)
 8000e8a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	e00f      	b.n	8000eb2 <read_pwm+0x392>
						else if(40000 <= read_3.out && read_3.out <= 45000)
 8000e92:	4b87      	ldr	r3, [pc, #540]	@ (80010b0 <read_pwm+0x590>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d909      	bls.n	8000eb2 <read_pwm+0x392>
 8000e9e:	4b84      	ldr	r3, [pc, #528]	@ (80010b0 <read_pwm+0x590>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d803      	bhi.n	8000eb2 <read_pwm+0x392>
							read_3.out = 41300;
 8000eaa:	4b81      	ldr	r3, [pc, #516]	@ (80010b0 <read_pwm+0x590>)
 8000eac:	f24a 1254 	movw	r2, #41300	@ 0xa154
 8000eb0:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH3_Pin;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eba:	4b7e      	ldr	r3, [pc, #504]	@ (80010b4 <read_pwm+0x594>)
 8000ebc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000eca:	4619      	mov	r1, r3
 8000ecc:	487a      	ldr	r0, [pc, #488]	@ (80010b8 <read_pwm+0x598>)
 8000ece:	f001 fec3 	bl	8002c58 <HAL_GPIO_Init>
			break;
 8000ed2:	f000 bcbb 	b.w	800184c <read_pwm+0xd2c>
			case 4:
				if(HAL_GPIO_ReadPin(CH4_GPIO_Port, CH4_Pin)==1)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4878      	ldr	r0, [pc, #480]	@ (80010bc <read_pwm+0x59c>)
 8000eda:	f002 f851 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d115      	bne.n	8000f10 <read_pwm+0x3f0>
					{
						read_4.start = htim1.Instance->CNT;
 8000ee4:	4b71      	ldr	r3, [pc, #452]	@ (80010ac <read_pwm+0x58c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eea:	4a75      	ldr	r2, [pc, #468]	@ (80010c0 <read_pwm+0x5a0>)
 8000eec:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH4_Pin;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef4:	4b73      	ldr	r3, [pc, #460]	@ (80010c4 <read_pwm+0x5a4>)
 8000ef6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8000f04:	4619      	mov	r1, r3
 8000f06:	486d      	ldr	r0, [pc, #436]	@ (80010bc <read_pwm+0x59c>)
 8000f08:	f001 fea6 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH4_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000f0c:	f000 bc9e 	b.w	800184c <read_pwm+0xd2c>
						read_4.end = htim1.Instance->CNT;
 8000f10:	4b66      	ldr	r3, [pc, #408]	@ (80010ac <read_pwm+0x58c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f16:	4a6a      	ldr	r2, [pc, #424]	@ (80010c0 <read_pwm+0x5a0>)
 8000f18:	6053      	str	r3, [r2, #4]
						if(read_4.start > read_4.end)
 8000f1a:	4b69      	ldr	r3, [pc, #420]	@ (80010c0 <read_pwm+0x5a0>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b68      	ldr	r3, [pc, #416]	@ (80010c0 <read_pwm+0x5a0>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d90a      	bls.n	8000f3c <read_pwm+0x41c>
							read_4.out = 65535 - read_4.start + read_4.end;
 8000f26:	4b66      	ldr	r3, [pc, #408]	@ (80010c0 <read_pwm+0x5a0>)
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	4b65      	ldr	r3, [pc, #404]	@ (80010c0 <read_pwm+0x5a0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f34:	33ff      	adds	r3, #255	@ 0xff
 8000f36:	4a62      	ldr	r2, [pc, #392]	@ (80010c0 <read_pwm+0x5a0>)
 8000f38:	6093      	str	r3, [r2, #8]
 8000f3a:	e006      	b.n	8000f4a <read_pwm+0x42a>
							read_4.out = read_4.end - read_4.start;
 8000f3c:	4b60      	ldr	r3, [pc, #384]	@ (80010c0 <read_pwm+0x5a0>)
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4b5f      	ldr	r3, [pc, #380]	@ (80010c0 <read_pwm+0x5a0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a5e      	ldr	r2, [pc, #376]	@ (80010c0 <read_pwm+0x5a0>)
 8000f48:	6093      	str	r3, [r2, #8]
						if(read_4.out > 61200)
 8000f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80010c0 <read_pwm+0x5a0>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d904      	bls.n	8000f60 <read_pwm+0x440>
							read_4.out = 61200;
 8000f56:	4b5a      	ldr	r3, [pc, #360]	@ (80010c0 <read_pwm+0x5a0>)
 8000f58:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e01a      	b.n	8000f96 <read_pwm+0x476>
						else if(read_4.out < 25000)
 8000f60:	4b57      	ldr	r3, [pc, #348]	@ (80010c0 <read_pwm+0x5a0>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d804      	bhi.n	8000f76 <read_pwm+0x456>
							read_4.out = 25000;
 8000f6c:	4b54      	ldr	r3, [pc, #336]	@ (80010c0 <read_pwm+0x5a0>)
 8000f6e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	e00f      	b.n	8000f96 <read_pwm+0x476>
						else if(40000 <= read_4.out && read_4.out <= 45000)
 8000f76:	4b52      	ldr	r3, [pc, #328]	@ (80010c0 <read_pwm+0x5a0>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d909      	bls.n	8000f96 <read_pwm+0x476>
 8000f82:	4b4f      	ldr	r3, [pc, #316]	@ (80010c0 <read_pwm+0x5a0>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d803      	bhi.n	8000f96 <read_pwm+0x476>
							read_4.out = 42900;
 8000f8e:	4b4c      	ldr	r3, [pc, #304]	@ (80010c0 <read_pwm+0x5a0>)
 8000f90:	f24a 7294 	movw	r2, #42900	@ 0xa794
 8000f94:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH4_Pin;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	4b45      	ldr	r3, [pc, #276]	@ (80010b4 <read_pwm+0x594>)
 8000f9e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000fac:	4619      	mov	r1, r3
 8000fae:	4843      	ldr	r0, [pc, #268]	@ (80010bc <read_pwm+0x59c>)
 8000fb0:	f001 fe52 	bl	8002c58 <HAL_GPIO_Init>
					break;
 8000fb4:	f000 bc4a 	b.w	800184c <read_pwm+0xd2c>
			case 5:
				if(HAL_GPIO_ReadPin(CH5_GPIO_Port, CH5_Pin)==1)
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4843      	ldr	r0, [pc, #268]	@ (80010c8 <read_pwm+0x5a8>)
 8000fbc:	f001 ffe0 	bl	8002f80 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d115      	bne.n	8000ff2 <read_pwm+0x4d2>
					{
						read_5.start = htim1.Instance->CNT;
 8000fc6:	4b39      	ldr	r3, [pc, #228]	@ (80010ac <read_pwm+0x58c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80010cc <read_pwm+0x5ac>)
 8000fce:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH5_Pin;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <read_pwm+0x5a4>)
 8000fd8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4837      	ldr	r0, [pc, #220]	@ (80010c8 <read_pwm+0x5a8>)
 8000fea:	f001 fe35 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH5_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000fee:	f000 bc2d 	b.w	800184c <read_pwm+0xd2c>
						read_5.end = htim1.Instance->CNT;
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80010ac <read_pwm+0x58c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff8:	4a34      	ldr	r2, [pc, #208]	@ (80010cc <read_pwm+0x5ac>)
 8000ffa:	6053      	str	r3, [r2, #4]
						if(read_5.start > read_5.end)
 8000ffc:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <read_pwm+0x5ac>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b32      	ldr	r3, [pc, #200]	@ (80010cc <read_pwm+0x5ac>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	d90a      	bls.n	800101e <read_pwm+0x4fe>
							read_5.out = 65535 - read_5.start + read_5.end;
 8001008:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <read_pwm+0x5ac>)
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <read_pwm+0x5ac>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001016:	33ff      	adds	r3, #255	@ 0xff
 8001018:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <read_pwm+0x5ac>)
 800101a:	6093      	str	r3, [r2, #8]
 800101c:	e006      	b.n	800102c <read_pwm+0x50c>
							read_5.out = read_5.end - read_5.start;
 800101e:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <read_pwm+0x5ac>)
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <read_pwm+0x5ac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	4a28      	ldr	r2, [pc, #160]	@ (80010cc <read_pwm+0x5ac>)
 800102a:	6093      	str	r3, [r2, #8]
						if(read_5.out > 61200)
 800102c:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <read_pwm+0x5ac>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001034:	4293      	cmp	r3, r2
 8001036:	d904      	bls.n	8001042 <read_pwm+0x522>
							read_5.out = 61200;
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <read_pwm+0x5ac>)
 800103a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	e008      	b.n	8001054 <read_pwm+0x534>
						else if(read_5.out < 7200)
 8001042:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <read_pwm+0x5ac>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 800104a:	d203      	bcs.n	8001054 <read_pwm+0x534>
							read_5.out = 7200;
 800104c:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <read_pwm+0x5ac>)
 800104e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001052:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH5_Pin;
 8001054:	2308      	movs	r3, #8
 8001056:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <read_pwm+0x594>)
 800105c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8001066:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800106a:	4619      	mov	r1, r3
 800106c:	4816      	ldr	r0, [pc, #88]	@ (80010c8 <read_pwm+0x5a8>)
 800106e:	f001 fdf3 	bl	8002c58 <HAL_GPIO_Init>
					break;
 8001072:	e3eb      	b.n	800184c <read_pwm+0xd2c>
			case 6:
				if(HAL_GPIO_ReadPin(CH6_GPIO_Port, CH6_Pin)==1)
 8001074:	2110      	movs	r1, #16
 8001076:	4814      	ldr	r0, [pc, #80]	@ (80010c8 <read_pwm+0x5a8>)
 8001078:	f001 ff82 	bl	8002f80 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b01      	cmp	r3, #1
 8001080:	d128      	bne.n	80010d4 <read_pwm+0x5b4>
					{
						read_6.start = htim1.Instance->CNT;
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <read_pwm+0x58c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001088:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <read_pwm+0x5b0>)
 800108a:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH6_Pin;
 800108c:	2310      	movs	r3, #16
 800108e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <read_pwm+0x5a4>)
 8001094:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 800109e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010a2:	4619      	mov	r1, r3
 80010a4:	4808      	ldr	r0, [pc, #32]	@ (80010c8 <read_pwm+0x5a8>)
 80010a6:	f001 fdd7 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH6_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80010aa:	e3cf      	b.n	800184c <read_pwm+0xd2c>
 80010ac:	20000030 	.word	0x20000030
 80010b0:	2000024c 	.word	0x2000024c
 80010b4:	10110000 	.word	0x10110000
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40011400 	.word	0x40011400
 80010c0:	2000025c 	.word	0x2000025c
 80010c4:	10210000 	.word	0x10210000
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	2000026c 	.word	0x2000026c
 80010d0:	2000027c 	.word	0x2000027c
						read_6.end = htim1.Instance->CNT;
 80010d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001358 <read_pwm+0x838>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	4aa0      	ldr	r2, [pc, #640]	@ (800135c <read_pwm+0x83c>)
 80010dc:	6053      	str	r3, [r2, #4]
						if(read_6.start > read_6.end)
 80010de:	4b9f      	ldr	r3, [pc, #636]	@ (800135c <read_pwm+0x83c>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b9e      	ldr	r3, [pc, #632]	@ (800135c <read_pwm+0x83c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d90a      	bls.n	8001100 <read_pwm+0x5e0>
							read_6.out = 65535 - read_6.start + read_6.end;
 80010ea:	4b9c      	ldr	r3, [pc, #624]	@ (800135c <read_pwm+0x83c>)
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4b9b      	ldr	r3, [pc, #620]	@ (800135c <read_pwm+0x83c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80010f8:	33ff      	adds	r3, #255	@ 0xff
 80010fa:	4a98      	ldr	r2, [pc, #608]	@ (800135c <read_pwm+0x83c>)
 80010fc:	6093      	str	r3, [r2, #8]
 80010fe:	e006      	b.n	800110e <read_pwm+0x5ee>
							read_6.out = read_6.end - read_6.start;
 8001100:	4b96      	ldr	r3, [pc, #600]	@ (800135c <read_pwm+0x83c>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4b95      	ldr	r3, [pc, #596]	@ (800135c <read_pwm+0x83c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	4a94      	ldr	r2, [pc, #592]	@ (800135c <read_pwm+0x83c>)
 800110c:	6093      	str	r3, [r2, #8]
						if(read_6.out > 13700)
 800110e:	4b93      	ldr	r3, [pc, #588]	@ (800135c <read_pwm+0x83c>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f243 5284 	movw	r2, #13700	@ 0x3584
 8001116:	4293      	cmp	r3, r2
 8001118:	d904      	bls.n	8001124 <read_pwm+0x604>
							read_6.out = 13700;
 800111a:	4b90      	ldr	r3, [pc, #576]	@ (800135c <read_pwm+0x83c>)
 800111c:	f243 5284 	movw	r2, #13700	@ 0x3584
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	e009      	b.n	8001138 <read_pwm+0x618>
						else if(read_6.out < 6900)
 8001124:	4b8d      	ldr	r3, [pc, #564]	@ (800135c <read_pwm+0x83c>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f641 22f3 	movw	r2, #6899	@ 0x1af3
 800112c:	4293      	cmp	r3, r2
 800112e:	d803      	bhi.n	8001138 <read_pwm+0x618>
							read_6.out = 6900;
 8001130:	4b8a      	ldr	r3, [pc, #552]	@ (800135c <read_pwm+0x83c>)
 8001132:	f641 22f4 	movw	r2, #6900	@ 0x1af4
 8001136:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH6_Pin;
 8001138:	2310      	movs	r3, #16
 800113a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	4b88      	ldr	r3, [pc, #544]	@ (8001360 <read_pwm+0x840>)
 8001140:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 800114a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800114e:	4619      	mov	r1, r3
 8001150:	4884      	ldr	r0, [pc, #528]	@ (8001364 <read_pwm+0x844>)
 8001152:	f001 fd81 	bl	8002c58 <HAL_GPIO_Init>
					break;
 8001156:	e379      	b.n	800184c <read_pwm+0xd2c>
			case 7:
					if(HAL_GPIO_ReadPin(CH7_GPIO_Port, CH7_Pin)==1)
 8001158:	2120      	movs	r1, #32
 800115a:	4882      	ldr	r0, [pc, #520]	@ (8001364 <read_pwm+0x844>)
 800115c:	f001 ff10 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b01      	cmp	r3, #1
 8001164:	d114      	bne.n	8001190 <read_pwm+0x670>
					{
						read_7.start = htim1.Instance->CNT;
 8001166:	4b7c      	ldr	r3, [pc, #496]	@ (8001358 <read_pwm+0x838>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	4a7e      	ldr	r2, [pc, #504]	@ (8001368 <read_pwm+0x848>)
 800116e:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH7_Pin;
 8001170:	2320      	movs	r3, #32
 8001172:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001176:	4b7d      	ldr	r3, [pc, #500]	@ (800136c <read_pwm+0x84c>)
 8001178:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 8001182:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001186:	4619      	mov	r1, r3
 8001188:	4876      	ldr	r0, [pc, #472]	@ (8001364 <read_pwm+0x844>)
 800118a:	f001 fd65 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH7_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 800118e:	e35d      	b.n	800184c <read_pwm+0xd2c>
						read_7.end = htim1.Instance->CNT;
 8001190:	4b71      	ldr	r3, [pc, #452]	@ (8001358 <read_pwm+0x838>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	4a74      	ldr	r2, [pc, #464]	@ (8001368 <read_pwm+0x848>)
 8001198:	6053      	str	r3, [r2, #4]
						if( read_7.start > read_7.end)
 800119a:	4b73      	ldr	r3, [pc, #460]	@ (8001368 <read_pwm+0x848>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b72      	ldr	r3, [pc, #456]	@ (8001368 <read_pwm+0x848>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90a      	bls.n	80011bc <read_pwm+0x69c>
							read_7.out = 65535 - read_7.start + read_7.end;
 80011a6:	4b70      	ldr	r3, [pc, #448]	@ (8001368 <read_pwm+0x848>)
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001368 <read_pwm+0x848>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011b4:	33ff      	adds	r3, #255	@ 0xff
 80011b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001368 <read_pwm+0x848>)
 80011b8:	6093      	str	r3, [r2, #8]
 80011ba:	e006      	b.n	80011ca <read_pwm+0x6aa>
							read_7.out = read_7.end - read_7.start;
 80011bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <read_pwm+0x848>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4b69      	ldr	r3, [pc, #420]	@ (8001368 <read_pwm+0x848>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4a68      	ldr	r2, [pc, #416]	@ (8001368 <read_pwm+0x848>)
 80011c8:	6093      	str	r3, [r2, #8]
						if(read_7.out > 13500)
 80011ca:	4b67      	ldr	r3, [pc, #412]	@ (8001368 <read_pwm+0x848>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d904      	bls.n	80011e0 <read_pwm+0x6c0>
							read_7.out = 13500;
 80011d6:	4b64      	ldr	r3, [pc, #400]	@ (8001368 <read_pwm+0x848>)
 80011d8:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	e009      	b.n	80011f4 <read_pwm+0x6d4>
						else if(read_7.out < 7140)
 80011e0:	4b61      	ldr	r3, [pc, #388]	@ (8001368 <read_pwm+0x848>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f641 32e3 	movw	r2, #7139	@ 0x1be3
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d803      	bhi.n	80011f4 <read_pwm+0x6d4>
							read_7.out = 7140;
 80011ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <read_pwm+0x848>)
 80011ee:	f641 32e4 	movw	r2, #7140	@ 0x1be4
 80011f2:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH7_Pin;
 80011f4:	2320      	movs	r3, #32
 80011f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fa:	4b59      	ldr	r3, [pc, #356]	@ (8001360 <read_pwm+0x840>)
 80011fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 8001206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800120a:	4619      	mov	r1, r3
 800120c:	4855      	ldr	r0, [pc, #340]	@ (8001364 <read_pwm+0x844>)
 800120e:	f001 fd23 	bl	8002c58 <HAL_GPIO_Init>
					break;
 8001212:	e31b      	b.n	800184c <read_pwm+0xd2c>
			case 8:
					if(HAL_GPIO_ReadPin(CH8_GPIO_Port, CH8_Pin)==1)
 8001214:	2140      	movs	r1, #64	@ 0x40
 8001216:	4853      	ldr	r0, [pc, #332]	@ (8001364 <read_pwm+0x844>)
 8001218:	f001 feb2 	bl	8002f80 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d114      	bne.n	800124c <read_pwm+0x72c>
					{
						read_8.start = htim1.Instance->CNT;
 8001222:	4b4d      	ldr	r3, [pc, #308]	@ (8001358 <read_pwm+0x838>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	4a51      	ldr	r2, [pc, #324]	@ (8001370 <read_pwm+0x850>)
 800122a:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH8_Pin;
 800122c:	2340      	movs	r3, #64	@ 0x40
 800122e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001232:	4b4e      	ldr	r3, [pc, #312]	@ (800136c <read_pwm+0x84c>)
 8001234:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001242:	4619      	mov	r1, r3
 8001244:	4847      	ldr	r0, [pc, #284]	@ (8001364 <read_pwm+0x844>)
 8001246:	f001 fd07 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH8_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 800124a:	e2ff      	b.n	800184c <read_pwm+0xd2c>
						read_8.end = htim1.Instance->CNT;
 800124c:	4b42      	ldr	r3, [pc, #264]	@ (8001358 <read_pwm+0x838>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <read_pwm+0x850>)
 8001254:	6053      	str	r3, [r2, #4]
						if( read_8.start > read_8.end)
 8001256:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <read_pwm+0x850>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b45      	ldr	r3, [pc, #276]	@ (8001370 <read_pwm+0x850>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	d90a      	bls.n	8001278 <read_pwm+0x758>
							read_8.out = 65535 - read_8.start + read_8.end;
 8001262:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <read_pwm+0x850>)
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4b42      	ldr	r3, [pc, #264]	@ (8001370 <read_pwm+0x850>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001270:	33ff      	adds	r3, #255	@ 0xff
 8001272:	4a3f      	ldr	r2, [pc, #252]	@ (8001370 <read_pwm+0x850>)
 8001274:	6093      	str	r3, [r2, #8]
 8001276:	e006      	b.n	8001286 <read_pwm+0x766>
							read_8.out = read_8.end - read_8.start;
 8001278:	4b3d      	ldr	r3, [pc, #244]	@ (8001370 <read_pwm+0x850>)
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4b3c      	ldr	r3, [pc, #240]	@ (8001370 <read_pwm+0x850>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	4a3b      	ldr	r2, [pc, #236]	@ (8001370 <read_pwm+0x850>)
 8001284:	6093      	str	r3, [r2, #8]
						if(read_8.out > 12500)
 8001286:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <read_pwm+0x850>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800128e:	4293      	cmp	r3, r2
 8001290:	d904      	bls.n	800129c <read_pwm+0x77c>
							read_8.out = 12500;
 8001292:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <read_pwm+0x850>)
 8001294:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e009      	b.n	80012b0 <read_pwm+0x790>
						else if(read_8.out < 6160)
 800129c:	4b34      	ldr	r3, [pc, #208]	@ (8001370 <read_pwm+0x850>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f641 020f 	movw	r2, #6159	@ 0x180f
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d803      	bhi.n	80012b0 <read_pwm+0x790>
							read_8.out = 6160;
 80012a8:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <read_pwm+0x850>)
 80012aa:	f641 0210 	movw	r2, #6160	@ 0x1810
 80012ae:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH8_Pin;
 80012b0:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80012b4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012b8:	2240      	movs	r2, #64	@ 0x40
 80012ba:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012bc:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80012c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012c4:	4a26      	ldr	r2, [pc, #152]	@ (8001360 <read_pwm+0x840>)
 80012c6:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80012cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80012d8:	4619      	mov	r1, r3
 80012da:	4822      	ldr	r0, [pc, #136]	@ (8001364 <read_pwm+0x844>)
 80012dc:	f001 fcbc 	bl	8002c58 <HAL_GPIO_Init>
					break;
 80012e0:	e2b4      	b.n	800184c <read_pwm+0xd2c>
			case 9:
					if(HAL_GPIO_ReadPin(CH9_GPIO_Port, CH9_Pin)==1)
 80012e2:	2180      	movs	r1, #128	@ 0x80
 80012e4:	481f      	ldr	r0, [pc, #124]	@ (8001364 <read_pwm+0x844>)
 80012e6:	f001 fe4b 	bl	8002f80 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d11d      	bne.n	800132c <read_pwm+0x80c>
					{
						read_9.start = htim1.Instance->CNT;
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <read_pwm+0x838>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001374 <read_pwm+0x854>)
 80012f8:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH9_Pin;
 80012fa:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80012fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001306:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800130a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800130e:	4a17      	ldr	r2, [pc, #92]	@ (800136c <read_pwm+0x84c>)
 8001310:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001316:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001322:	4619      	mov	r1, r3
 8001324:	480f      	ldr	r0, [pc, #60]	@ (8001364 <read_pwm+0x844>)
 8001326:	f001 fc97 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH9_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 800132a:	e28f      	b.n	800184c <read_pwm+0xd2c>
						read_9.end = htim1.Instance->CNT;
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <read_pwm+0x838>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <read_pwm+0x854>)
 8001334:	6053      	str	r3, [r2, #4]
						if( read_9.start > read_9.end)
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <read_pwm+0x854>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <read_pwm+0x854>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	429a      	cmp	r2, r3
 8001340:	d91a      	bls.n	8001378 <read_pwm+0x858>
							read_9.out = 65535 - read_9.start + read_9.end;
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <read_pwm+0x854>)
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <read_pwm+0x854>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001350:	33ff      	adds	r3, #255	@ 0xff
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <read_pwm+0x854>)
 8001354:	6093      	str	r3, [r2, #8]
 8001356:	e016      	b.n	8001386 <read_pwm+0x866>
 8001358:	20000030 	.word	0x20000030
 800135c:	2000027c 	.word	0x2000027c
 8001360:	10110000 	.word	0x10110000
 8001364:	40010c00 	.word	0x40010c00
 8001368:	2000028c 	.word	0x2000028c
 800136c:	10210000 	.word	0x10210000
 8001370:	2000029c 	.word	0x2000029c
 8001374:	200002ac 	.word	0x200002ac
							read_9.out = read_9.end - read_9.start;
 8001378:	4b9e      	ldr	r3, [pc, #632]	@ (80015f4 <read_pwm+0xad4>)
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4b9d      	ldr	r3, [pc, #628]	@ (80015f4 <read_pwm+0xad4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4a9c      	ldr	r2, [pc, #624]	@ (80015f4 <read_pwm+0xad4>)
 8001384:	6093      	str	r3, [r2, #8]
						if(read_9.out > 12500)
 8001386:	4b9b      	ldr	r3, [pc, #620]	@ (80015f4 <read_pwm+0xad4>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800138e:	4293      	cmp	r3, r2
 8001390:	d904      	bls.n	800139c <read_pwm+0x87c>
							read_9.out = 12500;
 8001392:	4b98      	ldr	r3, [pc, #608]	@ (80015f4 <read_pwm+0xad4>)
 8001394:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	e009      	b.n	80013b0 <read_pwm+0x890>
						else if(read_9.out < 6200)
 800139c:	4b95      	ldr	r3, [pc, #596]	@ (80015f4 <read_pwm+0xad4>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f641 0237 	movw	r2, #6199	@ 0x1837
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d803      	bhi.n	80013b0 <read_pwm+0x890>
							read_9.out = 26500;
 80013a8:	4b92      	ldr	r3, [pc, #584]	@ (80015f4 <read_pwm+0xad4>)
 80013aa:	f246 7284 	movw	r2, #26500	@ 0x6784
 80013ae:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH9_Pin;
 80013b0:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80013b4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013b8:	2280      	movs	r2, #128	@ 0x80
 80013ba:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013bc:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80013c0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c4:	4a8c      	ldr	r2, [pc, #560]	@ (80015f8 <read_pwm+0xad8>)
 80013c6:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80013cc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80013d8:	4619      	mov	r1, r3
 80013da:	4888      	ldr	r0, [pc, #544]	@ (80015fc <read_pwm+0xadc>)
 80013dc:	f001 fc3c 	bl	8002c58 <HAL_GPIO_Init>
					break;
 80013e0:	e234      	b.n	800184c <read_pwm+0xd2c>
			case 10:
					if(HAL_GPIO_ReadPin(CH10_GPIO_Port, CH10_Pin)==1)
 80013e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e6:	4885      	ldr	r0, [pc, #532]	@ (80015fc <read_pwm+0xadc>)
 80013e8:	f001 fdca 	bl	8002f80 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d11e      	bne.n	8001430 <read_pwm+0x910>
					{
						read_10.start = htim1.Instance->CNT;
 80013f2:	4b83      	ldr	r3, [pc, #524]	@ (8001600 <read_pwm+0xae0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	4a82      	ldr	r2, [pc, #520]	@ (8001604 <read_pwm+0xae4>)
 80013fa:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH10_Pin;
 80013fc:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001400:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001408:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800140a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800140e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001412:	4a7d      	ldr	r2, [pc, #500]	@ (8001608 <read_pwm+0xae8>)
 8001414:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800141a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 8001422:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001426:	4619      	mov	r1, r3
 8001428:	4874      	ldr	r0, [pc, #464]	@ (80015fc <read_pwm+0xadc>)
 800142a:	f001 fc15 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH10_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 800142e:	e20d      	b.n	800184c <read_pwm+0xd2c>
						read_10.end = htim1.Instance->CNT;
 8001430:	4b73      	ldr	r3, [pc, #460]	@ (8001600 <read_pwm+0xae0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	4a73      	ldr	r2, [pc, #460]	@ (8001604 <read_pwm+0xae4>)
 8001438:	6053      	str	r3, [r2, #4]
						if( read_10.start > read_10.end)
 800143a:	4b72      	ldr	r3, [pc, #456]	@ (8001604 <read_pwm+0xae4>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b71      	ldr	r3, [pc, #452]	@ (8001604 <read_pwm+0xae4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d90a      	bls.n	800145c <read_pwm+0x93c>
							read_10.out = 65535 - read_10.start + read_10.end;
 8001446:	4b6f      	ldr	r3, [pc, #444]	@ (8001604 <read_pwm+0xae4>)
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4b6e      	ldr	r3, [pc, #440]	@ (8001604 <read_pwm+0xae4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001454:	33ff      	adds	r3, #255	@ 0xff
 8001456:	4a6b      	ldr	r2, [pc, #428]	@ (8001604 <read_pwm+0xae4>)
 8001458:	6093      	str	r3, [r2, #8]
 800145a:	e006      	b.n	800146a <read_pwm+0x94a>
							read_10.out = read_10.end - read_10.start;
 800145c:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <read_pwm+0xae4>)
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4b68      	ldr	r3, [pc, #416]	@ (8001604 <read_pwm+0xae4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	4a67      	ldr	r2, [pc, #412]	@ (8001604 <read_pwm+0xae4>)
 8001468:	6093      	str	r3, [r2, #8]
						if(read_10.out > 60000)
 800146a:	4b66      	ldr	r3, [pc, #408]	@ (8001604 <read_pwm+0xae4>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001472:	4293      	cmp	r3, r2
 8001474:	d904      	bls.n	8001480 <read_pwm+0x960>
							read_10.out = 60000;
 8001476:	4b63      	ldr	r3, [pc, #396]	@ (8001604 <read_pwm+0xae4>)
 8001478:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	e01a      	b.n	80014b6 <read_pwm+0x996>
						else if(read_10.out < 6200)
 8001480:	4b60      	ldr	r3, [pc, #384]	@ (8001604 <read_pwm+0xae4>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f641 0237 	movw	r2, #6199	@ 0x1837
 8001488:	4293      	cmp	r3, r2
 800148a:	d804      	bhi.n	8001496 <read_pwm+0x976>
							read_10.out = 6200;
 800148c:	4b5d      	ldr	r3, [pc, #372]	@ (8001604 <read_pwm+0xae4>)
 800148e:	f641 0238 	movw	r2, #6200	@ 0x1838
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	e00f      	b.n	80014b6 <read_pwm+0x996>
						else if(41000 <= read_10.out && read_10.out <= 42000)
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <read_pwm+0xae4>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f24a 0227 	movw	r2, #40999	@ 0xa027
 800149e:	4293      	cmp	r3, r2
 80014a0:	d909      	bls.n	80014b6 <read_pwm+0x996>
 80014a2:	4b58      	ldr	r3, [pc, #352]	@ (8001604 <read_pwm+0xae4>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d803      	bhi.n	80014b6 <read_pwm+0x996>
							read_10.out = 42100;
 80014ae:	4b55      	ldr	r3, [pc, #340]	@ (8001604 <read_pwm+0xae4>)
 80014b0:	f24a 4274 	movw	r2, #42100	@ 0xa474
 80014b4:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH10_Pin;
 80014b6:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80014ba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c2:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c4:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80014c8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014cc:	4a4a      	ldr	r2, [pc, #296]	@ (80015f8 <read_pwm+0xad8>)
 80014ce:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80014d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80014e0:	4619      	mov	r1, r3
 80014e2:	4846      	ldr	r0, [pc, #280]	@ (80015fc <read_pwm+0xadc>)
 80014e4:	f001 fbb8 	bl	8002c58 <HAL_GPIO_Init>
					break;
 80014e8:	e1b0      	b.n	800184c <read_pwm+0xd2c>
			case 11:
					if(HAL_GPIO_ReadPin(CH11_GPIO_Port, CH11_Pin)==1)
 80014ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ee:	4843      	ldr	r0, [pc, #268]	@ (80015fc <read_pwm+0xadc>)
 80014f0:	f001 fd46 	bl	8002f80 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d11e      	bne.n	8001538 <read_pwm+0xa18>
					{
						read_11.start = htim1.Instance->CNT;
 80014fa:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <read_pwm+0xae0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	4a42      	ldr	r2, [pc, #264]	@ (800160c <read_pwm+0xaec>)
 8001502:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH11_Pin;
 8001504:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001508:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800150c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001510:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001516:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800151a:	4a3b      	ldr	r2, [pc, #236]	@ (8001608 <read_pwm+0xae8>)
 800151c:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001522:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800152e:	4619      	mov	r1, r3
 8001530:	4832      	ldr	r0, [pc, #200]	@ (80015fc <read_pwm+0xadc>)
 8001532:	f001 fb91 	bl	8002c58 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH11_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8001536:	e189      	b.n	800184c <read_pwm+0xd2c>
						read_11.end = htim1.Instance->CNT;
 8001538:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <read_pwm+0xae0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	4a33      	ldr	r2, [pc, #204]	@ (800160c <read_pwm+0xaec>)
 8001540:	6053      	str	r3, [r2, #4]
						if( read_11.start > read_11.end)
 8001542:	4b32      	ldr	r3, [pc, #200]	@ (800160c <read_pwm+0xaec>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <read_pwm+0xaec>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d90a      	bls.n	8001564 <read_pwm+0xa44>
							read_11.out = 65535 - read_11.start + read_11.end;
 800154e:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <read_pwm+0xaec>)
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <read_pwm+0xaec>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800155c:	33ff      	adds	r3, #255	@ 0xff
 800155e:	4a2b      	ldr	r2, [pc, #172]	@ (800160c <read_pwm+0xaec>)
 8001560:	6093      	str	r3, [r2, #8]
 8001562:	e006      	b.n	8001572 <read_pwm+0xa52>
							read_11.out = read_11.end - read_11.start;
 8001564:	4b29      	ldr	r3, [pc, #164]	@ (800160c <read_pwm+0xaec>)
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <read_pwm+0xaec>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	4a27      	ldr	r2, [pc, #156]	@ (800160c <read_pwm+0xaec>)
 8001570:	6093      	str	r3, [r2, #8]
						if(read_11.out > 60000)
 8001572:	4b26      	ldr	r3, [pc, #152]	@ (800160c <read_pwm+0xaec>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800157a:	4293      	cmp	r3, r2
 800157c:	d904      	bls.n	8001588 <read_pwm+0xa68>
							read_11.out = 60000;
 800157e:	4b23      	ldr	r3, [pc, #140]	@ (800160c <read_pwm+0xaec>)
 8001580:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	e01a      	b.n	80015be <read_pwm+0xa9e>
						else if(read_11.out < 6100)
 8001588:	4b20      	ldr	r3, [pc, #128]	@ (800160c <read_pwm+0xaec>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f241 72d3 	movw	r2, #6099	@ 0x17d3
 8001590:	4293      	cmp	r3, r2
 8001592:	d804      	bhi.n	800159e <read_pwm+0xa7e>
							read_11.out = 6100;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <read_pwm+0xaec>)
 8001596:	f241 72d4 	movw	r2, #6100	@ 0x17d4
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	e00f      	b.n	80015be <read_pwm+0xa9e>
						else if(41000 <= read_11.out && read_11.out <= 42000)
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <read_pwm+0xaec>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f24a 0227 	movw	r2, #40999	@ 0xa027
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d909      	bls.n	80015be <read_pwm+0xa9e>
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <read_pwm+0xaec>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d803      	bhi.n	80015be <read_pwm+0xa9e>
							read_11.out = 42100;
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <read_pwm+0xaec>)
 80015b8:	f24a 4274 	movw	r2, #42100	@ 0xa474
 80015bc:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH11_Pin;
 80015be:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80015c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015cc:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80015d0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015d4:	4a08      	ldr	r2, [pc, #32]	@ (80015f8 <read_pwm+0xad8>)
 80015d6:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80015dc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015e8:	4619      	mov	r1, r3
 80015ea:	4804      	ldr	r0, [pc, #16]	@ (80015fc <read_pwm+0xadc>)
 80015ec:	f001 fb34 	bl	8002c58 <HAL_GPIO_Init>
					break;
 80015f0:	e12c      	b.n	800184c <read_pwm+0xd2c>
 80015f2:	bf00      	nop
 80015f4:	200002ac 	.word	0x200002ac
 80015f8:	10110000 	.word	0x10110000
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	20000030 	.word	0x20000030
 8001604:	200002bc 	.word	0x200002bc
 8001608:	10210000 	.word	0x10210000
 800160c:	200002cc 	.word	0x200002cc
			case 12:

				if((HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0)&&(run!=0))
 8001610:	2104      	movs	r1, #4
 8001612:	4891      	ldr	r0, [pc, #580]	@ (8001858 <read_pwm+0xd38>)
 8001614:	f001 fcb4 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d125      	bne.n	800166a <read_pwm+0xb4a>
 800161e:	4b8f      	ldr	r3, [pc, #572]	@ (800185c <read_pwm+0xd3c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d021      	beq.n	800166a <read_pwm+0xb4a>
				{
					read_ss1.start = htim1.Instance -> CNT;
 8001626:	4b8e      	ldr	r3, [pc, #568]	@ (8001860 <read_pwm+0xd40>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	4a8d      	ldr	r2, [pc, #564]	@ (8001864 <read_pwm+0xd44>)
 800162e:	6013      	str	r3, [r2, #0]
					GPIO_InitTypeDef GPIO_InitStruct;
					GPIO_InitStruct.Pin = SS1_Pin;
 8001630:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001634:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001638:	2204      	movs	r2, #4
 800163a:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001640:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001644:	4a88      	ldr	r2, [pc, #544]	@ (8001868 <read_pwm+0xd48>)
 8001646:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800164c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS1_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001658:	4619      	mov	r1, r3
 800165a:	487f      	ldr	r0, [pc, #508]	@ (8001858 <read_pwm+0xd38>)
 800165c:	f001 fafc 	bl	8002c58 <HAL_GPIO_Init>
					active =1;
 8001660:	4b82      	ldr	r3, [pc, #520]	@ (800186c <read_pwm+0xd4c>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
				{
 8001666:	bf00      	nop
					GPIO_InitStruct.Pin = SS1_Pin;
					GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
					GPIO_InitStruct.Pull = GPIO_NOPULL;
					HAL_GPIO_Init(SS1_GPIO_Port, &GPIO_InitStruct);
				}
				break;
 8001668:	e0f0      	b.n	800184c <read_pwm+0xd2c>
					GPIO_InitStruct.Pin = SS1_Pin;
 800166a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800166e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001672:	2204      	movs	r2, #4
 8001674:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001676:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800167a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800167e:	4a7c      	ldr	r2, [pc, #496]	@ (8001870 <read_pwm+0xd50>)
 8001680:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001686:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS1_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001692:	4619      	mov	r1, r3
 8001694:	4870      	ldr	r0, [pc, #448]	@ (8001858 <read_pwm+0xd38>)
 8001696:	f001 fadf 	bl	8002c58 <HAL_GPIO_Init>
				break;
 800169a:	e0d7      	b.n	800184c <read_pwm+0xd2c>
			case 13:

				if((HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0)&&(run!=0))
 800169c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a0:	4874      	ldr	r0, [pc, #464]	@ (8001874 <read_pwm+0xd54>)
 80016a2:	f001 fc6d 	bl	8002f80 <HAL_GPIO_ReadPin>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d126      	bne.n	80016fa <read_pwm+0xbda>
 80016ac:	4b6b      	ldr	r3, [pc, #428]	@ (800185c <read_pwm+0xd3c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d022      	beq.n	80016fa <read_pwm+0xbda>
				{
					read_ss2.start = htim1.Instance -> CNT;
 80016b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001860 <read_pwm+0xd40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001878 <read_pwm+0xd58>)
 80016bc:	6013      	str	r3, [r2, #0]
					GPIO_InitTypeDef GPIO_InitStruct;
					GPIO_InitStruct.Pin = SS2_Pin;
 80016be:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80016c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80016c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ca:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016cc:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80016d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80016d4:	4a64      	ldr	r2, [pc, #400]	@ (8001868 <read_pwm+0xd48>)
 80016d6:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80016dc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016e8:	4619      	mov	r1, r3
 80016ea:	4862      	ldr	r0, [pc, #392]	@ (8001874 <read_pwm+0xd54>)
 80016ec:	f001 fab4 	bl	8002c58 <HAL_GPIO_Init>
					active =2;
 80016f0:	4b5e      	ldr	r3, [pc, #376]	@ (800186c <read_pwm+0xd4c>)
 80016f2:	2202      	movs	r2, #2
 80016f4:	601a      	str	r2, [r3, #0]
				{
 80016f6:	bf00      	nop
					GPIO_InitStruct.Pin = SS2_Pin;
					GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
					GPIO_InitStruct.Pull = GPIO_NOPULL;
					HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
				}
				break;
 80016f8:	e0a8      	b.n	800184c <read_pwm+0xd2c>
					GPIO_InitStruct.Pin = SS2_Pin;
 80016fa:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80016fe:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001706:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001708:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800170c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001710:	4a57      	ldr	r2, [pc, #348]	@ (8001870 <read_pwm+0xd50>)
 8001712:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001718:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001724:	4619      	mov	r1, r3
 8001726:	4853      	ldr	r0, [pc, #332]	@ (8001874 <read_pwm+0xd54>)
 8001728:	f001 fa96 	bl	8002c58 <HAL_GPIO_Init>
				break;
 800172c:	e08e      	b.n	800184c <read_pwm+0xd2c>
			case 14:

				if((HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin)==0)&&(run!=0))
 800172e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001732:	4850      	ldr	r0, [pc, #320]	@ (8001874 <read_pwm+0xd54>)
 8001734:	f001 fc24 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d125      	bne.n	800178a <read_pwm+0xc6a>
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <read_pwm+0xd3c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d021      	beq.n	800178a <read_pwm+0xc6a>
				{
					read_ss3.start = htim1.Instance -> CNT;
 8001746:	4b46      	ldr	r3, [pc, #280]	@ (8001860 <read_pwm+0xd40>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	4a4b      	ldr	r2, [pc, #300]	@ (800187c <read_pwm+0xd5c>)
 800174e:	6013      	str	r3, [r2, #0]
					GPIO_InitTypeDef GPIO_InitStruct;
					GPIO_InitStruct.Pin = SS3_Pin;
 8001750:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001754:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001758:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800175c:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001762:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001766:	4a40      	ldr	r2, [pc, #256]	@ (8001868 <read_pwm+0xd48>)
 8001768:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800176e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800177a:	4619      	mov	r1, r3
 800177c:	483d      	ldr	r0, [pc, #244]	@ (8001874 <read_pwm+0xd54>)
 800177e:	f001 fa6b 	bl	8002c58 <HAL_GPIO_Init>
					active =3;
 8001782:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <read_pwm+0xd4c>)
 8001784:	2203      	movs	r2, #3
 8001786:	601a      	str	r2, [r3, #0]
				{
 8001788:	e018      	b.n	80017bc <read_pwm+0xc9c>
				}
				else
				{

					GPIO_InitTypeDef GPIO_InitStruct;
					GPIO_InitStruct.Pin = SS3_Pin;
 800178a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800178e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001796:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001798:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800179c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80017a0:	4a33      	ldr	r2, [pc, #204]	@ (8001870 <read_pwm+0xd50>)
 80017a2:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80017a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017b4:	4619      	mov	r1, r3
 80017b6:	482f      	ldr	r0, [pc, #188]	@ (8001874 <read_pwm+0xd54>)
 80017b8:	f001 fa4e 	bl	8002c58 <HAL_GPIO_Init>
				}
			case 15:

				if((HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)==0)&&(run!=0))
 80017bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017c0:	482c      	ldr	r0, [pc, #176]	@ (8001874 <read_pwm+0xd54>)
 80017c2:	f001 fbdd 	bl	8002f80 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d125      	bne.n	8001818 <read_pwm+0xcf8>
 80017cc:	4b23      	ldr	r3, [pc, #140]	@ (800185c <read_pwm+0xd3c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d021      	beq.n	8001818 <read_pwm+0xcf8>
				{
					read_ss4.start = htim1.Instance -> CNT;
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <read_pwm+0xd40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	4a29      	ldr	r2, [pc, #164]	@ (8001880 <read_pwm+0xd60>)
 80017dc:	6013      	str	r3, [r2, #0]
					GPIO_InitTypeDef GPIO_InitStruct;
					GPIO_InitStruct.Pin = SS4_Pin;
 80017de:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80017e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80017e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017ea:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ec:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80017f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80017f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <read_pwm+0xd48>)
 80017f6:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80017fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS4_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4619      	mov	r1, r3
 800180a:	481a      	ldr	r0, [pc, #104]	@ (8001874 <read_pwm+0xd54>)
 800180c:	f001 fa24 	bl	8002c58 <HAL_GPIO_Init>
					active =4;
 8001810:	4b16      	ldr	r3, [pc, #88]	@ (800186c <read_pwm+0xd4c>)
 8001812:	2204      	movs	r2, #4
 8001814:	601a      	str	r2, [r3, #0]
				{
 8001816:	e019      	b.n	800184c <read_pwm+0xd2c>
				}
				else
				{
					GPIO_InitTypeDef GPIO_InitStruct;
					GPIO_InitStruct.Pin = SS4_Pin;
 8001818:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800181c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001820:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001824:	601a      	str	r2, [r3, #0]
					GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001826:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800182a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800182e:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <read_pwm+0xd50>)
 8001830:	605a      	str	r2, [r3, #4]
					GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8001836:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
					HAL_GPIO_Init(SS4_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4619      	mov	r1, r3
 8001844:	480b      	ldr	r0, [pc, #44]	@ (8001874 <read_pwm+0xd54>)
 8001846:	f001 fa07 	bl	8002c58 <HAL_GPIO_Init>
			}
	}
}
 800184a:	e7ff      	b.n	800184c <read_pwm+0xd2c>
 800184c:	bf00      	nop
 800184e:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40010c00 	.word	0x40010c00
 800185c:	200001c4 	.word	0x200001c4
 8001860:	20000030 	.word	0x20000030
 8001864:	200002dc 	.word	0x200002dc
 8001868:	10110000 	.word	0x10110000
 800186c:	200001cc 	.word	0x200001cc
 8001870:	10210000 	.word	0x10210000
 8001874:	40011800 	.word	0x40011800
 8001878:	200002ec 	.word	0x200002ec
 800187c:	200002fc 	.word	0x200002fc
 8001880:	2000030c 	.word	0x2000030c

08001884 <convert>:

void convert(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af02      	add	r7, sp, #8
	//////// JOYSTIK GIUA
	if(read_1.out != 43200 && read_2.out != 43250)
 800188a:	4b99      	ldr	r3, [pc, #612]	@ (8001af0 <convert+0x26c>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8001892:	4293      	cmp	r3, r2
 8001894:	d07c      	beq.n	8001990 <convert+0x10c>
 8001896:	4b97      	ldr	r3, [pc, #604]	@ (8001af4 <convert+0x270>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 800189e:	4293      	cmp	r3, r2
 80018a0:	d076      	beq.n	8001990 <convert+0x10c>
	{
		if((val ==4)&&(read_1.out>read_2.out)&&(read_1.out<55000))//(read_1.out > 43200)
 80018a2:	4b95      	ldr	r3, [pc, #596]	@ (8001af8 <convert+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d10f      	bne.n	80018ca <convert+0x46>
 80018aa:	4b91      	ldr	r3, [pc, #580]	@ (8001af0 <convert+0x26c>)
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	4b91      	ldr	r3, [pc, #580]	@ (8001af4 <convert+0x270>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d909      	bls.n	80018ca <convert+0x46>
 80018b6:	4b8e      	ldr	r3, [pc, #568]	@ (8001af0 <convert+0x26c>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 80018be:	4293      	cmp	r3, r2
 80018c0:	d803      	bhi.n	80018ca <convert+0x46>
				{
					val = 4;
 80018c2:	4b8d      	ldr	r3, [pc, #564]	@ (8001af8 <convert+0x274>)
 80018c4:	2204      	movs	r2, #4
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e01f      	b.n	800190a <convert+0x86>
				}
				else if((read_1.out < read_2.out)&&(read_1.out<10000))//(read_1.out < 43200)
 80018ca:	4b89      	ldr	r3, [pc, #548]	@ (8001af0 <convert+0x26c>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4b89      	ldr	r3, [pc, #548]	@ (8001af4 <convert+0x270>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d209      	bcs.n	80018ea <convert+0x66>
 80018d6:	4b86      	ldr	r3, [pc, #536]	@ (8001af0 <convert+0x26c>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80018de:	4293      	cmp	r3, r2
 80018e0:	d803      	bhi.n	80018ea <convert+0x66>
				{
					val = 2;
 80018e2:	4b85      	ldr	r3, [pc, #532]	@ (8001af8 <convert+0x274>)
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e00f      	b.n	800190a <convert+0x86>
				}
				else if((read_1.out>read_2.out)&&(change = 1))//(read_1.out > 43200)
 80018ea:	4b81      	ldr	r3, [pc, #516]	@ (8001af0 <convert+0x26c>)
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	4b81      	ldr	r3, [pc, #516]	@ (8001af4 <convert+0x270>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d906      	bls.n	8001904 <convert+0x80>
 80018f6:	4b81      	ldr	r3, [pc, #516]	@ (8001afc <convert+0x278>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
				{
					val = 1;
 80018fc:	4b7e      	ldr	r3, [pc, #504]	@ (8001af8 <convert+0x274>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e002      	b.n	800190a <convert+0x86>
				}
				else
				{
					val=  3;
 8001904:	4b7c      	ldr	r3, [pc, #496]	@ (8001af8 <convert+0x274>)
 8001906:	2203      	movs	r2, #3
 8001908:	601a      	str	r2, [r3, #0]
				}
				if(read_1.out == 7000 && read_2.out == 7000)
 800190a:	4b79      	ldr	r3, [pc, #484]	@ (8001af0 <convert+0x26c>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001912:	4293      	cmp	r3, r2
 8001914:	d109      	bne.n	800192a <convert+0xa6>
 8001916:	4b77      	ldr	r3, [pc, #476]	@ (8001af4 <convert+0x270>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800191e:	4293      	cmp	r3, r2
 8001920:	d103      	bne.n	800192a <convert+0xa6>
				{
					val =5;
 8001922:	4b75      	ldr	r3, [pc, #468]	@ (8001af8 <convert+0x274>)
 8001924:	2205      	movs	r2, #5
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e031      	b.n	800198e <convert+0x10a>
				}
				else if(read_1.out == 61200 && read_2.out == 7000)
 800192a:	4b71      	ldr	r3, [pc, #452]	@ (8001af0 <convert+0x26c>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001932:	4293      	cmp	r3, r2
 8001934:	d109      	bne.n	800194a <convert+0xc6>
 8001936:	4b6f      	ldr	r3, [pc, #444]	@ (8001af4 <convert+0x270>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800193e:	4293      	cmp	r3, r2
 8001940:	d103      	bne.n	800194a <convert+0xc6>
				{
					val = 6;
 8001942:	4b6d      	ldr	r3, [pc, #436]	@ (8001af8 <convert+0x274>)
 8001944:	2206      	movs	r2, #6
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e021      	b.n	800198e <convert+0x10a>
				}
				else if (read_1.out == 7000 && read_2.out ==61200)
 800194a:	4b69      	ldr	r3, [pc, #420]	@ (8001af0 <convert+0x26c>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001952:	4293      	cmp	r3, r2
 8001954:	d109      	bne.n	800196a <convert+0xe6>
 8001956:	4b67      	ldr	r3, [pc, #412]	@ (8001af4 <convert+0x270>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800195e:	4293      	cmp	r3, r2
 8001960:	d103      	bne.n	800196a <convert+0xe6>
				{
					val = 7;
 8001962:	4b65      	ldr	r3, [pc, #404]	@ (8001af8 <convert+0x274>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e011      	b.n	800198e <convert+0x10a>
				}
				else if (read_1.out == 61200 && read_2.out ==61200)
 800196a:	4b61      	ldr	r3, [pc, #388]	@ (8001af0 <convert+0x26c>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001972:	4293      	cmp	r3, r2
 8001974:	f040 808d 	bne.w	8001a92 <convert+0x20e>
 8001978:	4b5e      	ldr	r3, [pc, #376]	@ (8001af4 <convert+0x270>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001980:	4293      	cmp	r3, r2
 8001982:	f040 8086 	bne.w	8001a92 <convert+0x20e>
				{
					val = 8;
 8001986:	4b5c      	ldr	r3, [pc, #368]	@ (8001af8 <convert+0x274>)
 8001988:	2208      	movs	r2, #8
 800198a:	601a      	str	r2, [r3, #0]
				if(read_1.out == 7000 && read_2.out == 7000)
 800198c:	e081      	b.n	8001a92 <convert+0x20e>
 800198e:	e080      	b.n	8001a92 <convert+0x20e>
				}
	}
	else
	{
		// xoay phai
		if(read_1.out > 43200)
 8001990:	4b57      	ldr	r3, [pc, #348]	@ (8001af0 <convert+0x26c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8001998:	4293      	cmp	r3, r2
 800199a:	d917      	bls.n	80019cc <convert+0x148>
		{
			read1_out = map(read_1.out,43200,61200,28700,0);
 800199c:	4b54      	ldr	r3, [pc, #336]	@ (8001af0 <convert+0x26c>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	b298      	uxth	r0, r3
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	f247 031c 	movw	r3, #28700	@ 0x701c
 80019aa:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80019ae:	f64a 01c0 	movw	r1, #43200	@ 0xa8c0
 80019b2:	f7ff f82f 	bl	8000a14 <map>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b51      	ldr	r3, [pc, #324]	@ (8001b00 <convert+0x27c>)
 80019bc:	601a      	str	r2, [r3, #0]
			val = 1;
 80019be:	4b4e      	ldr	r3, [pc, #312]	@ (8001af8 <convert+0x274>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
			change = 1;
 80019c4:	4b4d      	ldr	r3, [pc, #308]	@ (8001afc <convert+0x278>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e021      	b.n	8001a10 <convert+0x18c>

		}
		//xoay trai
		else if(read_1.out < 43200)
 80019cc:	4b48      	ldr	r3, [pc, #288]	@ (8001af0 <convert+0x26c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f64a 02bf 	movw	r2, #43199	@ 0xa8bf
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d817      	bhi.n	8001a08 <convert+0x184>
		{
			read1_out = map(read_1.out,7000,43200,0,28700);
 80019d8:	4b45      	ldr	r3, [pc, #276]	@ (8001af0 <convert+0x26c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	b298      	uxth	r0, r3
 80019de:	f247 031c 	movw	r3, #28700	@ 0x701c
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 80019ea:	f641 3158 	movw	r1, #7000	@ 0x1b58
 80019ee:	f7ff f811 	bl	8000a14 <map>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b42      	ldr	r3, [pc, #264]	@ (8001b00 <convert+0x27c>)
 80019f8:	601a      	str	r2, [r3, #0]
			val = 2;
 80019fa:	4b3f      	ldr	r3, [pc, #252]	@ (8001af8 <convert+0x274>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
			change = 2;
 8001a00:	4b3e      	ldr	r3, [pc, #248]	@ (8001afc <convert+0x278>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e003      	b.n	8001a10 <convert+0x18c>
		}
		else
		{
			read1_out = 28700;
 8001a08:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <convert+0x27c>)
 8001a0a:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001a0e:	601a      	str	r2, [r3, #0]
		}

		//ch2 tien lui banh
		if(read_2.out > 43250)
 8001a10:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <convert+0x270>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d917      	bls.n	8001a4c <convert+0x1c8>
		{
			read2_out = map(read_2.out,43250,61200,28700,0);
 8001a1c:	4b35      	ldr	r3, [pc, #212]	@ (8001af4 <convert+0x270>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	b298      	uxth	r0, r3
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001a2a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001a2e:	f64a 01f2 	movw	r1, #43250	@ 0xa8f2
 8001a32:	f7fe ffef 	bl	8000a14 <map>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b32      	ldr	r3, [pc, #200]	@ (8001b04 <convert+0x280>)
 8001a3c:	601a      	str	r2, [r3, #0]
			val = 3;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <convert+0x274>)
 8001a40:	2203      	movs	r2, #3
 8001a42:	601a      	str	r2, [r3, #0]
			change = 3;
 8001a44:	4b2d      	ldr	r3, [pc, #180]	@ (8001afc <convert+0x278>)
 8001a46:	2203      	movs	r2, #3
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e023      	b.n	8001a94 <convert+0x210>
		}
		else if((read_2.out < 43250))//||((read1_out>read2_out)&&(read_2.out < 43250))
 8001a4c:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <convert+0x270>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f64a 02f1 	movw	r2, #43249	@ 0xa8f1
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d817      	bhi.n	8001a88 <convert+0x204>
		{
			read2_out = map(read_2.out,7000,43250,0,28700);
 8001a58:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <convert+0x270>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	b298      	uxth	r0, r3
 8001a5e:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2300      	movs	r3, #0
 8001a66:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8001a6a:	f641 3158 	movw	r1, #7000	@ 0x1b58
 8001a6e:	f7fe ffd1 	bl	8000a14 <map>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <convert+0x280>)
 8001a78:	601a      	str	r2, [r3, #0]
			val = 4;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <convert+0x274>)
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	601a      	str	r2, [r3, #0]
			change = 4;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <convert+0x278>)
 8001a82:	2204      	movs	r2, #4
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	e005      	b.n	8001a94 <convert+0x210>
		}
		else
		{
			read2_out = 28700;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <convert+0x280>)
 8001a8a:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e000      	b.n	8001a94 <convert+0x210>
				if(read_1.out == 7000 && read_2.out == 7000)
 8001a92:	bf00      	nop
		}
	}
		//////////////////++++++end+++++/////////////////

	//ch5 volume speed choi
	read5_out = map(read_5.out,7200,61200,28700,0);
 8001a94:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <convert+0x284>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	b298      	uxth	r0, r3
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001aa2:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001aa6:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8001aaa:	f7fe ffb3 	bl	8000a14 <map>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <convert+0x288>)
 8001ab4:	601a      	str	r2, [r3, #0]

	//save status joystick
	if(read_6.out > 7500)
 8001ab6:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <convert+0x28c>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d903      	bls.n	8001aca <convert+0x246>
	{
		save = 1;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <convert+0x290>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e002      	b.n	8001ad0 <convert+0x24c>
	}
	else
	{
		save = 0;
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <convert+0x290>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
	}

	// ch7 disable sensor
	if(read_7.out>8000)
 8001ad0:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <convert+0x294>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001ad8:	d903      	bls.n	8001ae2 <convert+0x25e>
	{
		lock_ss = 1;
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <convert+0x298>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
	}
	else{
		lock_ss = 0;
	}

}
 8001ae0:	e002      	b.n	8001ae8 <convert+0x264>
		lock_ss = 0;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <convert+0x298>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000022c 	.word	0x2000022c
 8001af4:	2000023c 	.word	0x2000023c
 8001af8:	200001bc 	.word	0x200001bc
 8001afc:	200001c8 	.word	0x200001c8
 8001b00:	20000198 	.word	0x20000198
 8001b04:	2000019c 	.word	0x2000019c
 8001b08:	2000026c 	.word	0x2000026c
 8001b0c:	200001a0 	.word	0x200001a0
 8001b10:	2000027c 	.word	0x2000027c
 8001b14:	200001b8 	.word	0x200001b8
 8001b18:	2000028c 	.word	0x2000028c
 8001b1c:	200001d0 	.word	0x200001d0

08001b20 <direction>:
void direction(int running,uint32_t speed_CCR1,uint32_t speed_CCR2)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	//tien
	if(running == 1)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d111      	bne.n	8001b56 <direction+0x36>
	{
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
 8001b32:	4a31      	ldr	r2, [pc, #196]	@ (8001bf8 <direction+0xd8>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
 8001b38:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf8 <direction+0xd8>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b44:	482d      	ldr	r0, [pc, #180]	@ (8001bfc <direction+0xdc>)
 8001b46:	f001 fa32 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2140      	movs	r1, #64	@ 0x40
 8001b4e:	482b      	ldr	r0, [pc, #172]	@ (8001bfc <direction+0xdc>)
 8001b50:	f001 fa2d 	bl	8002fae <HAL_GPIO_WritePin>
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
	}
}
 8001b54:	e04c      	b.n	8001bf0 <direction+0xd0>
	else if(running == 2)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d120      	bne.n	8001b9e <direction+0x7e>
		if(speed_CCR1 ==0&& speed_CCR2==0)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <direction+0x56>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d106      	bne.n	8001b76 <direction+0x56>
			TIM3 -> CCR1 = speed_CCR1+12000; // DC TRAI
 8001b68:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <direction+0xd8>)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001b70:	3320      	adds	r3, #32
 8001b72:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b74:	e002      	b.n	8001b7c <direction+0x5c>
			TIM3 -> CCR1 = speed_CCR1;
 8001b76:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <direction+0xd8>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2+1000; // DC PHAI
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <direction+0xd8>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b84:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b8c:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <direction+0xdc>)
 8001b8e:	f001 fa0e 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2140      	movs	r1, #64	@ 0x40
 8001b96:	4819      	ldr	r0, [pc, #100]	@ (8001bfc <direction+0xdc>)
 8001b98:	f001 fa09 	bl	8002fae <HAL_GPIO_WritePin>
}
 8001b9c:	e028      	b.n	8001bf0 <direction+0xd0>
	else if(running == 3)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d111      	bne.n	8001bc8 <direction+0xa8>
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
 8001ba4:	4a14      	ldr	r2, [pc, #80]	@ (8001bf8 <direction+0xd8>)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
 8001baa:	4a13      	ldr	r2, [pc, #76]	@ (8001bf8 <direction+0xd8>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb6:	4811      	ldr	r0, [pc, #68]	@ (8001bfc <direction+0xdc>)
 8001bb8:	f001 f9f9 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2140      	movs	r1, #64	@ 0x40
 8001bc0:	480e      	ldr	r0, [pc, #56]	@ (8001bfc <direction+0xdc>)
 8001bc2:	f001 f9f4 	bl	8002fae <HAL_GPIO_WritePin>
}
 8001bc6:	e013      	b.n	8001bf0 <direction+0xd0>
	else if(running == 4)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d110      	bne.n	8001bf0 <direction+0xd0>
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <direction+0xd8>)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
 8001bd4:	4a08      	ldr	r2, [pc, #32]	@ (8001bf8 <direction+0xd8>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001be0:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <direction+0xdc>)
 8001be2:	f001 f9e4 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
 8001be6:	2201      	movs	r2, #1
 8001be8:	2140      	movs	r1, #64	@ 0x40
 8001bea:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <direction+0xdc>)
 8001bec:	f001 f9df 	bl	8002fae <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40011000 	.word	0x40011000

08001c00 <Status_SS>:

void Status_SS(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b09c      	sub	sp, #112	@ 0x70
 8001c04:	af00      	add	r7, sp, #0
	value_timer = htim1.Instance -> CNT;
 8001c06:	4bab      	ldr	r3, [pc, #684]	@ (8001eb4 <Status_SS+0x2b4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	4aaa      	ldr	r2, [pc, #680]	@ (8001eb8 <Status_SS+0x2b8>)
 8001c0e:	6013      	str	r3, [r2, #0]
	if(active == 1&& run==1)
 8001c10:	4baa      	ldr	r3, [pc, #680]	@ (8001ebc <Status_SS+0x2bc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	f040 808f 	bne.w	8001d38 <Status_SS+0x138>
 8001c1a:	4ba9      	ldr	r3, [pc, #676]	@ (8001ec0 <Status_SS+0x2c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	f040 808a 	bne.w	8001d38 <Status_SS+0x138>
	{
		if( read_ss1.start > value_timer)
 8001c24:	4ba7      	ldr	r3, [pc, #668]	@ (8001ec4 <Status_SS+0x2c4>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4ba3      	ldr	r3, [pc, #652]	@ (8001eb8 <Status_SS+0x2b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d90a      	bls.n	8001c46 <Status_SS+0x46>
		{
			read_ss1.out = 65535 - read_ss1.start + value_timer;
 8001c30:	4ba1      	ldr	r3, [pc, #644]	@ (8001eb8 <Status_SS+0x2b8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4ba3      	ldr	r3, [pc, #652]	@ (8001ec4 <Status_SS+0x2c4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001c3e:	33ff      	adds	r3, #255	@ 0xff
 8001c40:	4aa0      	ldr	r2, [pc, #640]	@ (8001ec4 <Status_SS+0x2c4>)
 8001c42:	6093      	str	r3, [r2, #8]
 8001c44:	e006      	b.n	8001c54 <Status_SS+0x54>
		}
		else
		{
			read_ss1.out = value_timer - read_ss1.start;
 8001c46:	4b9c      	ldr	r3, [pc, #624]	@ (8001eb8 <Status_SS+0x2b8>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ec4 <Status_SS+0x2c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a9c      	ldr	r2, [pc, #624]	@ (8001ec4 <Status_SS+0x2c4>)
 8001c52:	6093      	str	r3, [r2, #8]
		}
		if(read_ss1.out >= 50000)
 8001c54:	4b9b      	ldr	r3, [pc, #620]	@ (8001ec4 <Status_SS+0x2c4>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d96b      	bls.n	8001d38 <Status_SS+0x138>
		{
			active =0;
 8001c60:	4b96      	ldr	r3, [pc, #600]	@ (8001ebc <Status_SS+0x2bc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2180      	movs	r1, #128	@ 0x80
 8001c6a:	4897      	ldr	r0, [pc, #604]	@ (8001ec8 <Status_SS+0x2c8>)
 8001c6c:	f001 f99f 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c76:	4895      	ldr	r0, [pc, #596]	@ (8001ecc <Status_SS+0x2cc>)
 8001c78:	f001 f999 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c82:	4892      	ldr	r0, [pc, #584]	@ (8001ecc <Status_SS+0x2cc>)
 8001c84:	f001 f993 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c8e:	488f      	ldr	r0, [pc, #572]	@ (8001ecc <Status_SS+0x2cc>)
 8001c90:	f001 f98d 	bl	8002fae <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2180      	movs	r1, #128	@ 0x80
 8001c98:	488b      	ldr	r0, [pc, #556]	@ (8001ec8 <Status_SS+0x2c8>)
 8001c9a:	f001 f988 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ca4:	4889      	ldr	r0, [pc, #548]	@ (8001ecc <Status_SS+0x2cc>)
 8001ca6:	f001 f982 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cb0:	4886      	ldr	r0, [pc, #536]	@ (8001ecc <Status_SS+0x2cc>)
 8001cb2:	f001 f97c 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cbc:	4883      	ldr	r0, [pc, #524]	@ (8001ecc <Status_SS+0x2cc>)
 8001cbe:	f001 f976 	bl	8002fae <HAL_GPIO_WritePin>

			GPIO_InitTypeDef GPIO_InitStruct;
			GPIO_InitStruct.Pin = SS1_Pin;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	663b      	str	r3, [r7, #96]	@ 0x60
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cc6:	4b82      	ldr	r3, [pc, #520]	@ (8001ed0 <Status_SS+0x2d0>)
 8001cc8:	667b      	str	r3, [r7, #100]	@ 0x64
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
			HAL_GPIO_Init(SS1_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	487f      	ldr	r0, [pc, #508]	@ (8001ed4 <Status_SS+0x2d4>)
 8001cd6:	f000 ffbf 	bl	8002c58 <HAL_GPIO_Init>

			direction(2,20000,15000);// ss1: lui nhe sang phai
 8001cda:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001cde:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f7ff ff1c 	bl	8001b20 <direction>
			HAL_Delay(1000);
 8001ce8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cec:	f000 fe82 	bl	80029f4 <HAL_Delay>
			direction(1,28700,28700);
 8001cf0:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001cf4:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff ff11 	bl	8001b20 <direction>

			if(HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0){
 8001cfe:	2104      	movs	r1, #4
 8001d00:	4874      	ldr	r0, [pc, #464]	@ (8001ed4 <Status_SS+0x2d4>)
 8001d02:	f001 f93d 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d115      	bne.n	8001d38 <Status_SS+0x138>
				direction(2,20000,15000);// ss1: lui nhe sang phai
 8001d0c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001d10:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001d14:	2002      	movs	r0, #2
 8001d16:	f7ff ff03 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8001d1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d1e:	f000 fe69 	bl	80029f4 <HAL_Delay>
				direction(1,28700,28700);
 8001d22:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001d26:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff fef8 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8001d30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d34:	f000 fe5e 	bl	80029f4 <HAL_Delay>
			}
		}
	}
	if(active == 2 && run == 1)
 8001d38:	4b60      	ldr	r3, [pc, #384]	@ (8001ebc <Status_SS+0x2bc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	f040 809e 	bne.w	8001e7e <Status_SS+0x27e>
 8001d42:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec0 <Status_SS+0x2c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	f040 8099 	bne.w	8001e7e <Status_SS+0x27e>
	{
		if( read_ss2.start > value_timer)
 8001d4c:	4b62      	ldr	r3, [pc, #392]	@ (8001ed8 <Status_SS+0x2d8>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b59      	ldr	r3, [pc, #356]	@ (8001eb8 <Status_SS+0x2b8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d90a      	bls.n	8001d6e <Status_SS+0x16e>
		{
			read_ss2.out = 65535 - read_ss2.start + value_timer;
 8001d58:	4b57      	ldr	r3, [pc, #348]	@ (8001eb8 <Status_SS+0x2b8>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ed8 <Status_SS+0x2d8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001d66:	33ff      	adds	r3, #255	@ 0xff
 8001d68:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed8 <Status_SS+0x2d8>)
 8001d6a:	6093      	str	r3, [r2, #8]
 8001d6c:	e006      	b.n	8001d7c <Status_SS+0x17c>
		}
		else
		{
			read_ss2.out = value_timer - read_ss2.start;
 8001d6e:	4b52      	ldr	r3, [pc, #328]	@ (8001eb8 <Status_SS+0x2b8>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b59      	ldr	r3, [pc, #356]	@ (8001ed8 <Status_SS+0x2d8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4a57      	ldr	r2, [pc, #348]	@ (8001ed8 <Status_SS+0x2d8>)
 8001d7a:	6093      	str	r3, [r2, #8]
		}

		if(read_ss2.out >= 2000)
 8001d7c:	4b56      	ldr	r3, [pc, #344]	@ (8001ed8 <Status_SS+0x2d8>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d84:	d36e      	bcc.n	8001e64 <Status_SS+0x264>
		{
			active =0;
 8001d86:	4b4d      	ldr	r3, [pc, #308]	@ (8001ebc <Status_SS+0x2bc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2180      	movs	r1, #128	@ 0x80
 8001d90:	484d      	ldr	r0, [pc, #308]	@ (8001ec8 <Status_SS+0x2c8>)
 8001d92:	f001 f90c 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d9c:	484b      	ldr	r0, [pc, #300]	@ (8001ecc <Status_SS+0x2cc>)
 8001d9e:	f001 f906 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001da8:	4848      	ldr	r0, [pc, #288]	@ (8001ecc <Status_SS+0x2cc>)
 8001daa:	f001 f900 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001db4:	4845      	ldr	r0, [pc, #276]	@ (8001ecc <Status_SS+0x2cc>)
 8001db6:	f001 f8fa 	bl	8002fae <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2180      	movs	r1, #128	@ 0x80
 8001dbe:	4842      	ldr	r0, [pc, #264]	@ (8001ec8 <Status_SS+0x2c8>)
 8001dc0:	f001 f8f5 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dca:	4840      	ldr	r0, [pc, #256]	@ (8001ecc <Status_SS+0x2cc>)
 8001dcc:	f001 f8ef 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dd6:	483d      	ldr	r0, [pc, #244]	@ (8001ecc <Status_SS+0x2cc>)
 8001dd8:	f001 f8e9 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de2:	483a      	ldr	r0, [pc, #232]	@ (8001ecc <Status_SS+0x2cc>)
 8001de4:	f001 f8e3 	bl	8002fae <HAL_GPIO_WritePin>

			GPIO_InitTypeDef GPIO_InitStruct;
			GPIO_InitStruct.Pin = SS2_Pin;
 8001de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dec:	653b      	str	r3, [r7, #80]	@ 0x50
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dee:	4b38      	ldr	r3, [pc, #224]	@ (8001ed0 <Status_SS+0x2d0>)
 8001df0:	657b      	str	r3, [r7, #84]	@ 0x54
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	65bb      	str	r3, [r7, #88]	@ 0x58
			HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4837      	ldr	r0, [pc, #220]	@ (8001edc <Status_SS+0x2dc>)
 8001dfe:	f000 ff2b 	bl	8002c58 <HAL_GPIO_Init>

			direction(1,20000,15000);// ss1: tien nhe sang trai lui +13000
 8001e02:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001e06:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff fe88 	bl	8001b20 <direction>
			HAL_Delay(1000);
 8001e10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e14:	f000 fdee 	bl	80029f4 <HAL_Delay>
			direction(1,28700,28700);
 8001e18:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001e1c:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff fe7d 	bl	8001b20 <direction>

			if(HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0){
 8001e26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e2a:	482c      	ldr	r0, [pc, #176]	@ (8001edc <Status_SS+0x2dc>)
 8001e2c:	f001 f8a8 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d123      	bne.n	8001e7e <Status_SS+0x27e>
				direction(1,20000,15000);// ss1: tien nhe sang trai lui +13000
 8001e36:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001e3a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7ff fe6e 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8001e44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e48:	f000 fdd4 	bl	80029f4 <HAL_Delay>
				direction(1,28700,28700);
 8001e4c:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001e50:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7ff fe63 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8001e5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e5e:	f000 fdc9 	bl	80029f4 <HAL_Delay>
 8001e62:	e00c      	b.n	8001e7e <Status_SS+0x27e>
			}
		}
		else
		{
			GPIO_InitTypeDef GPIO_InitStruct;
			GPIO_InitStruct.Pin = SS2_Pin;
 8001e64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e68:	643b      	str	r3, [r7, #64]	@ 0x40
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <Status_SS+0x2d0>)
 8001e6c:	647b      	str	r3, [r7, #68]	@ 0x44
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	64bb      	str	r3, [r7, #72]	@ 0x48
			HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e76:	4619      	mov	r1, r3
 8001e78:	4818      	ldr	r0, [pc, #96]	@ (8001edc <Status_SS+0x2dc>)
 8001e7a:	f000 feed 	bl	8002c58 <HAL_GPIO_Init>
		}
	}
	if(active == 3 && run == 1)
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <Status_SS+0x2bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	f040 80b6 	bne.w	8001ff4 <Status_SS+0x3f4>
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <Status_SS+0x2c0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	f040 80b1 	bne.w	8001ff4 <Status_SS+0x3f4>
	{
		if( read_ss3.start > value_timer)
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <Status_SS+0x2e0>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <Status_SS+0x2b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d922      	bls.n	8001ee4 <Status_SS+0x2e4>
		{
			read_ss3.out = 65535 - read_ss3.start + value_timer;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <Status_SS+0x2b8>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <Status_SS+0x2e0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001eac:	33ff      	adds	r3, #255	@ 0xff
 8001eae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <Status_SS+0x2e0>)
 8001eb0:	6093      	str	r3, [r2, #8]
 8001eb2:	e01e      	b.n	8001ef2 <Status_SS+0x2f2>
 8001eb4:	20000030 	.word	0x20000030
 8001eb8:	2000002c 	.word	0x2000002c
 8001ebc:	200001cc 	.word	0x200001cc
 8001ec0:	200001c4 	.word	0x200001c4
 8001ec4:	200002dc 	.word	0x200002dc
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40011400 	.word	0x40011400
 8001ed0:	10210000 	.word	0x10210000
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	200002ec 	.word	0x200002ec
 8001edc:	40011800 	.word	0x40011800
 8001ee0:	200002fc 	.word	0x200002fc
		}
		else
		{
			read_ss3.out = value_timer - read_ss3.start;
 8001ee4:	4b97      	ldr	r3, [pc, #604]	@ (8002144 <Status_SS+0x544>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b97      	ldr	r3, [pc, #604]	@ (8002148 <Status_SS+0x548>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	4a96      	ldr	r2, [pc, #600]	@ (8002148 <Status_SS+0x548>)
 8001ef0:	6093      	str	r3, [r2, #8]
		}
		if(read_ss3.out >= 2000)
 8001ef2:	4b95      	ldr	r3, [pc, #596]	@ (8002148 <Status_SS+0x548>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001efa:	d36e      	bcc.n	8001fda <Status_SS+0x3da>
		{
			active =0;
 8001efc:	4b93      	ldr	r3, [pc, #588]	@ (800214c <Status_SS+0x54c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	4892      	ldr	r0, [pc, #584]	@ (8002150 <Status_SS+0x550>)
 8001f08:	f001 f851 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f12:	4890      	ldr	r0, [pc, #576]	@ (8002154 <Status_SS+0x554>)
 8001f14:	f001 f84b 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f1e:	488d      	ldr	r0, [pc, #564]	@ (8002154 <Status_SS+0x554>)
 8001f20:	f001 f845 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f2a:	488a      	ldr	r0, [pc, #552]	@ (8002154 <Status_SS+0x554>)
 8001f2c:	f001 f83f 	bl	8002fae <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2180      	movs	r1, #128	@ 0x80
 8001f34:	4886      	ldr	r0, [pc, #536]	@ (8002150 <Status_SS+0x550>)
 8001f36:	f001 f83a 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f40:	4884      	ldr	r0, [pc, #528]	@ (8002154 <Status_SS+0x554>)
 8001f42:	f001 f834 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f4c:	4881      	ldr	r0, [pc, #516]	@ (8002154 <Status_SS+0x554>)
 8001f4e:	f001 f82e 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f58:	487e      	ldr	r0, [pc, #504]	@ (8002154 <Status_SS+0x554>)
 8001f5a:	f001 f828 	bl	8002fae <HAL_GPIO_WritePin>

			GPIO_InitTypeDef GPIO_InitStruct;
			GPIO_InitStruct.Pin = SS3_Pin;
 8001f5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f62:	633b      	str	r3, [r7, #48]	@ 0x30
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f64:	4b7c      	ldr	r3, [pc, #496]	@ (8002158 <Status_SS+0x558>)
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
			HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f70:	4619      	mov	r1, r3
 8001f72:	487a      	ldr	r0, [pc, #488]	@ (800215c <Status_SS+0x55c>)
 8001f74:	f000 fe70 	bl	8002c58 <HAL_GPIO_Init>

			direction(2,15000,22000);// ss1: lui nhe sang phai
 8001f78:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001f7c:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001f80:	2002      	movs	r0, #2
 8001f82:	f7ff fdcd 	bl	8001b20 <direction>
			HAL_Delay(1000);
 8001f86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f8a:	f000 fd33 	bl	80029f4 <HAL_Delay>
			direction(1,28700,28700);
 8001f8e:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001f92:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff fdc2 	bl	8001b20 <direction>
			if(HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin) == 0)
 8001f9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fa0:	486e      	ldr	r0, [pc, #440]	@ (800215c <Status_SS+0x55c>)
 8001fa2:	f000 ffed 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d123      	bne.n	8001ff4 <Status_SS+0x3f4>
			{
				direction(2,15000,22000);// ss1: lui nhe sang phai
 8001fac:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001fb0:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff fdb3 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8001fba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fbe:	f000 fd19 	bl	80029f4 <HAL_Delay>
				direction(1,28700,28700);
 8001fc2:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001fc6:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7ff fda8 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8001fd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd4:	f000 fd0e 	bl	80029f4 <HAL_Delay>
 8001fd8:	e00c      	b.n	8001ff4 <Status_SS+0x3f4>
			}
		}
		else
		{
			GPIO_InitTypeDef GPIO_InitStruct;
			GPIO_InitStruct.Pin = SS3_Pin;
 8001fda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fde:	623b      	str	r3, [r7, #32]
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <Status_SS+0x558>)
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
			HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	4619      	mov	r1, r3
 8001fee:	485b      	ldr	r0, [pc, #364]	@ (800215c <Status_SS+0x55c>)
 8001ff0:	f000 fe32 	bl	8002c58 <HAL_GPIO_Init>
		}
	}
	if(active == 4 && run ==1)
 8001ff4:	4b55      	ldr	r3, [pc, #340]	@ (800214c <Status_SS+0x54c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	f040 809e 	bne.w	800213a <Status_SS+0x53a>
 8001ffe:	4b58      	ldr	r3, [pc, #352]	@ (8002160 <Status_SS+0x560>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	f040 8099 	bne.w	800213a <Status_SS+0x53a>
	{
		if( read_ss4.start > value_timer)
 8002008:	4b56      	ldr	r3, [pc, #344]	@ (8002164 <Status_SS+0x564>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b4d      	ldr	r3, [pc, #308]	@ (8002144 <Status_SS+0x544>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d90a      	bls.n	800202a <Status_SS+0x42a>
		{
			read_ss4.out = 65535 - read_ss4.start + value_timer;
 8002014:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <Status_SS+0x544>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b52      	ldr	r3, [pc, #328]	@ (8002164 <Status_SS+0x564>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002022:	33ff      	adds	r3, #255	@ 0xff
 8002024:	4a4f      	ldr	r2, [pc, #316]	@ (8002164 <Status_SS+0x564>)
 8002026:	6093      	str	r3, [r2, #8]
 8002028:	e006      	b.n	8002038 <Status_SS+0x438>
		}
		else
		{
			read_ss4.out = value_timer - read_ss4.start;
 800202a:	4b46      	ldr	r3, [pc, #280]	@ (8002144 <Status_SS+0x544>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b4d      	ldr	r3, [pc, #308]	@ (8002164 <Status_SS+0x564>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4a4b      	ldr	r2, [pc, #300]	@ (8002164 <Status_SS+0x564>)
 8002036:	6093      	str	r3, [r2, #8]
		}
		if(read_ss4.out >= 20000)
 8002038:	4b4a      	ldr	r3, [pc, #296]	@ (8002164 <Status_SS+0x564>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002040:	4293      	cmp	r3, r2
 8002042:	d96e      	bls.n	8002122 <Status_SS+0x522>
		{
			active = 0;
 8002044:	4b41      	ldr	r3, [pc, #260]	@ (800214c <Status_SS+0x54c>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2180      	movs	r1, #128	@ 0x80
 800204e:	4840      	ldr	r0, [pc, #256]	@ (8002150 <Status_SS+0x550>)
 8002050:	f000 ffad 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800205a:	483e      	ldr	r0, [pc, #248]	@ (8002154 <Status_SS+0x554>)
 800205c:	f000 ffa7 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002066:	483b      	ldr	r0, [pc, #236]	@ (8002154 <Status_SS+0x554>)
 8002068:	f000 ffa1 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002072:	4838      	ldr	r0, [pc, #224]	@ (8002154 <Status_SS+0x554>)
 8002074:	f000 ff9b 	bl	8002fae <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2180      	movs	r1, #128	@ 0x80
 800207c:	4834      	ldr	r0, [pc, #208]	@ (8002150 <Status_SS+0x550>)
 800207e:	f000 ff96 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002088:	4832      	ldr	r0, [pc, #200]	@ (8002154 <Status_SS+0x554>)
 800208a:	f000 ff90 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002094:	482f      	ldr	r0, [pc, #188]	@ (8002154 <Status_SS+0x554>)
 8002096:	f000 ff8a 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020a0:	482c      	ldr	r0, [pc, #176]	@ (8002154 <Status_SS+0x554>)
 80020a2:	f000 ff84 	bl	8002fae <HAL_GPIO_WritePin>

			GPIO_InitTypeDef GPIO_InitStruct;
			GPIO_InitStruct.Pin = SS4_Pin;
 80020a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020aa:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <Status_SS+0x558>)
 80020ae:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(SS4_GPIO_Port, &GPIO_InitStruct);
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	4619      	mov	r1, r3
 80020ba:	4828      	ldr	r0, [pc, #160]	@ (800215c <Status_SS+0x55c>)
 80020bc:	f000 fdcc 	bl	8002c58 <HAL_GPIO_Init>

			direction(1,15000,22000);// ss1: tiennhe sang trai
 80020c0:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 80020c4:	f643 2198 	movw	r1, #15000	@ 0x3a98
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff fd29 	bl	8001b20 <direction>
			HAL_Delay(1000);
 80020ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020d2:	f000 fc8f 	bl	80029f4 <HAL_Delay>
			direction(1,28700,28700);
 80020d6:	f247 021c 	movw	r2, #28700	@ 0x701c
 80020da:	f247 011c 	movw	r1, #28700	@ 0x701c
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff fd1e 	bl	8001b20 <direction>

			if(HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)){
 80020e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020e8:	481c      	ldr	r0, [pc, #112]	@ (800215c <Status_SS+0x55c>)
 80020ea:	f000 ff49 	bl	8002f80 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d022      	beq.n	800213a <Status_SS+0x53a>
				direction(1,15000,22000);// ss1: tiennhe sang trai
 80020f4:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 80020f8:	f643 2198 	movw	r1, #15000	@ 0x3a98
 80020fc:	2001      	movs	r0, #1
 80020fe:	f7ff fd0f 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8002102:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002106:	f000 fc75 	bl	80029f4 <HAL_Delay>
				direction(1,28700,28700);
 800210a:	f247 021c 	movw	r2, #28700	@ 0x701c
 800210e:	f247 011c 	movw	r1, #28700	@ 0x701c
 8002112:	2001      	movs	r0, #1
 8002114:	f7ff fd04 	bl	8001b20 <direction>
				HAL_Delay(1000);
 8002118:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800211c:	f000 fc6a 	bl	80029f4 <HAL_Delay>
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
			GPIO_InitStruct.Pull = GPIO_NOPULL;
			HAL_GPIO_Init(SS4_GPIO_Port, &GPIO_InitStruct);
		}
	}
}
 8002120:	e00b      	b.n	800213a <Status_SS+0x53a>
			GPIO_InitStruct.Pin = SS4_Pin;
 8002122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002126:	603b      	str	r3, [r7, #0]
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <Status_SS+0x558>)
 800212a:	607b      	str	r3, [r7, #4]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
			HAL_GPIO_Init(SS4_GPIO_Port, &GPIO_InitStruct);
 8002130:	463b      	mov	r3, r7
 8002132:	4619      	mov	r1, r3
 8002134:	4809      	ldr	r0, [pc, #36]	@ (800215c <Status_SS+0x55c>)
 8002136:	f000 fd8f 	bl	8002c58 <HAL_GPIO_Init>
}
 800213a:	bf00      	nop
 800213c:	3770      	adds	r7, #112	@ 0x70
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000002c 	.word	0x2000002c
 8002148:	200002fc 	.word	0x200002fc
 800214c:	200001cc 	.word	0x200001cc
 8002150:	40011000 	.word	0x40011000
 8002154:	40011400 	.word	0x40011400
 8002158:	10210000 	.word	0x10210000
 800215c:	40011800 	.word	0x40011800
 8002160:	200001c4 	.word	0x200001c4
 8002164:	2000030c 	.word	0x2000030c

08002168 <control>:

void control(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	Read_ss1 = HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin);
 800216c:	2104      	movs	r1, #4
 800216e:	48aa      	ldr	r0, [pc, #680]	@ (8002418 <control+0x2b0>)
 8002170:	f000 ff06 	bl	8002f80 <HAL_GPIO_ReadPin>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4ba8      	ldr	r3, [pc, #672]	@ (800241c <control+0x2b4>)
 800217a:	601a      	str	r2, [r3, #0]
	Read_ss2 = HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin);
 800217c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002180:	48a7      	ldr	r0, [pc, #668]	@ (8002420 <control+0x2b8>)
 8002182:	f000 fefd 	bl	8002f80 <HAL_GPIO_ReadPin>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	4ba6      	ldr	r3, [pc, #664]	@ (8002424 <control+0x2bc>)
 800218c:	601a      	str	r2, [r3, #0]
	Read_ss3 = HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin);
 800218e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002192:	48a3      	ldr	r0, [pc, #652]	@ (8002420 <control+0x2b8>)
 8002194:	f000 fef4 	bl	8002f80 <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	4ba2      	ldr	r3, [pc, #648]	@ (8002428 <control+0x2c0>)
 800219e:	601a      	str	r2, [r3, #0]
	Read_ss4 = HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin);
 80021a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021a4:	489e      	ldr	r0, [pc, #632]	@ (8002420 <control+0x2b8>)
 80021a6:	f000 feeb 	bl	8002f80 <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b9f      	ldr	r3, [pc, #636]	@ (800242c <control+0x2c4>)
 80021b0:	601a      	str	r2, [r3, #0]

	if((Read_ss1 ==0 && Read_ss2 ==0 && Read_ss3 ==0 && Read_ss4==0 && lock_ss==0)||
 80021b2:	4b9a      	ldr	r3, [pc, #616]	@ (800241c <control+0x2b4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <control+0x72>
 80021ba:	4b9a      	ldr	r3, [pc, #616]	@ (8002424 <control+0x2bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10b      	bne.n	80021da <control+0x72>
 80021c2:	4b99      	ldr	r3, [pc, #612]	@ (8002428 <control+0x2c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <control+0x72>
 80021ca:	4b98      	ldr	r3, [pc, #608]	@ (800242c <control+0x2c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <control+0x72>
 80021d2:	4b97      	ldr	r3, [pc, #604]	@ (8002430 <control+0x2c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d019      	beq.n	800220e <control+0xa6>
			(save !=0 && read1_out != 28700 && read2_out != 28700 && read5_out != 28700)||(read_7.out == 0))//
 80021da:	4b96      	ldr	r3, [pc, #600]	@ (8002434 <control+0x2cc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
	if((Read_ss1 ==0 && Read_ss2 ==0 && Read_ss3 ==0 && Read_ss4==0 && lock_ss==0)||
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d011      	beq.n	8002206 <control+0x9e>
			(save !=0 && read1_out != 28700 && read2_out != 28700 && read5_out != 28700)||(read_7.out == 0))//
 80021e2:	4b95      	ldr	r3, [pc, #596]	@ (8002438 <control+0x2d0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f247 021c 	movw	r2, #28700	@ 0x701c
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00b      	beq.n	8002206 <control+0x9e>
 80021ee:	4b93      	ldr	r3, [pc, #588]	@ (800243c <control+0x2d4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f247 021c 	movw	r2, #28700	@ 0x701c
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d005      	beq.n	8002206 <control+0x9e>
 80021fa:	4b91      	ldr	r3, [pc, #580]	@ (8002440 <control+0x2d8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f247 021c 	movw	r2, #28700	@ 0x701c
 8002202:	4293      	cmp	r3, r2
 8002204:	d103      	bne.n	800220e <control+0xa6>
 8002206:	4b8f      	ldr	r3, [pc, #572]	@ (8002444 <control+0x2dc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d149      	bne.n	80022a2 <control+0x13a>
	{
		run =0;
 800220e:	4b8e      	ldr	r3, [pc, #568]	@ (8002448 <control+0x2e0>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	2180      	movs	r1, #128	@ 0x80
 8002218:	488c      	ldr	r0, [pc, #560]	@ (800244c <control+0x2e4>)
 800221a:	f000 fec8 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002224:	488a      	ldr	r0, [pc, #552]	@ (8002450 <control+0x2e8>)
 8002226:	f000 fec2 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002230:	4887      	ldr	r0, [pc, #540]	@ (8002450 <control+0x2e8>)
 8002232:	f000 febc 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800223c:	4884      	ldr	r0, [pc, #528]	@ (8002450 <control+0x2e8>)
 800223e:	f000 feb6 	bl	8002fae <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002248:	4880      	ldr	r0, [pc, #512]	@ (800244c <control+0x2e4>)
 800224a:	f000 feb0 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002254:	487e      	ldr	r0, [pc, #504]	@ (8002450 <control+0x2e8>)
 8002256:	f000 feaa 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002260:	487b      	ldr	r0, [pc, #492]	@ (8002450 <control+0x2e8>)
 8002262:	f000 fea4 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800226c:	4878      	ldr	r0, [pc, #480]	@ (8002450 <control+0x2e8>)
 800226e:	f000 fe9e 	bl	8002fae <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8002272:	2201      	movs	r2, #1
 8002274:	2180      	movs	r1, #128	@ 0x80
 8002276:	4875      	ldr	r0, [pc, #468]	@ (800244c <control+0x2e4>)
 8002278:	f000 fe99 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002282:	4873      	ldr	r0, [pc, #460]	@ (8002450 <control+0x2e8>)
 8002284:	f000 fe93 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800228e:	4870      	ldr	r0, [pc, #448]	@ (8002450 <control+0x2e8>)
 8002290:	f000 fe8d 	bl	8002fae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800229a:	486d      	ldr	r0, [pc, #436]	@ (8002450 <control+0x2e8>)
 800229c:	f000 fe87 	bl	8002fae <HAL_GPIO_WritePin>
			else{
				HAL_GPIO_WritePin(SLN_GPIO_Port, SLN_Pin, RESET);
			}

	}
}
 80022a0:	e14e      	b.n	8002540 <control+0x3d8>
			run =1;
 80022a2:	4b69      	ldr	r3, [pc, #420]	@ (8002448 <control+0x2e0>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, SET);
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ae:	4867      	ldr	r0, [pc, #412]	@ (800244c <control+0x2e4>)
 80022b0:	f000 fe7d 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ba:	4865      	ldr	r0, [pc, #404]	@ (8002450 <control+0x2e8>)
 80022bc:	f000 fe77 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022c6:	4862      	ldr	r0, [pc, #392]	@ (8002450 <control+0x2e8>)
 80022c8:	f000 fe71 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022d2:	485f      	ldr	r0, [pc, #380]	@ (8002450 <control+0x2e8>)
 80022d4:	f000 fe6b 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	2180      	movs	r1, #128	@ 0x80
 80022dc:	485b      	ldr	r0, [pc, #364]	@ (800244c <control+0x2e4>)
 80022de:	f000 fe66 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022e8:	4859      	ldr	r0, [pc, #356]	@ (8002450 <control+0x2e8>)
 80022ea:	f000 fe60 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022f4:	4856      	ldr	r0, [pc, #344]	@ (8002450 <control+0x2e8>)
 80022f6:	f000 fe5a 	bl	8002fae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 80022fa:	2201      	movs	r2, #1
 80022fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002300:	4853      	ldr	r0, [pc, #332]	@ (8002450 <control+0x2e8>)
 8002302:	f000 fe54 	bl	8002fae <HAL_GPIO_WritePin>
			if(save ==1)
 8002306:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <control+0x2cc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d125      	bne.n	800235a <control+0x1f2>
			  if(read2_out != read2_check)
 800230e:	4b4b      	ldr	r3, [pc, #300]	@ (800243c <control+0x2d4>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <control+0x2ec>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	f000 80aa 	beq.w	8002470 <control+0x308>
				  read2_out = read2_check;
 800231c:	4b4d      	ldr	r3, [pc, #308]	@ (8002454 <control+0x2ec>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a46      	ldr	r2, [pc, #280]	@ (800243c <control+0x2d4>)
 8002322:	6013      	str	r3, [r2, #0]
				  if(DIR == 1)
 8002324:	4b4c      	ldr	r3, [pc, #304]	@ (8002458 <control+0x2f0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d108      	bne.n	800233e <control+0x1d6>
					  direction(1,read2_check,read2_check);
 800232c:	4b49      	ldr	r3, [pc, #292]	@ (8002454 <control+0x2ec>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a48      	ldr	r2, [pc, #288]	@ (8002454 <control+0x2ec>)
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff fbf2 	bl	8001b20 <direction>
 800233c:	e098      	b.n	8002470 <control+0x308>
				  else if (DIR == 0){
 800233e:	4b46      	ldr	r3, [pc, #280]	@ (8002458 <control+0x2f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f040 8094 	bne.w	8002470 <control+0x308>
					  direction(2,read2_check,read2_check);
 8002348:	4b42      	ldr	r3, [pc, #264]	@ (8002454 <control+0x2ec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a41      	ldr	r2, [pc, #260]	@ (8002454 <control+0x2ec>)
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	2002      	movs	r0, #2
 8002354:	f7ff fbe4 	bl	8001b20 <direction>
 8002358:	e08a      	b.n	8002470 <control+0x308>
			  read2_check = read2_out ;
 800235a:	4b38      	ldr	r3, [pc, #224]	@ (800243c <control+0x2d4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a3d      	ldr	r2, [pc, #244]	@ (8002454 <control+0x2ec>)
 8002360:	6013      	str	r3, [r2, #0]
			  switch (val)
 8002362:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <control+0x2f4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3b01      	subs	r3, #1
 8002368:	2b07      	cmp	r3, #7
 800236a:	f200 8081 	bhi.w	8002470 <control+0x308>
 800236e:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <control+0x20c>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	08002395 	.word	0x08002395
 8002378:	080023a7 	.word	0x080023a7
 800237c:	080023b9 	.word	0x080023b9
 8002380:	080023d1 	.word	0x080023d1
 8002384:	080023e9 	.word	0x080023e9
 8002388:	080023f9 	.word	0x080023f9
 800238c:	08002409 	.word	0x08002409
 8002390:	08002461 	.word	0x08002461
						direction(4,read1_out,read1_out);
 8002394:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <control+0x2d0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <control+0x2d0>)
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	2004      	movs	r0, #4
 80023a0:	f7ff fbbe 	bl	8001b20 <direction>
						break;
 80023a4:	e064      	b.n	8002470 <control+0x308>
						direction(3,read1_out,read1_out);
 80023a6:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <control+0x2d0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a23      	ldr	r2, [pc, #140]	@ (8002438 <control+0x2d0>)
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	2003      	movs	r0, #3
 80023b2:	f7ff fbb5 	bl	8001b20 <direction>
						break;
 80023b6:	e05b      	b.n	8002470 <control+0x308>
						direction(2,read2_out,read2_out);
 80023b8:	4b20      	ldr	r3, [pc, #128]	@ (800243c <control+0x2d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1f      	ldr	r2, [pc, #124]	@ (800243c <control+0x2d4>)
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	2002      	movs	r0, #2
 80023c4:	f7ff fbac 	bl	8001b20 <direction>
						DIR =0;
 80023c8:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <control+0x2f0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
						break;
 80023ce:	e04f      	b.n	8002470 <control+0x308>
						direction(1,read2_out,read2_out);
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <control+0x2d4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a19      	ldr	r2, [pc, #100]	@ (800243c <control+0x2d4>)
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff fba0 	bl	8001b20 <direction>
						DIR=1;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <control+0x2f0>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
						break;
 80023e6:	e043      	b.n	8002470 <control+0x308>
						direction(1,10000,23000);
 80023e8:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 80023ec:	f242 7110 	movw	r1, #10000	@ 0x2710
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff fb95 	bl	8001b20 <direction>
						break;
 80023f6:	e03b      	b.n	8002470 <control+0x308>
						direction(1,23000,10000);
 80023f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80023fc:	f645 11d8 	movw	r1, #23000	@ 0x59d8
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff fb8d 	bl	8001b20 <direction>
						break;
 8002406:	e033      	b.n	8002470 <control+0x308>
						direction(2,20000,0);
 8002408:	2200      	movs	r2, #0
 800240a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 800240e:	2002      	movs	r0, #2
 8002410:	f7ff fb86 	bl	8001b20 <direction>
						break;
 8002414:	e02c      	b.n	8002470 <control+0x308>
 8002416:	bf00      	nop
 8002418:	40010c00 	.word	0x40010c00
 800241c:	200001a8 	.word	0x200001a8
 8002420:	40011800 	.word	0x40011800
 8002424:	200001ac 	.word	0x200001ac
 8002428:	200001b0 	.word	0x200001b0
 800242c:	200001b4 	.word	0x200001b4
 8002430:	200001d0 	.word	0x200001d0
 8002434:	200001b8 	.word	0x200001b8
 8002438:	20000198 	.word	0x20000198
 800243c:	2000019c 	.word	0x2000019c
 8002440:	200001a0 	.word	0x200001a0
 8002444:	2000028c 	.word	0x2000028c
 8002448:	200001c4 	.word	0x200001c4
 800244c:	40011000 	.word	0x40011000
 8002450:	40011400 	.word	0x40011400
 8002454:	200001a4 	.word	0x200001a4
 8002458:	200001c0 	.word	0x200001c0
 800245c:	200001bc 	.word	0x200001bc
						direction(2,800,10000);
 8002460:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002464:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002468:	2002      	movs	r0, #2
 800246a:	f7ff fb59 	bl	8001b20 <direction>
						break;
 800246e:	bf00      	nop
			TIM3 -> CCR3 = read5_out;
 8002470:	4a34      	ldr	r2, [pc, #208]	@ (8002544 <control+0x3dc>)
 8002472:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <control+0x3e0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	63d3      	str	r3, [r2, #60]	@ 0x3c
			if(read_10.out > 42100){
 8002478:	4b34      	ldr	r3, [pc, #208]	@ (800254c <control+0x3e4>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f24a 4274 	movw	r2, #42100	@ 0xa474
 8002480:	4293      	cmp	r3, r2
 8002482:	d906      	bls.n	8002492 <control+0x32a>
					HAL_GPIO_WritePin(F_R_2B_GPIO_Port, F_R_2B_Pin, SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800248a:	4831      	ldr	r0, [pc, #196]	@ (8002550 <control+0x3e8>)
 800248c:	f000 fd8f 	bl	8002fae <HAL_GPIO_WritePin>
 8002490:	e012      	b.n	80024b8 <control+0x350>
			else if(read_10.out < 42100){
 8002492:	4b2e      	ldr	r3, [pc, #184]	@ (800254c <control+0x3e4>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f24a 4273 	movw	r2, #42099	@ 0xa473
 800249a:	4293      	cmp	r3, r2
 800249c:	d806      	bhi.n	80024ac <control+0x344>
					HAL_GPIO_WritePin(F_R_2B_GPIO_Port, F_R_2B_Pin, RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024a4:	482a      	ldr	r0, [pc, #168]	@ (8002550 <control+0x3e8>)
 80024a6:	f000 fd82 	bl	8002fae <HAL_GPIO_WritePin>
 80024aa:	e005      	b.n	80024b8 <control+0x350>
					HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024b2:	4827      	ldr	r0, [pc, #156]	@ (8002550 <control+0x3e8>)
 80024b4:	f000 fd7b 	bl	8002fae <HAL_GPIO_WritePin>
			if(read_11.out > 42100){
 80024b8:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <control+0x3ec>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f24a 4274 	movw	r2, #42100	@ 0xa474
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d906      	bls.n	80024d2 <control+0x36a>
					HAL_GPIO_WritePin(F_R_2A_GPIO_Port, F_R_2A_Pin, SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024ca:	4821      	ldr	r0, [pc, #132]	@ (8002550 <control+0x3e8>)
 80024cc:	f000 fd6f 	bl	8002fae <HAL_GPIO_WritePin>
 80024d0:	e012      	b.n	80024f8 <control+0x390>
			else if(read_11.out < 42100){
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <control+0x3ec>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f24a 4273 	movw	r2, #42099	@ 0xa473
 80024da:	4293      	cmp	r3, r2
 80024dc:	d806      	bhi.n	80024ec <control+0x384>
					HAL_GPIO_WritePin(F_R_2A_GPIO_Port, F_R_2A_Pin, RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024e4:	481a      	ldr	r0, [pc, #104]	@ (8002550 <control+0x3e8>)
 80024e6:	f000 fd62 	bl	8002fae <HAL_GPIO_WritePin>
 80024ea:	e005      	b.n	80024f8 <control+0x390>
				HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, RESET);
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024f2:	4817      	ldr	r0, [pc, #92]	@ (8002550 <control+0x3e8>)
 80024f4:	f000 fd5b 	bl	8002fae <HAL_GPIO_WritePin>
			if(read_8.out<8000){
 80024f8:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <control+0x3f0>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002500:	d206      	bcs.n	8002510 <control+0x3a8>
				HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, SET);
 8002502:	2201      	movs	r2, #1
 8002504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002508:	4814      	ldr	r0, [pc, #80]	@ (800255c <control+0x3f4>)
 800250a:	f000 fd50 	bl	8002fae <HAL_GPIO_WritePin>
 800250e:	e005      	b.n	800251c <control+0x3b4>
				HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, RESET);
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002516:	4811      	ldr	r0, [pc, #68]	@ (800255c <control+0x3f4>)
 8002518:	f000 fd49 	bl	8002fae <HAL_GPIO_WritePin>
			if(read_9.out>8000){
 800251c:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <control+0x3f8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002524:	d906      	bls.n	8002534 <control+0x3cc>
				HAL_GPIO_WritePin(SLN_GPIO_Port, SLN_Pin, SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800252c:	480b      	ldr	r0, [pc, #44]	@ (800255c <control+0x3f4>)
 800252e:	f000 fd3e 	bl	8002fae <HAL_GPIO_WritePin>
}
 8002532:	e005      	b.n	8002540 <control+0x3d8>
				HAL_GPIO_WritePin(SLN_GPIO_Port, SLN_Pin, RESET);
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800253a:	4808      	ldr	r0, [pc, #32]	@ (800255c <control+0x3f4>)
 800253c:	f000 fd37 	bl	8002fae <HAL_GPIO_WritePin>
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40000400 	.word	0x40000400
 8002548:	200001a0 	.word	0x200001a0
 800254c:	200002bc 	.word	0x200002bc
 8002550:	40011400 	.word	0x40011400
 8002554:	200002cc 	.word	0x200002cc
 8002558:	2000029c 	.word	0x2000029c
 800255c:	40010c00 	.word	0x40010c00
 8002560:	200002ac 	.word	0x200002ac

08002564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800256a:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_MspInit+0x5c>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	4a14      	ldr	r2, [pc, #80]	@ (80025c0 <HAL_MspInit+0x5c>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6193      	str	r3, [r2, #24]
 8002576:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_MspInit+0x5c>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <HAL_MspInit+0x5c>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a0e      	ldr	r2, [pc, #56]	@ (80025c0 <HAL_MspInit+0x5c>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <HAL_MspInit+0x5c>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_MspInit+0x60>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_MspInit+0x60>)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010000 	.word	0x40010000

080025c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <HAL_TIM_Base_MspInit+0xa0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10c      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025da:	4b24      	ldr	r3, [pc, #144]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4a23      	ldr	r2, [pc, #140]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 80025e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80025e4:	6193      	str	r3, [r2, #24]
 80025e6:	4b21      	ldr	r3, [pc, #132]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80025f2:	e034      	b.n	800265e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025fc:	d10c      	bne.n	8002618 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fe:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a1a      	ldr	r2, [pc, #104]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
}
 8002616:	e022      	b.n	800265e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <HAL_TIM_Base_MspInit+0xa8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10c      	bne.n	800263c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002622:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a11      	ldr	r2, [pc, #68]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
}
 800263a:	e010      	b.n	800265e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0c      	ldr	r2, [pc, #48]	@ (8002674 <HAL_TIM_Base_MspInit+0xac>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10b      	bne.n	800265e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a08      	ldr	r2, [pc, #32]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 800264c:	f043 0310 	orr.w	r3, r3, #16
 8002650:	61d3      	str	r3, [r2, #28]
 8002652:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_TIM_Base_MspInit+0xa4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
}
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40000400 	.word	0x40000400
 8002674:	40001000 	.word	0x40001000

08002678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	@ 0x28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 0318 	add.w	r3, r7, #24
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002696:	d118      	bne.n	80026ca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	4b28      	ldr	r3, [pc, #160]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a27      	ldr	r2, [pc, #156]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6193      	str	r3, [r2, #24]
 80026a4:	4b25      	ldr	r3, [pc, #148]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026b0:	230e      	movs	r3, #14
 80026b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2302      	movs	r3, #2
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026bc:	f107 0318 	add.w	r3, r7, #24
 80026c0:	4619      	mov	r1, r3
 80026c2:	481f      	ldr	r0, [pc, #124]	@ (8002740 <HAL_TIM_MspPostInit+0xc8>)
 80026c4:	f000 fac8 	bl	8002c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026c8:	e034      	b.n	8002734 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <HAL_TIM_MspPostInit+0xcc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d12f      	bne.n	8002734 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a18      	ldr	r2, [pc, #96]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a12      	ldr	r2, [pc, #72]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b10      	ldr	r3, [pc, #64]	@ (800273c <HAL_TIM_MspPostInit+0xc4>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002704:	23c0      	movs	r3, #192	@ 0xc0
 8002706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270c:	2302      	movs	r3, #2
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 0318 	add.w	r3, r7, #24
 8002714:	4619      	mov	r1, r3
 8002716:	480a      	ldr	r0, [pc, #40]	@ (8002740 <HAL_TIM_MspPostInit+0xc8>)
 8002718:	f000 fa9e 	bl	8002c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800271c:	2301      	movs	r3, #1
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002724:	2302      	movs	r3, #2
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 0318 	add.w	r3, r7, #24
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	@ (8002748 <HAL_TIM_MspPostInit+0xd0>)
 8002730:	f000 fa92 	bl	8002c58 <HAL_GPIO_Init>
}
 8002734:	bf00      	nop
 8002736:	3728      	adds	r7, #40	@ 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	40010800 	.word	0x40010800
 8002744:	40000400 	.word	0x40000400
 8002748:	40010c00 	.word	0x40010c00

0800274c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <HAL_UART_MspInit+0x8c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d131      	bne.n	80027d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_UART_MspInit+0x90>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_UART_MspInit+0x90>)
 8002772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b18      	ldr	r3, [pc, #96]	@ (80027dc <HAL_UART_MspInit+0x90>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <HAL_UART_MspInit+0x90>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_UART_MspInit+0x90>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_UART_MspInit+0x90>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800279c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a6:	2303      	movs	r3, #3
 80027a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4619      	mov	r1, r3
 80027b0:	480b      	ldr	r0, [pc, #44]	@ (80027e0 <HAL_UART_MspInit+0x94>)
 80027b2:	f000 fa51 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4619      	mov	r1, r3
 80027ca:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <HAL_UART_MspInit+0x94>)
 80027cc:	f000 fa44 	bl	8002c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027d0:	bf00      	nop
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40013800 	.word	0x40013800
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010800 	.word	0x40010800

080027e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <NMI_Handler+0x4>

080027ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <MemManage_Handler+0x4>

080027fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <BusFault_Handler+0x4>

08002804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002808:	bf00      	nop
 800280a:	e7fd      	b.n	8002808 <UsageFault_Handler+0x4>

0800280c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f000 f8c2 	bl	80029bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8002840:	2001      	movs	r0, #1
 8002842:	f000 fbcd 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}

0800284a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SS1_Pin);
 800284e:	2004      	movs	r0, #4
 8002850:	f000 fbc6 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH5_Pin);
 800285c:	2008      	movs	r0, #8
 800285e:	f000 fbbf 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}

08002866 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH6_Pin);
 800286a:	2010      	movs	r0, #16
 800286c:	f000 fbb8 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH7_Pin);
 8002878:	2020      	movs	r0, #32
 800287a:	f000 fbb1 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH8_Pin);
 800287e:	2040      	movs	r0, #64	@ 0x40
 8002880:	f000 fbae 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH9_Pin);
 8002884:	2080      	movs	r0, #128	@ 0x80
 8002886:	f000 fbab 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH10_Pin);
 800288a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800288e:	f000 fba7 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH11_Pin);
 8002892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002896:	f000 fba3 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}

0800289e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 80028a2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80028a6:	f000 fb9b 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 80028aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80028ae:	f000 fb97 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 80028b2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80028b6:	f000 fb93 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS2_Pin);
 80028ba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028be:	f000 fb8f 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS3_Pin);
 80028c2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80028c6:	f000 fb8b 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS4_Pin);
 80028ca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028ce:	f000 fb87 	bl	8002fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
	...

080028e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028e4:	f7ff fff7 	bl	80028d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e8:	480b      	ldr	r0, [pc, #44]	@ (8002918 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028ea:	490c      	ldr	r1, [pc, #48]	@ (800291c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002920 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f0:	e002      	b.n	80028f8 <LoopCopyDataInit>

080028f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f6:	3304      	adds	r3, #4

080028f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028fc:	d3f9      	bcc.n	80028f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fe:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002900:	4c09      	ldr	r4, [pc, #36]	@ (8002928 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002904:	e001      	b.n	800290a <LoopFillZerobss>

08002906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002908:	3204      	adds	r2, #4

0800290a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800290c:	d3fb      	bcc.n	8002906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290e:	f001 ff11 	bl	8004734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002912:	f7fd fd03 	bl	800031c <main>
  bx lr
 8002916:	4770      	bx	lr
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002920:	080047c8 	.word	0x080047c8
  ldr r2, =_sbss
 8002924:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002928:	20000320 	.word	0x20000320

0800292c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800292c:	e7fe      	b.n	800292c <ADC1_2_IRQHandler>
	...

08002930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002934:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <HAL_Init+0x28>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <HAL_Init+0x28>)
 800293a:	f043 0310 	orr.w	r3, r3, #16
 800293e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002940:	2003      	movs	r0, #3
 8002942:	f000 f947 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002946:	200f      	movs	r0, #15
 8002948:	f000 f808 	bl	800295c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800294c:	f7ff fe0a 	bl	8002564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000

0800295c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <HAL_InitTick+0x54>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_InitTick+0x58>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002972:	fbb3 f3f1 	udiv	r3, r3, r1
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f95f 	bl	8002c3e <HAL_SYSTICK_Config>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e00e      	b.n	80029a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b0f      	cmp	r3, #15
 800298e:	d80a      	bhi.n	80029a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002990:	2200      	movs	r2, #0
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f000 f927 	bl	8002bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800299c:	4a06      	ldr	r2, [pc, #24]	@ (80029b8 <HAL_InitTick+0x5c>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e000      	b.n	80029a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000004 	.word	0x20000004
 80029b4:	2000000c 	.word	0x2000000c
 80029b8:	20000008 	.word	0x20000008

080029bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_IncTick+0x1c>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <HAL_IncTick+0x20>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4413      	add	r3, r2
 80029cc:	4a03      	ldr	r2, [pc, #12]	@ (80029dc <HAL_IncTick+0x20>)
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	2000000c 	.word	0x2000000c
 80029dc:	2000031c 	.word	0x2000031c

080029e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b02      	ldr	r3, [pc, #8]	@ (80029f0 <HAL_GetTick+0x10>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	2000031c 	.word	0x2000031c

080029f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d005      	beq.n	8002a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <HAL_Delay+0x44>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1a:	bf00      	nop
 8002a1c:	f7ff ffe0 	bl	80029e0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d8f7      	bhi.n	8002a1c <HAL_Delay+0x28>
  {
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	2000000c 	.word	0x2000000c

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4906      	ldr	r1, [pc, #24]	@ (8002ad4 <__NVIC_EnableIRQ+0x34>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	@ (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	@ 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	@ 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f7ff ff90 	bl	8002ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff2d 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff42 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff90 	bl	8002b2c <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5f 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff35 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa2 	bl	8002b90 <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	@ 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6a:	e179      	b.n	8002f60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8168 	bne.w	8002f5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a96      	ldr	r2, [pc, #600]	@ (8002ee8 <HAL_GPIO_Init+0x290>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d05e      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002c94:	4a94      	ldr	r2, [pc, #592]	@ (8002ee8 <HAL_GPIO_Init+0x290>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d875      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002c9a:	4a94      	ldr	r2, [pc, #592]	@ (8002eec <HAL_GPIO_Init+0x294>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d058      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a92      	ldr	r2, [pc, #584]	@ (8002eec <HAL_GPIO_Init+0x294>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d86f      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a92      	ldr	r2, [pc, #584]	@ (8002ef0 <HAL_GPIO_Init+0x298>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d052      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cac:	4a90      	ldr	r2, [pc, #576]	@ (8002ef0 <HAL_GPIO_Init+0x298>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d869      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a90      	ldr	r2, [pc, #576]	@ (8002ef4 <HAL_GPIO_Init+0x29c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04c      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a8e      	ldr	r2, [pc, #568]	@ (8002ef4 <HAL_GPIO_Init+0x29c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d863      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a8e      	ldr	r2, [pc, #568]	@ (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d046      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a8c      	ldr	r2, [pc, #560]	@ (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d85d      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d82a      	bhi.n	8002d24 <HAL_GPIO_Init+0xcc>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d859      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <HAL_GPIO_Init+0x80>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d53 	.word	0x08002d53
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d3f 	.word	0x08002d3f
 8002ce4:	08002d81 	.word	0x08002d81
 8002ce8:	08002d87 	.word	0x08002d87
 8002cec:	08002d87 	.word	0x08002d87
 8002cf0:	08002d87 	.word	0x08002d87
 8002cf4:	08002d87 	.word	0x08002d87
 8002cf8:	08002d87 	.word	0x08002d87
 8002cfc:	08002d87 	.word	0x08002d87
 8002d00:	08002d87 	.word	0x08002d87
 8002d04:	08002d87 	.word	0x08002d87
 8002d08:	08002d87 	.word	0x08002d87
 8002d0c:	08002d87 	.word	0x08002d87
 8002d10:	08002d87 	.word	0x08002d87
 8002d14:	08002d87 	.word	0x08002d87
 8002d18:	08002d87 	.word	0x08002d87
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	4a75      	ldr	r2, [pc, #468]	@ (8002efc <HAL_GPIO_Init+0x2a4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d2a:	e02c      	b.n	8002d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
          break;
 8002d32:	e029      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	e024      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3308      	adds	r3, #8
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e01f      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e01a      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e013      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	611a      	str	r2, [r3, #16]
          break;
 8002d72:	e009      	b.n	8002d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	615a      	str	r2, [r3, #20]
          break;
 8002d7e:	e003      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          break;
 8002d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	@ 0xff
 8002d8c:	d801      	bhi.n	8002d92 <HAL_GPIO_Init+0x13a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_Init+0x13e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	@ 0xff
 8002d9c:	d802      	bhi.n	8002da4 <HAL_GPIO_Init+0x14c>
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x152>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	3b08      	subs	r3, #8
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	210f      	movs	r1, #15
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80c1 	beq.w	8002f5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd8:	4b49      	ldr	r3, [pc, #292]	@ (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a48      	ldr	r2, [pc, #288]	@ (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b46      	ldr	r3, [pc, #280]	@ (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df0:	4a44      	ldr	r2, [pc, #272]	@ (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3c      	ldr	r2, [pc, #240]	@ (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01f      	beq.n	8002e5c <HAL_GPIO_Init+0x204>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f0c <HAL_GPIO_Init+0x2b4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d019      	beq.n	8002e58 <HAL_GPIO_Init+0x200>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_GPIO_Init+0x1fc>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a39      	ldr	r2, [pc, #228]	@ (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_GPIO_Init+0x1f8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a38      	ldr	r2, [pc, #224]	@ (8002f18 <HAL_GPIO_Init+0x2c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0x1f4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a37      	ldr	r2, [pc, #220]	@ (8002f1c <HAL_GPIO_Init+0x2c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_GPIO_Init+0x1f0>
 8002e44:	2305      	movs	r3, #5
 8002e46:	e00a      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e48:	2306      	movs	r3, #6
 8002e4a:	e008      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	e006      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e50:	2303      	movs	r3, #3
 8002e52:	e004      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e002      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e60:	f002 0203 	and.w	r2, r2, #3
 8002e64:	0092      	lsls	r2, r2, #2
 8002e66:	4093      	lsls	r3, r2
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e6e:	4925      	ldr	r1, [pc, #148]	@ (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e88:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4924      	ldr	r1, [pc, #144]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e96:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4920      	ldr	r1, [pc, #128]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	491a      	ldr	r1, [pc, #104]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60cb      	str	r3, [r1, #12]
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ebe:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d025      	beq.n	8002f24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4910      	ldr	r1, [pc, #64]	@ (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
 8002ee4:	e025      	b.n	8002f32 <HAL_GPIO_Init+0x2da>
 8002ee6:	bf00      	nop
 8002ee8:	10320000 	.word	0x10320000
 8002eec:	10310000 	.word	0x10310000
 8002ef0:	10220000 	.word	0x10220000
 8002ef4:	10210000 	.word	0x10210000
 8002ef8:	10120000 	.word	0x10120000
 8002efc:	10110000 	.word	0x10110000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	40011800 	.word	0x40011800
 8002f1c:	40011c00 	.word	0x40011c00
 8002f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f24:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4913      	ldr	r1, [pc, #76]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	490e      	ldr	r1, [pc, #56]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
 8002f4a:	e006      	b.n	8002f5a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	4909      	ldr	r1, [pc, #36]	@ (8002f7c <HAL_GPIO_Init+0x324>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f ae7e 	bne.w	8002c6c <HAL_GPIO_Init+0x14>
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	372c      	adds	r7, #44	@ 0x2c
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e001      	b.n	8002fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbe:	787b      	ldrb	r3, [r7, #1]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fca:	e003      	b.n	8002fd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	041a      	lsls	r2, r3, #16
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	611a      	str	r2, [r3, #16]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fea:	4b08      	ldr	r3, [pc, #32]	@ (800300c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ff6:	4a05      	ldr	r2, [pc, #20]	@ (800300c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd f910 	bl	8000224 <HAL_GPIO_EXTI_Callback>
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40010400 	.word	0x40010400

08003010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e272      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8087 	beq.w	800313e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003030:	4b92      	ldr	r3, [pc, #584]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b04      	cmp	r3, #4
 800303a:	d00c      	beq.n	8003056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800303c:	4b8f      	ldr	r3, [pc, #572]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d112      	bne.n	800306e <HAL_RCC_OscConfig+0x5e>
 8003048:	4b8c      	ldr	r3, [pc, #560]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003054:	d10b      	bne.n	800306e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003056:	4b89      	ldr	r3, [pc, #548]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d06c      	beq.n	800313c <HAL_RCC_OscConfig+0x12c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d168      	bne.n	800313c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e24c      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x76>
 8003078:	4b80      	ldr	r3, [pc, #512]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a7f      	ldr	r2, [pc, #508]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 800307e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e02e      	b.n	80030e4 <HAL_RCC_OscConfig+0xd4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x98>
 800308e:	4b7b      	ldr	r3, [pc, #492]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a7a      	ldr	r2, [pc, #488]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b78      	ldr	r3, [pc, #480]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a77      	ldr	r2, [pc, #476]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e01d      	b.n	80030e4 <HAL_RCC_OscConfig+0xd4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0xbc>
 80030b2:	4b72      	ldr	r3, [pc, #456]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a71      	ldr	r2, [pc, #452]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b6f      	ldr	r3, [pc, #444]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6e      	ldr	r2, [pc, #440]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0xd4>
 80030cc:	4b6b      	ldr	r3, [pc, #428]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6a      	ldr	r2, [pc, #424]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b68      	ldr	r3, [pc, #416]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a67      	ldr	r2, [pc, #412]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7ff fc78 	bl	80029e0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7ff fc74 	bl	80029e0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e200      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4b5d      	ldr	r3, [pc, #372]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0xe4>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7ff fc64 	bl	80029e0 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7ff fc60 	bl	80029e0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	@ 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1ec      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	4b53      	ldr	r3, [pc, #332]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x10c>
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d063      	beq.n	8003212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800314a:	4b4c      	ldr	r3, [pc, #304]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003156:	4b49      	ldr	r3, [pc, #292]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	d11c      	bne.n	800319c <HAL_RCC_OscConfig+0x18c>
 8003162:	4b46      	ldr	r3, [pc, #280]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d116      	bne.n	800319c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	4b43      	ldr	r3, [pc, #268]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_RCC_OscConfig+0x176>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1c0      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003186:	4b3d      	ldr	r3, [pc, #244]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4939      	ldr	r1, [pc, #228]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319a:	e03a      	b.n	8003212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a4:	4b36      	ldr	r3, [pc, #216]	@ (8003280 <HAL_RCC_OscConfig+0x270>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031aa:	f7ff fc19 	bl	80029e0 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b2:	f7ff fc15 	bl	80029e0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e1a1      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	4b2d      	ldr	r3, [pc, #180]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d0:	4b2a      	ldr	r3, [pc, #168]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4927      	ldr	r1, [pc, #156]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	600b      	str	r3, [r1, #0]
 80031e4:	e015      	b.n	8003212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e6:	4b26      	ldr	r3, [pc, #152]	@ (8003280 <HAL_RCC_OscConfig+0x270>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7ff fbf8 	bl	80029e0 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f4:	f7ff fbf4 	bl	80029e0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e180      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d03a      	beq.n	8003294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d019      	beq.n	800325a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003226:	4b17      	ldr	r3, [pc, #92]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 8003228:	2201      	movs	r2, #1
 800322a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322c:	f7ff fbd8 	bl	80029e0 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7ff fbd4 	bl	80029e0 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e160      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <HAL_RCC_OscConfig+0x26c>)
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003252:	2001      	movs	r0, #1
 8003254:	f000 face 	bl	80037f4 <RCC_Delay>
 8003258:	e01c      	b.n	8003294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325a:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <HAL_RCC_OscConfig+0x274>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003260:	f7ff fbbe 	bl	80029e0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003266:	e00f      	b.n	8003288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7ff fbba 	bl	80029e0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d908      	bls.n	8003288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e146      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
 8003280:	42420000 	.word	0x42420000
 8003284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	4b92      	ldr	r3, [pc, #584]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e9      	bne.n	8003268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a6 	beq.w	80033ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b8b      	ldr	r3, [pc, #556]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10d      	bne.n	80032ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	4b88      	ldr	r3, [pc, #544]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	4a87      	ldr	r2, [pc, #540]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032bc:	61d3      	str	r3, [r2, #28]
 80032be:	4b85      	ldr	r3, [pc, #532]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ca:	2301      	movs	r3, #1
 80032cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b82      	ldr	r3, [pc, #520]	@ (80034d8 <HAL_RCC_OscConfig+0x4c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d118      	bne.n	800330c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032da:	4b7f      	ldr	r3, [pc, #508]	@ (80034d8 <HAL_RCC_OscConfig+0x4c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7e      	ldr	r2, [pc, #504]	@ (80034d8 <HAL_RCC_OscConfig+0x4c8>)
 80032e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e6:	f7ff fb7b 	bl	80029e0 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ee:	f7ff fb77 	bl	80029e0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b64      	cmp	r3, #100	@ 0x64
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e103      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	4b75      	ldr	r3, [pc, #468]	@ (80034d8 <HAL_RCC_OscConfig+0x4c8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x312>
 8003314:	4b6f      	ldr	r3, [pc, #444]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a6e      	ldr	r2, [pc, #440]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	e02d      	b.n	800337e <HAL_RCC_OscConfig+0x36e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x334>
 800332a:	4b6a      	ldr	r3, [pc, #424]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4a69      	ldr	r2, [pc, #420]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	f023 0301 	bic.w	r3, r3, #1
 8003334:	6213      	str	r3, [r2, #32]
 8003336:	4b67      	ldr	r3, [pc, #412]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4a66      	ldr	r2, [pc, #408]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	6213      	str	r3, [r2, #32]
 8003342:	e01c      	b.n	800337e <HAL_RCC_OscConfig+0x36e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b05      	cmp	r3, #5
 800334a:	d10c      	bne.n	8003366 <HAL_RCC_OscConfig+0x356>
 800334c:	4b61      	ldr	r3, [pc, #388]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4a60      	ldr	r2, [pc, #384]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	4b5e      	ldr	r3, [pc, #376]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4a5d      	ldr	r2, [pc, #372]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6213      	str	r3, [r2, #32]
 8003364:	e00b      	b.n	800337e <HAL_RCC_OscConfig+0x36e>
 8003366:	4b5b      	ldr	r3, [pc, #364]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a5a      	ldr	r2, [pc, #360]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6213      	str	r3, [r2, #32]
 8003372:	4b58      	ldr	r3, [pc, #352]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a57      	ldr	r2, [pc, #348]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	f023 0304 	bic.w	r3, r3, #4
 800337c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d015      	beq.n	80033b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7ff fb2b 	bl	80029e0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7ff fb27 	bl	80029e0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e0b1      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a4:	4b4b      	ldr	r3, [pc, #300]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0ee      	beq.n	800338e <HAL_RCC_OscConfig+0x37e>
 80033b0:	e014      	b.n	80033dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7ff fb15 	bl	80029e0 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b8:	e00a      	b.n	80033d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7ff fb11 	bl	80029e0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e09b      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d0:	4b40      	ldr	r3, [pc, #256]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1ee      	bne.n	80033ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d105      	bne.n	80033ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e2:	4b3c      	ldr	r3, [pc, #240]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4a3b      	ldr	r2, [pc, #236]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8087 	beq.w	8003506 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f8:	4b36      	ldr	r3, [pc, #216]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d061      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d146      	bne.n	800349a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340c:	4b33      	ldr	r3, [pc, #204]	@ (80034dc <HAL_RCC_OscConfig+0x4cc>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7ff fae5 	bl	80029e0 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341a:	f7ff fae1 	bl	80029e0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e06d      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003440:	d108      	bne.n	8003454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	4921      	ldr	r1, [pc, #132]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003454:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a19      	ldr	r1, [r3, #32]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	430b      	orrs	r3, r1
 8003466:	491b      	ldr	r1, [pc, #108]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346c:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_OscConfig+0x4cc>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7ff fab5 	bl	80029e0 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347a:	f7ff fab1 	bl	80029e0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e03d      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x46a>
 8003498:	e035      	b.n	8003506 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <HAL_RCC_OscConfig+0x4cc>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7ff fa9e 	bl	80029e0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7ff fa9a 	bl	80029e0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e026      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x498>
 80034c6:	e01e      	b.n	8003506 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e019      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40007000 	.word	0x40007000
 80034dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_RCC_OscConfig+0x500>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d0      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b6a      	ldr	r3, [pc, #424]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d910      	bls.n	8003558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b67      	ldr	r3, [pc, #412]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	4965      	ldr	r1, [pc, #404]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0b8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a58      	ldr	r2, [pc, #352]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800357a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003588:	4b53      	ldr	r3, [pc, #332]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a52      	ldr	r2, [pc, #328]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b50      	ldr	r3, [pc, #320]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	494d      	ldr	r1, [pc, #308]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d040      	beq.n	8003634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b47      	ldr	r3, [pc, #284]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d2:	4b41      	ldr	r3, [pc, #260]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e073      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	4b3d      	ldr	r3, [pc, #244]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06b      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b39      	ldr	r3, [pc, #228]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4936      	ldr	r1, [pc, #216]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003604:	f7ff f9ec 	bl	80029e0 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7ff f9e8 	bl	80029e0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e053      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b2d      	ldr	r3, [pc, #180]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d1eb      	bne.n	800360c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d210      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 0207 	bic.w	r2, r3, #7
 800364a:	4922      	ldr	r1, [pc, #136]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e032      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4916      	ldr	r1, [pc, #88]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368e:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a2:	f000 f821 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	490a      	ldr	r1, [pc, #40]	@ (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	5ccb      	ldrb	r3, [r1, r3]
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	@ (80036e0 <HAL_RCC_ClockConfig+0x1cc>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <HAL_RCC_ClockConfig+0x1d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f94a 	bl	800295c <HAL_InitTick>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08004794 	.word	0x08004794
 80036e0:	20000004 	.word	0x20000004
 80036e4:	20000008 	.word	0x20000008

080036e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003702:	4b1e      	ldr	r3, [pc, #120]	@ (800377c <HAL_RCC_GetSysClockFreq+0x94>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b04      	cmp	r3, #4
 8003710:	d002      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x30>
 8003712:	2b08      	cmp	r3, #8
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x36>
 8003716:	e027      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003718:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x98>)
 800371a:	613b      	str	r3, [r7, #16]
      break;
 800371c:	e027      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	0c9b      	lsrs	r3, r3, #18
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003728:	5cd3      	ldrb	r3, [r2, r3]
 800372a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003736:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_RCC_GetSysClockFreq+0x94>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0c5b      	lsrs	r3, r3, #17
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	4a11      	ldr	r2, [pc, #68]	@ (8003788 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a0d      	ldr	r2, [pc, #52]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x98>)
 800374a:	fb03 f202 	mul.w	r2, r3, r2
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e004      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0c      	ldr	r2, [pc, #48]	@ (800378c <HAL_RCC_GetSysClockFreq+0xa4>)
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	613b      	str	r3, [r7, #16]
      break;
 8003766:	e002      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <HAL_RCC_GetSysClockFreq+0x98>)
 800376a:	613b      	str	r3, [r7, #16]
      break;
 800376c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376e:	693b      	ldr	r3, [r7, #16]
}
 8003770:	4618      	mov	r0, r3
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	007a1200 	.word	0x007a1200
 8003784:	080047ac 	.word	0x080047ac
 8003788:	080047bc 	.word	0x080047bc
 800378c:	003d0900 	.word	0x003d0900

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b02      	ldr	r3, [pc, #8]	@ (80037a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	20000004 	.word	0x20000004

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037a8:	f7ff fff2 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	@ (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	080047a4 	.word	0x080047a4

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d0:	f7ff ffde 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0adb      	lsrs	r3, r3, #11
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	@ (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	080047a4 	.word	0x080047a4

080037f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003828 <RCC_Delay+0x34>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <RCC_Delay+0x38>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003810:	bf00      	nop
  }
  while (Delay --);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	60fa      	str	r2, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f9      	bne.n	8003810 <RCC_Delay+0x1c>
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000004 	.word	0x20000004
 800382c:	10624dd3 	.word	0x10624dd3

08003830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe feb6 	bl	80025c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 fb22 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d001      	beq.n	80038e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e03c      	b.n	8003962 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	@ (800396c <HAL_TIM_Base_Start+0x9c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d018      	beq.n	800392c <HAL_TIM_Base_Start+0x5c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003970 <HAL_TIM_Base_Start+0xa0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <HAL_TIM_Base_Start+0x5c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390c:	d00e      	beq.n	800392c <HAL_TIM_Base_Start+0x5c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a18      	ldr	r2, [pc, #96]	@ (8003974 <HAL_TIM_Base_Start+0xa4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d009      	beq.n	800392c <HAL_TIM_Base_Start+0x5c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a16      	ldr	r2, [pc, #88]	@ (8003978 <HAL_TIM_Base_Start+0xa8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <HAL_TIM_Base_Start+0x5c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a15      	ldr	r2, [pc, #84]	@ (800397c <HAL_TIM_Base_Start+0xac>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d111      	bne.n	8003950 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b06      	cmp	r3, #6
 800393c:	d010      	beq.n	8003960 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394e:	e007      	b.n	8003960 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40013400 	.word	0x40013400
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00

08003980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f839 	bl	8003a1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 fa7a 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_TIM_PWM_Start+0x24>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e022      	b.n	8003a9a <HAL_TIM_PWM_Start+0x6a>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d109      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x3e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	e015      	b.n	8003a9a <HAL_TIM_PWM_Start+0x6a>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d109      	bne.n	8003a88 <HAL_TIM_PWM_Start+0x58>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e008      	b.n	8003a9a <HAL_TIM_PWM_Start+0x6a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e072      	b.n	8003b88 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x82>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ab0:	e013      	b.n	8003ada <HAL_TIM_PWM_Start+0xaa>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0x92>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac0:	e00b      	b.n	8003ada <HAL_TIM_PWM_Start+0xaa>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0xa2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad0:	e003      	b.n	8003ada <HAL_TIM_PWM_Start+0xaa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fcb0 	bl	8004448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a28      	ldr	r2, [pc, #160]	@ (8003b90 <HAL_TIM_PWM_Start+0x160>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d004      	beq.n	8003afc <HAL_TIM_PWM_Start+0xcc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a27      	ldr	r2, [pc, #156]	@ (8003b94 <HAL_TIM_PWM_Start+0x164>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_PWM_Start+0xd0>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_TIM_PWM_Start+0xd2>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b90 <HAL_TIM_PWM_Start+0x160>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x122>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1b      	ldr	r2, [pc, #108]	@ (8003b94 <HAL_TIM_PWM_Start+0x164>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x122>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b32:	d00e      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x122>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a17      	ldr	r2, [pc, #92]	@ (8003b98 <HAL_TIM_PWM_Start+0x168>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x122>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a16      	ldr	r2, [pc, #88]	@ (8003b9c <HAL_TIM_PWM_Start+0x16c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x122>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ba0 <HAL_TIM_PWM_Start+0x170>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d010      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	e007      	b.n	8003b86 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40013400 	.word	0x40013400
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00

08003ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0ae      	b.n	8003d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	f200 809f 	bhi.w	8003d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c0d 	.word	0x08003c0d
 8003bdc:	08003d11 	.word	0x08003d11
 8003be0:	08003d11 	.word	0x08003d11
 8003be4:	08003d11 	.word	0x08003d11
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003d11 	.word	0x08003d11
 8003bf0:	08003d11 	.word	0x08003d11
 8003bf4:	08003d11 	.word	0x08003d11
 8003bf8:	08003c8f 	.word	0x08003c8f
 8003bfc:	08003d11 	.word	0x08003d11
 8003c00:	08003d11 	.word	0x08003d11
 8003c04:	08003d11 	.word	0x08003d11
 8003c08:	08003ccf 	.word	0x08003ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f9d6 	bl	8003fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0208 	orr.w	r2, r2, #8
 8003c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0204 	bic.w	r2, r2, #4
 8003c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6999      	ldr	r1, [r3, #24]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	619a      	str	r2, [r3, #24]
      break;
 8003c4a:	e064      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa26 	bl	80040a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6999      	ldr	r1, [r3, #24]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	021a      	lsls	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	619a      	str	r2, [r3, #24]
      break;
 8003c8c:	e043      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 fa79 	bl	800418c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0208 	orr.w	r2, r2, #8
 8003ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0204 	bic.w	r2, r2, #4
 8003cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	61da      	str	r2, [r3, #28]
      break;
 8003ccc:	e023      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 facd 	bl	8004274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69d9      	ldr	r1, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	021a      	lsls	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	61da      	str	r2, [r3, #28]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
      break;
 8003d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIM_ConfigClockSource+0x1c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0b4      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x186>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d7c:	d03e      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xd4>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d82:	f200 8087 	bhi.w	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8a:	f000 8086 	beq.w	8003e9a <HAL_TIM_ConfigClockSource+0x172>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d92:	d87f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b70      	cmp	r3, #112	@ 0x70
 8003d96:	d01a      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xa6>
 8003d98:	2b70      	cmp	r3, #112	@ 0x70
 8003d9a:	d87b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b60      	cmp	r3, #96	@ 0x60
 8003d9e:	d050      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x11a>
 8003da0:	2b60      	cmp	r3, #96	@ 0x60
 8003da2:	d877      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b50      	cmp	r3, #80	@ 0x50
 8003da6:	d03c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0xfa>
 8003da8:	2b50      	cmp	r3, #80	@ 0x50
 8003daa:	d873      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b40      	cmp	r3, #64	@ 0x40
 8003dae:	d058      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x13a>
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d86f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b30      	cmp	r3, #48	@ 0x30
 8003db6:	d064      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003db8:	2b30      	cmp	r3, #48	@ 0x30
 8003dba:	d86b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d060      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d867      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d05a      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	e062      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dde:	f000 fb14 	bl	800440a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	609a      	str	r2, [r3, #8]
      break;
 8003dfa:	e04f      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e0c:	f000 fafd 	bl	800440a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e1e:	609a      	str	r2, [r3, #8]
      break;
 8003e20:	e03c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 fa74 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2150      	movs	r1, #80	@ 0x50
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 facb 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e02c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 fa92 	bl	8004378 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2160      	movs	r1, #96	@ 0x60
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fabb 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e01c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 fa54 	bl	800431c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2140      	movs	r1, #64	@ 0x40
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 faab 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e00c      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 faa2 	bl	80043d6 <TIM_ITRx_SetConfig>
      break;
 8003e92:	e003      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	e000      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a39      	ldr	r2, [pc, #228]	@ (8003fb0 <TIM_Base_SetConfig+0xf8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a38      	ldr	r2, [pc, #224]	@ (8003fb4 <TIM_Base_SetConfig+0xfc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ede:	d00b      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a35      	ldr	r2, [pc, #212]	@ (8003fb8 <TIM_Base_SetConfig+0x100>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a34      	ldr	r2, [pc, #208]	@ (8003fbc <TIM_Base_SetConfig+0x104>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a33      	ldr	r2, [pc, #204]	@ (8003fc0 <TIM_Base_SetConfig+0x108>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	@ (8003fb0 <TIM_Base_SetConfig+0xf8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <TIM_Base_SetConfig+0x82>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a27      	ldr	r2, [pc, #156]	@ (8003fb4 <TIM_Base_SetConfig+0xfc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_Base_SetConfig+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0x82>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a24      	ldr	r2, [pc, #144]	@ (8003fb8 <TIM_Base_SetConfig+0x100>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0x82>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a23      	ldr	r2, [pc, #140]	@ (8003fbc <TIM_Base_SetConfig+0x104>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0x82>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <TIM_Base_SetConfig+0x108>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0f      	ldr	r2, [pc, #60]	@ (8003fb0 <TIM_Base_SetConfig+0xf8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0xc8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb4 <TIM_Base_SetConfig+0xfc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d103      	bne.n	8003f88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40013400 	.word	0x40013400
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00

08003fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f023 0201 	bic.w	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f023 0302 	bic.w	r3, r3, #2
 800400c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a20      	ldr	r2, [pc, #128]	@ (800409c <TIM_OC1_SetConfig+0xd8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <TIM_OC1_SetConfig+0x64>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a1f      	ldr	r2, [pc, #124]	@ (80040a0 <TIM_OC1_SetConfig+0xdc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d10c      	bne.n	8004042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0308 	bic.w	r3, r3, #8
 800402e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a15      	ldr	r2, [pc, #84]	@ (800409c <TIM_OC1_SetConfig+0xd8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC1_SetConfig+0x8e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a14      	ldr	r2, [pc, #80]	@ (80040a0 <TIM_OC1_SetConfig+0xdc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d111      	bne.n	8004076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400

080040a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f023 0210 	bic.w	r2, r3, #16
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0320 	bic.w	r3, r3, #32
 80040ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <TIM_OC2_SetConfig+0xe0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC2_SetConfig+0x68>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <TIM_OC2_SetConfig+0xe4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d10d      	bne.n	8004128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004126:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a16      	ldr	r2, [pc, #88]	@ (8004184 <TIM_OC2_SetConfig+0xe0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC2_SetConfig+0x94>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a15      	ldr	r2, [pc, #84]	@ (8004188 <TIM_OC2_SetConfig+0xe4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d113      	bne.n	8004160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800413e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40013400 	.word	0x40013400

0800418c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a21      	ldr	r2, [pc, #132]	@ (800426c <TIM_OC3_SetConfig+0xe0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC3_SetConfig+0x66>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a20      	ldr	r2, [pc, #128]	@ (8004270 <TIM_OC3_SetConfig+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10d      	bne.n	800420e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800420c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a16      	ldr	r2, [pc, #88]	@ (800426c <TIM_OC3_SetConfig+0xe0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_OC3_SetConfig+0x92>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <TIM_OC3_SetConfig+0xe4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d113      	bne.n	8004246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800422c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40013400 	.word	0x40013400

08004274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a11      	ldr	r2, [pc, #68]	@ (8004314 <TIM_OC4_SetConfig+0xa0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC4_SetConfig+0x68>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a10      	ldr	r2, [pc, #64]	@ (8004318 <TIM_OC4_SetConfig+0xa4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d109      	bne.n	80042f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	019b      	lsls	r3, r3, #6
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40013400 	.word	0x40013400

0800431c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 030a 	bic.w	r3, r3, #10
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	bc80      	pop	{r7}
 8004376:	4770      	bx	lr

08004378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0210 	bic.w	r2, r3, #16
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	031b      	lsls	r3, r3, #12
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f043 0307 	orr.w	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800440a:	b480      	push	{r7}
 800440c:	b087      	sub	sp, #28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004424:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	021a      	lsls	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	431a      	orrs	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4313      	orrs	r3, r2
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	609a      	str	r2, [r3, #8]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	2201      	movs	r2, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	43db      	mvns	r3, r3
 800446a:	401a      	ands	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e050      	b.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fe:	d00e      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a15      	ldr	r2, [pc, #84]	@ (800455c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a12      	ldr	r2, [pc, #72]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d10c      	bne.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4313      	orrs	r3, r2
 800452e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40013400 	.word	0x40013400
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00

08004568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e042      	b.n	8004600 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fe f8dc 	bl	800274c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	@ 0x24
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f82b 	bl	8004608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004642:	f023 030c 	bic.w	r3, r3, #12
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	430b      	orrs	r3, r1
 800464e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	@ (800471c <UART_SetConfig+0x114>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7ff f8ac 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	e002      	b.n	800467e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7ff f894 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 800467c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009a      	lsls	r2, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	4a22      	ldr	r2, [pc, #136]	@ (8004720 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	0119      	lsls	r1, r3, #4
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009a      	lsls	r2, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004720 <UART_SetConfig+0x118>)
 80046b6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2064      	movs	r0, #100	@ 0x64
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	@ 0x32
 80046c8:	4a15      	ldr	r2, [pc, #84]	@ (8004720 <UART_SetConfig+0x118>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d4:	4419      	add	r1, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009a      	lsls	r2, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <UART_SetConfig+0x118>)
 80046ee:	fba3 0302 	umull	r0, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2064      	movs	r0, #100	@ 0x64
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	@ 0x32
 8004700:	4a07      	ldr	r2, [pc, #28]	@ (8004720 <UART_SetConfig+0x118>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	440a      	add	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40013800 	.word	0x40013800
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <memset>:
 8004724:	4603      	mov	r3, r0
 8004726:	4402      	add	r2, r0
 8004728:	4293      	cmp	r3, r2
 800472a:	d100      	bne.n	800472e <memset+0xa>
 800472c:	4770      	bx	lr
 800472e:	f803 1b01 	strb.w	r1, [r3], #1
 8004732:	e7f9      	b.n	8004728 <memset+0x4>

08004734 <__libc_init_array>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	2600      	movs	r6, #0
 8004738:	4d0c      	ldr	r5, [pc, #48]	@ (800476c <__libc_init_array+0x38>)
 800473a:	4c0d      	ldr	r4, [pc, #52]	@ (8004770 <__libc_init_array+0x3c>)
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	42a6      	cmp	r6, r4
 8004742:	d109      	bne.n	8004758 <__libc_init_array+0x24>
 8004744:	f000 f81a 	bl	800477c <_init>
 8004748:	2600      	movs	r6, #0
 800474a:	4d0a      	ldr	r5, [pc, #40]	@ (8004774 <__libc_init_array+0x40>)
 800474c:	4c0a      	ldr	r4, [pc, #40]	@ (8004778 <__libc_init_array+0x44>)
 800474e:	1b64      	subs	r4, r4, r5
 8004750:	10a4      	asrs	r4, r4, #2
 8004752:	42a6      	cmp	r6, r4
 8004754:	d105      	bne.n	8004762 <__libc_init_array+0x2e>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f855 3b04 	ldr.w	r3, [r5], #4
 800475c:	4798      	blx	r3
 800475e:	3601      	adds	r6, #1
 8004760:	e7ee      	b.n	8004740 <__libc_init_array+0xc>
 8004762:	f855 3b04 	ldr.w	r3, [r5], #4
 8004766:	4798      	blx	r3
 8004768:	3601      	adds	r6, #1
 800476a:	e7f2      	b.n	8004752 <__libc_init_array+0x1e>
 800476c:	080047c0 	.word	0x080047c0
 8004770:	080047c0 	.word	0x080047c0
 8004774:	080047c0 	.word	0x080047c0
 8004778:	080047c4 	.word	0x080047c4

0800477c <_init>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr

08004788 <_fini>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	bf00      	nop
 800478c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478e:	bc08      	pop	{r3}
 8004790:	469e      	mov	lr, r3
 8004792:	4770      	bx	lr
