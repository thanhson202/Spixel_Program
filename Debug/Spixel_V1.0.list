
Spixel_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003b94  08003b94  00004b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc0  08003bc0  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc0  08003bc0  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bc4  08003bc4  00004bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003bc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000010  08003bd8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003bd8  00005270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd6d  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b28  00000000  00000000  00010da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  000128d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094c  00000000  00000000  000134a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d50  00000000  00000000  00013dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc08  00000000  00000000  0002db3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099250  00000000  00000000  0003b744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003144  00000000  00000000  000d49d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d7b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	08003b7c 	.word	0x08003b7c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	08003b7c 	.word	0x08003b7c

08000224 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == CH1_Pin)
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000234:	d103      	bne.n	800023e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		read_pwm(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fc3c 	bl	8000ab4 <read_pwm>
 800023c:	e048      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH2_Pin)
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000244:	d103      	bne.n	800024e <HAL_GPIO_EXTI_Callback+0x2a>
	{
		read_pwm(2);
 8000246:	2002      	movs	r0, #2
 8000248:	f000 fc34 	bl	8000ab4 <read_pwm>
 800024c:	e040      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH3_Pin)
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000254:	d103      	bne.n	800025e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		read_pwm(3);
 8000256:	2003      	movs	r0, #3
 8000258:	f000 fc2c 	bl	8000ab4 <read_pwm>
 800025c:	e038      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH4_Pin)
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d103      	bne.n	800026c <HAL_GPIO_EXTI_Callback+0x48>
	{
		read_pwm(4);
 8000264:	2004      	movs	r0, #4
 8000266:	f000 fc25 	bl	8000ab4 <read_pwm>
 800026a:	e031      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH5_Pin)
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	2b08      	cmp	r3, #8
 8000270:	d103      	bne.n	800027a <HAL_GPIO_EXTI_Callback+0x56>
	{
		read_pwm(5);
 8000272:	2005      	movs	r0, #5
 8000274:	f000 fc1e 	bl	8000ab4 <read_pwm>
 8000278:	e02a      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH6_Pin)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b10      	cmp	r3, #16
 800027e:	d103      	bne.n	8000288 <HAL_GPIO_EXTI_Callback+0x64>
	{
		read_pwm(6);
 8000280:	2006      	movs	r0, #6
 8000282:	f000 fc17 	bl	8000ab4 <read_pwm>
 8000286:	e023      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH7_Pin)
 8000288:	88fb      	ldrh	r3, [r7, #6]
 800028a:	2b20      	cmp	r3, #32
 800028c:	d103      	bne.n	8000296 <HAL_GPIO_EXTI_Callback+0x72>
	{
		read_pwm(7);
 800028e:	2007      	movs	r0, #7
 8000290:	f000 fc10 	bl	8000ab4 <read_pwm>
 8000294:	e01c      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH8_Pin)
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	2b40      	cmp	r3, #64	@ 0x40
 800029a:	d103      	bne.n	80002a4 <HAL_GPIO_EXTI_Callback+0x80>
	{
		read_pwm(8);
 800029c:	2008      	movs	r0, #8
 800029e:	f000 fc09 	bl	8000ab4 <read_pwm>
 80002a2:	e015      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH9_Pin)
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	2b80      	cmp	r3, #128	@ 0x80
 80002a8:	d103      	bne.n	80002b2 <HAL_GPIO_EXTI_Callback+0x8e>
	{
		read_pwm(9);
 80002aa:	2009      	movs	r0, #9
 80002ac:	f000 fc02 	bl	8000ab4 <read_pwm>
 80002b0:	e00e      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH10_Pin)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80002b8:	d103      	bne.n	80002c2 <HAL_GPIO_EXTI_Callback+0x9e>
	{
		read_pwm(10);
 80002ba:	200a      	movs	r0, #10
 80002bc:	f000 fbfa 	bl	8000ab4 <read_pwm>
 80002c0:	e006      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH11_Pin)
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002c8:	d102      	bne.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>
	{
		read_pwm(11);
 80002ca:	200b      	movs	r0, #11
 80002cc:	f000 fbf2 	bl	8000ab4 <read_pwm>

	}

	convert();
 80002d0:	f001 f95e 	bl	8001590 <convert>
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f001 fd4a 	bl	8001d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f862 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 fa38 	bl	800075c <MX_GPIO_Init>
  MX_TIM1_Init();
 80002ec:	f000 f8a4 	bl	8000438 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002f0:	f000 f8f2 	bl	80004d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002f4:	f000 f97c 	bl	80005f0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80002f8:	f000 fa06 	bl	8000708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // TIM2 BROOM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002fc:	2104      	movs	r1, #4
 80002fe:	4826      	ldr	r0, [pc, #152]	@ (8000398 <main+0xbc>)
 8000300:	f002 fd96 	bl	8002e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000304:	2108      	movs	r1, #8
 8000306:	4824      	ldr	r0, [pc, #144]	@ (8000398 <main+0xbc>)
 8000308:	f002 fd92 	bl	8002e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800030c:	210c      	movs	r1, #12
 800030e:	4822      	ldr	r0, [pc, #136]	@ (8000398 <main+0xbc>)
 8000310:	f002 fd8e 	bl	8002e30 <HAL_TIM_PWM_Start>

  //TIM3 WHEEL
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4821      	ldr	r0, [pc, #132]	@ (800039c <main+0xc0>)
 8000318:	f002 fd8a 	bl	8002e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800031c:	2104      	movs	r1, #4
 800031e:	481f      	ldr	r0, [pc, #124]	@ (800039c <main+0xc0>)
 8000320:	f002 fd86 	bl	8002e30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000324:	2108      	movs	r1, #8
 8000326:	481d      	ldr	r0, [pc, #116]	@ (800039c <main+0xc0>)
 8000328:	f002 fd82 	bl	8002e30 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 800032c:	481c      	ldr	r0, [pc, #112]	@ (80003a0 <main+0xc4>)
 800032e:	f002 fccf 	bl	8002cd0 <HAL_TIM_Base_Start>


	HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000338:	481a      	ldr	r0, [pc, #104]	@ (80003a4 <main+0xc8>)
 800033a:	f002 f838 	bl	80023ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, SET);
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000344:	4818      	ldr	r0, [pc, #96]	@ (80003a8 <main+0xcc>)
 8000346:	f002 f832 	bl	80023ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, SET);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000350:	4815      	ldr	r0, [pc, #84]	@ (80003a8 <main+0xcc>)
 8000352:	f002 f82c 	bl	80023ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800035c:	4812      	ldr	r0, [pc, #72]	@ (80003a8 <main+0xcc>)
 800035e:	f002 f826 	bl	80023ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2180      	movs	r1, #128	@ 0x80
 8000366:	480f      	ldr	r0, [pc, #60]	@ (80003a4 <main+0xc8>)
 8000368:	f002 f821 	bl	80023ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000372:	480d      	ldr	r0, [pc, #52]	@ (80003a8 <main+0xcc>)
 8000374:	f002 f81b 	bl	80023ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800037e:	480a      	ldr	r0, [pc, #40]	@ (80003a8 <main+0xcc>)
 8000380:	f002 f815 	bl	80023ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800038a:	4807      	ldr	r0, [pc, #28]	@ (80003a8 <main+0xcc>)
 800038c:	f002 f80f 	bl	80023ae <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  convert();
	  control();
 8000390:	f001 fa1e 	bl	80017d0 <control>
 8000394:	e7fc      	b.n	8000390 <main+0xb4>
 8000396:	bf00      	nop
 8000398:	20000074 	.word	0x20000074
 800039c:	200000bc 	.word	0x200000bc
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	40011000 	.word	0x40011000
 80003a8:	40011400 	.word	0x40011400

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b090      	sub	sp, #64	@ 0x40
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2228      	movs	r2, #40	@ 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fbb2 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2302      	movs	r3, #2
 80003e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f002 f80b 	bl	8002410 <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000400:	f000 facc 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	2302      	movs	r3, #2
 800040a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fa78 	bl	8002914 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800042a:	f000 fab7 	bl	800099c <Error_Handler>
  }
}
 800042e:	bf00      	nop
 8000430:	3740      	adds	r7, #64	@ 0x40
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044c:	463b      	mov	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000454:	4b1e      	ldr	r3, [pc, #120]	@ (80004d0 <MX_TIM1_Init+0x98>)
 8000456:	4a1f      	ldr	r2, [pc, #124]	@ (80004d4 <MX_TIM1_Init+0x9c>)
 8000458:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800045a:	4b1d      	ldr	r3, [pc, #116]	@ (80004d0 <MX_TIM1_Init+0x98>)
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <MX_TIM1_Init+0x98>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000466:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <MX_TIM1_Init+0x98>)
 8000468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800046c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_TIM1_Init+0x98>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000474:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <MX_TIM1_Init+0x98>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <MX_TIM1_Init+0x98>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000480:	4813      	ldr	r0, [pc, #76]	@ (80004d0 <MX_TIM1_Init+0x98>)
 8000482:	f002 fbd5 	bl	8002c30 <HAL_TIM_Base_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800048c:	f000 fa86 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	@ (80004d0 <MX_TIM1_Init+0x98>)
 800049e:	f002 fe43 	bl	8003128 <HAL_TIM_ConfigClockSource>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80004a8:	f000 fa78 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ac:	2300      	movs	r3, #0
 80004ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_TIM1_Init+0x98>)
 80004ba:	f003 f9e9 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004c4:	f000 fa6a 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3718      	adds	r7, #24
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	40012c00 	.word	0x40012c00

080004d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08e      	sub	sp, #56	@ 0x38
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	f107 0320 	add.w	r3, r7, #32
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]
 8000506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000508:	4b38      	ldr	r3, [pc, #224]	@ (80005ec <MX_TIM2_Init+0x114>)
 800050a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800050e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000510:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <MX_TIM2_Init+0x114>)
 8000512:	2263      	movs	r2, #99	@ 0x63
 8000514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b35      	ldr	r3, [pc, #212]	@ (80005ec <MX_TIM2_Init+0x114>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14400-1;
 800051c:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <MX_TIM2_Init+0x114>)
 800051e:	f643 023f 	movw	r2, #14399	@ 0x383f
 8000522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b31      	ldr	r3, [pc, #196]	@ (80005ec <MX_TIM2_Init+0x114>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052a:	4b30      	ldr	r3, [pc, #192]	@ (80005ec <MX_TIM2_Init+0x114>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000530:	482e      	ldr	r0, [pc, #184]	@ (80005ec <MX_TIM2_Init+0x114>)
 8000532:	f002 fb7d 	bl	8002c30 <HAL_TIM_Base_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800053c:	f000 fa2e 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000544:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000546:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800054a:	4619      	mov	r1, r3
 800054c:	4827      	ldr	r0, [pc, #156]	@ (80005ec <MX_TIM2_Init+0x114>)
 800054e:	f002 fdeb 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000558:	f000 fa20 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800055c:	4823      	ldr	r0, [pc, #140]	@ (80005ec <MX_TIM2_Init+0x114>)
 800055e:	f002 fc0f 	bl	8002d80 <HAL_TIM_PWM_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000568:	f000 fa18 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4619      	mov	r1, r3
 800057a:	481c      	ldr	r0, [pc, #112]	@ (80005ec <MX_TIM2_Init+0x114>)
 800057c:	f003 f988 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000586:	f000 fa09 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800058a:	2360      	movs	r3, #96	@ 0x60
 800058c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2204      	movs	r2, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4812      	ldr	r0, [pc, #72]	@ (80005ec <MX_TIM2_Init+0x114>)
 80005a2:	f002 fcff 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80005ac:	f000 f9f6 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2208      	movs	r2, #8
 80005b4:	4619      	mov	r1, r3
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <MX_TIM2_Init+0x114>)
 80005b8:	f002 fcf4 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80005c2:	f000 f9eb 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	220c      	movs	r2, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <MX_TIM2_Init+0x114>)
 80005ce:	f002 fce9 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80005d8:	f000 f9e0 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <MX_TIM2_Init+0x114>)
 80005de:	f001 fa77 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 80005e2:	bf00      	nop
 80005e4:	3738      	adds	r7, #56	@ 0x38
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000074 	.word	0x20000074

080005f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	@ 0x38
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000620:	4b37      	ldr	r3, [pc, #220]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000622:	4a38      	ldr	r2, [pc, #224]	@ (8000704 <MX_TIM3_Init+0x114>)
 8000624:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 8000626:	4b36      	ldr	r3, [pc, #216]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000628:	2231      	movs	r2, #49	@ 0x31
 800062a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b34      	ldr	r3, [pc, #208]	@ (8000700 <MX_TIM3_Init+0x110>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 28800-1;
 8000632:	4b33      	ldr	r3, [pc, #204]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000634:	f247 027f 	movw	r2, #28799	@ 0x707f
 8000638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	4b31      	ldr	r3, [pc, #196]	@ (8000700 <MX_TIM3_Init+0x110>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000646:	482e      	ldr	r0, [pc, #184]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000648:	f002 faf2 	bl	8002c30 <HAL_TIM_Base_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000652:	f000 f9a3 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800065c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000660:	4619      	mov	r1, r3
 8000662:	4827      	ldr	r0, [pc, #156]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000664:	f002 fd60 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800066e:	f000 f995 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000672:	4823      	ldr	r0, [pc, #140]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000674:	f002 fb84 	bl	8002d80 <HAL_TIM_PWM_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800067e:	f000 f98d 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4619      	mov	r1, r3
 8000690:	481b      	ldr	r0, [pc, #108]	@ (8000700 <MX_TIM3_Init+0x110>)
 8000692:	f003 f8fd 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800069c:	f000 f97e 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a0:	2360      	movs	r3, #96	@ 0x60
 80006a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	4812      	ldr	r0, [pc, #72]	@ (8000700 <MX_TIM3_Init+0x110>)
 80006b8:	f002 fc74 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006c2:	f000 f96b 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2204      	movs	r2, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <MX_TIM3_Init+0x110>)
 80006ce:	f002 fc69 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80006d8:	f000 f960 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2208      	movs	r2, #8
 80006e0:	4619      	mov	r1, r3
 80006e2:	4807      	ldr	r0, [pc, #28]	@ (8000700 <MX_TIM3_Init+0x110>)
 80006e4:	f002 fc5e 	bl	8002fa4 <HAL_TIM_PWM_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80006ee:	f000 f955 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006f2:	4803      	ldr	r0, [pc, #12]	@ (8000700 <MX_TIM3_Init+0x110>)
 80006f4:	f001 f9ec 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 80006f8:	bf00      	nop
 80006fa:	3738      	adds	r7, #56	@ 0x38
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000bc 	.word	0x200000bc
 8000704:	40000400 	.word	0x40000400

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_USART1_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_USART1_UART_Init+0x4c>)
 8000740:	f003 f912 	bl	8003968 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f927 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000104 	.word	0x20000104
 8000758:	40013800 	.word	0x40013800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b84      	ldr	r3, [pc, #528]	@ (8000984 <MX_GPIO_Init+0x228>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a83      	ldr	r2, [pc, #524]	@ (8000984 <MX_GPIO_Init+0x228>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b81      	ldr	r3, [pc, #516]	@ (8000984 <MX_GPIO_Init+0x228>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b7e      	ldr	r3, [pc, #504]	@ (8000984 <MX_GPIO_Init+0x228>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a7d      	ldr	r2, [pc, #500]	@ (8000984 <MX_GPIO_Init+0x228>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b7b      	ldr	r3, [pc, #492]	@ (8000984 <MX_GPIO_Init+0x228>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a0:	4b78      	ldr	r3, [pc, #480]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a77      	ldr	r2, [pc, #476]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b75      	ldr	r3, [pc, #468]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b8:	4b72      	ldr	r3, [pc, #456]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a71      	ldr	r2, [pc, #452]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007be:	f043 0320 	orr.w	r3, r3, #32
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b6f      	ldr	r3, [pc, #444]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d0:	4b6c      	ldr	r3, [pc, #432]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a6b      	ldr	r2, [pc, #428]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b69      	ldr	r3, [pc, #420]	@ (8000984 <MX_GPIO_Init+0x228>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007ee:	4866      	ldr	r0, [pc, #408]	@ (8000988 <MX_GPIO_Init+0x22c>)
 80007f0:	f001 fddd 	bl	80023ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80007fa:	4864      	ldr	r0, [pc, #400]	@ (800098c <MX_GPIO_Init+0x230>)
 80007fc:	f001 fdd7 	bl	80023ae <HAL_GPIO_WritePin>
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin|F_R_1A_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000806:	4862      	ldr	r0, [pc, #392]	@ (8000990 <MX_GPIO_Init+0x234>)
 8000808:	f001 fdd1 	bl	80023ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	4860      	ldr	r0, [pc, #384]	@ (8000994 <MX_GPIO_Init+0x238>)
 8000812:	f001 fdcc 	bl	80023ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin CH5_Pin CH6_Pin CH7_Pin
                           CH8_Pin CH9_Pin CH10_Pin CH11_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|CH5_Pin|CH6_Pin|CH7_Pin
 8000816:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 800081a:	61bb      	str	r3, [r7, #24]
                          |CH8_Pin|CH9_Pin|CH10_Pin|CH11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081c:	4b5e      	ldr	r3, [pc, #376]	@ (8000998 <MX_GPIO_Init+0x23c>)
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4619      	mov	r1, r3
 800082a:	4857      	ldr	r0, [pc, #348]	@ (8000988 <MX_GPIO_Init+0x22c>)
 800082c:	f001 fc14 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS5_Pin SS6_Pin SS7_Pin SS8_Pin */
  GPIO_InitStruct.Pin = SS5_Pin|SS6_Pin|SS7_Pin|SS8_Pin;
 8000830:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	4619      	mov	r1, r3
 8000844:	4853      	ldr	r0, [pc, #332]	@ (8000994 <MX_GPIO_Init+0x238>)
 8000846:	f001 fc07 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin SS3_Pin SS4_Pin */
  GPIO_InitStruct.Pin = SS2_Pin|SS3_Pin|SS4_Pin;
 800084a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000850:	4b51      	ldr	r3, [pc, #324]	@ (8000998 <MX_GPIO_Init+0x23c>)
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4619      	mov	r1, r3
 800085e:	484d      	ldr	r0, [pc, #308]	@ (8000994 <MX_GPIO_Init+0x238>)
 8000860:	f001 fbfa 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_Pin LIGHT_Pin SLN_Pin OUT_Pin */
  GPIO_InitStruct.Pin = CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin;
 8000864:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2302      	movs	r3, #2
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4619      	mov	r1, r3
 800087c:	4842      	ldr	r0, [pc, #264]	@ (8000988 <MX_GPIO_Init+0x22c>)
 800087e:	f001 fbeb 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK_2B_Pin EN_2B_Pin F_R_2B_Pin BRK_2A_Pin
                           EN_2A_Pin F_R_2A_Pin BRK_1B_Pin EN_1B_Pin */
  GPIO_InitStruct.Pin = BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 8000882:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000886:	61bb      	str	r3, [r7, #24]
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2302      	movs	r3, #2
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	4619      	mov	r1, r3
 800089a:	483c      	ldr	r0, [pc, #240]	@ (800098c <MX_GPIO_Init+0x230>)
 800089c:	f001 fbdc 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_R_1B_Pin BRK_1A_Pin EN_1A_Pin */
  GPIO_InitStruct.Pin = F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin;
 80008a0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2302      	movs	r3, #2
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4835      	ldr	r0, [pc, #212]	@ (8000990 <MX_GPIO_Init+0x234>)
 80008ba:	f001 fbcd 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_R_1A_Pin */
  GPIO_InitStruct.Pin = F_R_1A_Pin;
 80008be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(F_R_1A_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0318 	add.w	r3, r7, #24
 80008d4:	4619      	mov	r1, r3
 80008d6:	482e      	ldr	r0, [pc, #184]	@ (8000990 <MX_GPIO_Init+0x234>)
 80008d8:	f001 fbbe 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_Pin CH2_Pin CH3_Pin */
  GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin|CH3_Pin;
 80008dc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000998 <MX_GPIO_Init+0x23c>)
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4619      	mov	r1, r3
 80008f0:	4827      	ldr	r0, [pc, #156]	@ (8000990 <MX_GPIO_Init+0x234>)
 80008f2:	f001 fbb1 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH4_Pin */
  GPIO_InitStruct.Pin = CH4_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <MX_GPIO_Init+0x23c>)
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0318 	add.w	r3, r7, #24
 8000906:	4619      	mov	r1, r3
 8000908:	4820      	ldr	r0, [pc, #128]	@ (800098c <MX_GPIO_Init+0x230>)
 800090a:	f001 fba5 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	4619      	mov	r1, r3
 8000924:	481b      	ldr	r0, [pc, #108]	@ (8000994 <MX_GPIO_Init+0x238>)
 8000926:	f001 fb97 	bl	8002058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2006      	movs	r0, #6
 8000930:	f001 fb5b 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f001 fb74 	bl	8002022 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2009      	movs	r0, #9
 8000940:	f001 fb53 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000944:	2009      	movs	r0, #9
 8000946:	f001 fb6c 	bl	8002022 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	200a      	movs	r0, #10
 8000950:	f001 fb4b 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000954:	200a      	movs	r0, #10
 8000956:	f001 fb64 	bl	8002022 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2017      	movs	r0, #23
 8000960:	f001 fb43 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000964:	2017      	movs	r0, #23
 8000966:	f001 fb5c 	bl	8002022 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2028      	movs	r0, #40	@ 0x28
 8000970:	f001 fb3b 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000974:	2028      	movs	r0, #40	@ 0x28
 8000976:	f001 fb54 	bl	8002022 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	40010c00 	.word	0x40010c00
 800098c:	40011400 	.word	0x40011400
 8000990:	40011000 	.word	0x40011000
 8000994:	40011800 	.word	0x40011800
 8000998:	10110000 	.word	0x10110000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <map>:
read read_1,read_2,read_3,read_4,read_5,read_6,read_7,read_8,read_9,read_10,read_11;



uint16_t map(uint16_t x,uint16_t In_Max,uint16_t In_Min,uint16_t Out_Max,uint16_t Out_Min )
{
 80009a8:	b490      	push	{r4, r7}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4623      	mov	r3, r4
 80009b8:	80fb      	strh	r3, [r7, #6]
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
 80009c2:	4613      	mov	r3, r2
 80009c4:	803b      	strh	r3, [r7, #0]
	return(((x-In_Min)*(Out_Max-Out_Min)/(In_Max-In_Min))+Out_Min);
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	8839      	ldrh	r1, [r7, #0]
 80009ce:	8a3a      	ldrh	r2, [r7, #16]
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	fb03 f202 	mul.w	r2, r3, r2
 80009d6:	88b9      	ldrh	r1, [r7, #4]
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	1acb      	subs	r3, r1, r3
 80009dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	8a3b      	ldrh	r3, [r7, #16]
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc90      	pop	{r4, r7}
 80009f0:	4770      	bx	lr

080009f2 <media_filter>:

uint32_t media_filter(uint32_t* array_read, int size) {
 80009f2:	b480      	push	{r7}
 80009f4:	b091      	sub	sp, #68	@ 0x44
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]


    uint32_t temp_array[10];
    for (int i = 0; i < size; i++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a00:	e00d      	b.n	8000a1e <media_filter+0x2c>
        temp_array[i] = array_read[i];
 8000a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	3340      	adds	r3, #64	@ 0x40
 8000a12:	443b      	add	r3, r7
 8000a14:	f843 2c38 	str.w	r2, [r3, #-56]
    for (int i = 0; i < size; i++) {
 8000a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dbed      	blt.n	8000a02 <media_filter+0x10>
    }

    // Sắp xếp mảng tạm bằng Insertion Sort
    for (int i = 1; i < size; i++) {
 8000a26:	2301      	movs	r3, #1
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a2a:	e031      	b.n	8000a90 <media_filter+0x9e>
        uint32_t temp = temp_array[i];
 8000a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	3340      	adds	r3, #64	@ 0x40
 8000a32:	443b      	add	r3, r7
 8000a34:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000a38:	633b      	str	r3, [r7, #48]	@ 0x30
        int j = i - 1;
 8000a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34

        while (j >= 0 && temp_array[j] > temp) {
 8000a40:	e00f      	b.n	8000a62 <media_filter+0x70>
            temp_array[j + 1] = temp_array[j];
 8000a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a44:	1c59      	adds	r1, r3, #1
 8000a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	3340      	adds	r3, #64	@ 0x40
 8000a4c:	443b      	add	r3, r7
 8000a4e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000a52:	008b      	lsls	r3, r1, #2
 8000a54:	3340      	adds	r3, #64	@ 0x40
 8000a56:	443b      	add	r3, r7
 8000a58:	f843 2c38 	str.w	r2, [r3, #-56]
            j--;
 8000a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
        while (j >= 0 && temp_array[j] > temp) {
 8000a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db08      	blt.n	8000a7a <media_filter+0x88>
 8000a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	3340      	adds	r3, #64	@ 0x40
 8000a6e:	443b      	add	r3, r7
 8000a70:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d3e3      	bcc.n	8000a42 <media_filter+0x50>
        }
        temp_array[j + 1] = temp;
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	3340      	adds	r3, #64	@ 0x40
 8000a82:	443b      	add	r3, r7
 8000a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a86:	f843 2c38 	str.w	r2, [r3, #-56]
    for (int i = 1; i < size; i++) {
 8000a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbc9      	blt.n	8000a2c <media_filter+0x3a>
    }

    // Trả về giá trị trung vị
    return temp_array[size / 2];
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	0fda      	lsrs	r2, r3, #31
 8000a9c:	4413      	add	r3, r2
 8000a9e:	105b      	asrs	r3, r3, #1
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	3340      	adds	r3, #64	@ 0x40
 8000aa4:	443b      	add	r3, r7
 8000aa6:	f853 3c38 	ldr.w	r3, [r3, #-56]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3744      	adds	r7, #68	@ 0x44
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <read_pwm>:
void read_pwm(int val_ch)
	{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0da      	sub	sp, #360	@ 0x168
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000abe:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8000ac2:	6018      	str	r0, [r3, #0]
		switch(val_ch)
 8000ac4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000ac8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	2b0a      	cmp	r3, #10
 8000ad2:	f200 854a 	bhi.w	800156a <read_pwm+0xab6>
 8000ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8000adc <read_pwm+0x28>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000b09 	.word	0x08000b09
 8000ae0:	08000c25 	.word	0x08000c25
 8000ae4:	08000d41 	.word	0x08000d41
 8000ae8:	08000e55 	.word	0x08000e55
 8000aec:	08000f33 	.word	0x08000f33
 8000af0:	08000fef 	.word	0x08000fef
 8000af4:	080010d5 	.word	0x080010d5
 8000af8:	08001191 	.word	0x08001191
 8000afc:	0800125b 	.word	0x0800125b
 8000b00:	0800135b 	.word	0x0800135b
 8000b04:	08001463 	.word	0x08001463
		{
			case 1:
				if(HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin)==1)
 8000b08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b0c:	489b      	ldr	r0, [pc, #620]	@ (8000d7c <read_pwm+0x2c8>)
 8000b0e:	f001 fc37 	bl	8002380 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d116      	bne.n	8000b46 <read_pwm+0x92>
					{
						read_1.start = htim1.Instance->CNT;
 8000b18:	4b99      	ldr	r3, [pc, #612]	@ (8000d80 <read_pwm+0x2cc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b1e:	4a99      	ldr	r2, [pc, #612]	@ (8000d84 <read_pwm+0x2d0>)
 8000b20:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH1_Pin;
 8000b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b26:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2a:	4b97      	ldr	r3, [pc, #604]	@ (8000d88 <read_pwm+0x2d4>)
 8000b2c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	488f      	ldr	r0, [pc, #572]	@ (8000d7c <read_pwm+0x2c8>)
 8000b3e:	f001 fa8b 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH1_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000b42:	f000 bd12 	b.w	800156a <read_pwm+0xab6>
						read_1.end = htim1.Instance->CNT;
 8000b46:	4b8e      	ldr	r3, [pc, #568]	@ (8000d80 <read_pwm+0x2cc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b4c:	4a8d      	ldr	r2, [pc, #564]	@ (8000d84 <read_pwm+0x2d0>)
 8000b4e:	6053      	str	r3, [r2, #4]
						if(read_1.start > read_1.end)
 8000b50:	4b8c      	ldr	r3, [pc, #560]	@ (8000d84 <read_pwm+0x2d0>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b8b      	ldr	r3, [pc, #556]	@ (8000d84 <read_pwm+0x2d0>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d90a      	bls.n	8000b72 <read_pwm+0xbe>
							read_1.out = 65535 - read_1.start + read_1.end;
 8000b5c:	4b89      	ldr	r3, [pc, #548]	@ (8000d84 <read_pwm+0x2d0>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4b88      	ldr	r3, [pc, #544]	@ (8000d84 <read_pwm+0x2d0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000b6a:	33ff      	adds	r3, #255	@ 0xff
 8000b6c:	4a85      	ldr	r2, [pc, #532]	@ (8000d84 <read_pwm+0x2d0>)
 8000b6e:	6093      	str	r3, [r2, #8]
 8000b70:	e006      	b.n	8000b80 <read_pwm+0xcc>
							read_1.out = read_1.end - read_1.start;
 8000b72:	4b84      	ldr	r3, [pc, #528]	@ (8000d84 <read_pwm+0x2d0>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	4b83      	ldr	r3, [pc, #524]	@ (8000d84 <read_pwm+0x2d0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	4a81      	ldr	r2, [pc, #516]	@ (8000d84 <read_pwm+0x2d0>)
 8000b7e:	6093      	str	r3, [r2, #8]
						if(read_1.out > 61200)
 8000b80:	4b80      	ldr	r3, [pc, #512]	@ (8000d84 <read_pwm+0x2d0>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d904      	bls.n	8000b96 <read_pwm+0xe2>
							read_1.out = 61200;
 8000b8c:	4b7d      	ldr	r3, [pc, #500]	@ (8000d84 <read_pwm+0x2d0>)
 8000b8e:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	e01a      	b.n	8000bcc <read_pwm+0x118>
						else if(read_1.out < 7000)
 8000b96:	4b7b      	ldr	r3, [pc, #492]	@ (8000d84 <read_pwm+0x2d0>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d804      	bhi.n	8000bac <read_pwm+0xf8>
							read_1.out = 7000;
 8000ba2:	4b78      	ldr	r3, [pc, #480]	@ (8000d84 <read_pwm+0x2d0>)
 8000ba4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	e00f      	b.n	8000bcc <read_pwm+0x118>
						else if(40000 <= read_1.out && read_1.out <= 45000)
 8000bac:	4b75      	ldr	r3, [pc, #468]	@ (8000d84 <read_pwm+0x2d0>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d909      	bls.n	8000bcc <read_pwm+0x118>
 8000bb8:	4b72      	ldr	r3, [pc, #456]	@ (8000d84 <read_pwm+0x2d0>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d803      	bhi.n	8000bcc <read_pwm+0x118>
							read_1.out = 43200;
 8000bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8000d84 <read_pwm+0x2d0>)
 8000bc6:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8000bca:	609a      	str	r2, [r3, #8]
						array_read_ch1[count_ch1] = read_1.out;
 8000bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8000d8c <read_pwm+0x2d8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a6c      	ldr	r2, [pc, #432]	@ (8000d84 <read_pwm+0x2d0>)
 8000bd2:	6892      	ldr	r2, [r2, #8]
 8000bd4:	496e      	ldr	r1, [pc, #440]	@ (8000d90 <read_pwm+0x2dc>)
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					    count_ch1 = (count_ch1 + 1) % size;
 8000bda:	4b6c      	ldr	r3, [pc, #432]	@ (8000d8c <read_pwm+0x2d8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a6c      	ldr	r2, [pc, #432]	@ (8000d94 <read_pwm+0x2e0>)
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000be8:	fb01 f202 	mul.w	r2, r1, r2
 8000bec:	1a9b      	subs	r3, r3, r2
 8000bee:	4a67      	ldr	r2, [pc, #412]	@ (8000d8c <read_pwm+0x2d8>)
 8000bf0:	6013      	str	r3, [r2, #0]
						read_1.out = media_filter(array_read_ch1,10);
 8000bf2:	210a      	movs	r1, #10
 8000bf4:	4866      	ldr	r0, [pc, #408]	@ (8000d90 <read_pwm+0x2dc>)
 8000bf6:	f7ff fefc 	bl	80009f2 <media_filter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a61      	ldr	r2, [pc, #388]	@ (8000d84 <read_pwm+0x2d0>)
 8000bfe:	6093      	str	r3, [r2, #8]
						GPIO_InitStruct.Pin = CH1_Pin;
 8000c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c04:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c08:	4b63      	ldr	r3, [pc, #396]	@ (8000d98 <read_pwm+0x2e4>)
 8000c0a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4858      	ldr	r0, [pc, #352]	@ (8000d7c <read_pwm+0x2c8>)
 8000c1c:	f001 fa1c 	bl	8002058 <HAL_GPIO_Init>
			break;
 8000c20:	f000 bca3 	b.w	800156a <read_pwm+0xab6>
			case 2:
				if(HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin)==1)
 8000c24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c28:	4854      	ldr	r0, [pc, #336]	@ (8000d7c <read_pwm+0x2c8>)
 8000c2a:	f001 fba9 	bl	8002380 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d116      	bne.n	8000c62 <read_pwm+0x1ae>
					{
						read_2.start = htim1.Instance->CNT;
 8000c34:	4b52      	ldr	r3, [pc, #328]	@ (8000d80 <read_pwm+0x2cc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3a:	4a58      	ldr	r2, [pc, #352]	@ (8000d9c <read_pwm+0x2e8>)
 8000c3c:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH2_Pin;
 8000c3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c46:	4b50      	ldr	r3, [pc, #320]	@ (8000d88 <read_pwm+0x2d4>)
 8000c48:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c56:	4619      	mov	r1, r3
 8000c58:	4848      	ldr	r0, [pc, #288]	@ (8000d7c <read_pwm+0x2c8>)
 8000c5a:	f001 f9fd 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH2_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000c5e:	f000 bc84 	b.w	800156a <read_pwm+0xab6>
						read_2.end = htim1.Instance->CNT;
 8000c62:	4b47      	ldr	r3, [pc, #284]	@ (8000d80 <read_pwm+0x2cc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c68:	4a4c      	ldr	r2, [pc, #304]	@ (8000d9c <read_pwm+0x2e8>)
 8000c6a:	6053      	str	r3, [r2, #4]
						if(read_2.start > read_2.end)
 8000c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d9c <read_pwm+0x2e8>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b4a      	ldr	r3, [pc, #296]	@ (8000d9c <read_pwm+0x2e8>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d90a      	bls.n	8000c8e <read_pwm+0x1da>
							read_2.out = 65535 - read_2.start + read_2.end;
 8000c78:	4b48      	ldr	r3, [pc, #288]	@ (8000d9c <read_pwm+0x2e8>)
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	4b47      	ldr	r3, [pc, #284]	@ (8000d9c <read_pwm+0x2e8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c86:	33ff      	adds	r3, #255	@ 0xff
 8000c88:	4a44      	ldr	r2, [pc, #272]	@ (8000d9c <read_pwm+0x2e8>)
 8000c8a:	6093      	str	r3, [r2, #8]
 8000c8c:	e006      	b.n	8000c9c <read_pwm+0x1e8>
							read_2.out = read_2.end - read_2.start;
 8000c8e:	4b43      	ldr	r3, [pc, #268]	@ (8000d9c <read_pwm+0x2e8>)
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	4b42      	ldr	r3, [pc, #264]	@ (8000d9c <read_pwm+0x2e8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	4a40      	ldr	r2, [pc, #256]	@ (8000d9c <read_pwm+0x2e8>)
 8000c9a:	6093      	str	r3, [r2, #8]
						if(read_2.out >= 61200)
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d9c <read_pwm+0x2e8>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d904      	bls.n	8000cb2 <read_pwm+0x1fe>
							read_2.out = 61200;
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8000d9c <read_pwm+0x2e8>)
 8000caa:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	e01a      	b.n	8000ce8 <read_pwm+0x234>
						else if(read_2.out <= 7000)
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <read_pwm+0x2e8>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d804      	bhi.n	8000cc8 <read_pwm+0x214>
							read_2.out = 7000;
 8000cbe:	4b37      	ldr	r3, [pc, #220]	@ (8000d9c <read_pwm+0x2e8>)
 8000cc0:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	e00f      	b.n	8000ce8 <read_pwm+0x234>
						else if(40000 < read_2.out && read_2.out < 45000)
 8000cc8:	4b34      	ldr	r3, [pc, #208]	@ (8000d9c <read_pwm+0x2e8>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d909      	bls.n	8000ce8 <read_pwm+0x234>
 8000cd4:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <read_pwm+0x2e8>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d803      	bhi.n	8000ce8 <read_pwm+0x234>
							read_2.out = 43250;
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d9c <read_pwm+0x2e8>)
 8000ce2:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8000ce6:	609a      	str	r2, [r3, #8]
						array_read_ch2[count_ch2] = read_2.out;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <read_pwm+0x2ec>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a2b      	ldr	r2, [pc, #172]	@ (8000d9c <read_pwm+0x2e8>)
 8000cee:	6892      	ldr	r2, [r2, #8]
 8000cf0:	492c      	ldr	r1, [pc, #176]	@ (8000da4 <read_pwm+0x2f0>)
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					    count_ch2 = (count_ch2 + 1) % size;
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <read_pwm+0x2ec>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a25      	ldr	r2, [pc, #148]	@ (8000d94 <read_pwm+0x2e0>)
 8000cfe:	6812      	ldr	r2, [r2, #0]
 8000d00:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d04:	fb01 f202 	mul.w	r2, r1, r2
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	4a25      	ldr	r2, [pc, #148]	@ (8000da0 <read_pwm+0x2ec>)
 8000d0c:	6013      	str	r3, [r2, #0]
						read_2.out = media_filter(array_read_ch2,10);
 8000d0e:	210a      	movs	r1, #10
 8000d10:	4824      	ldr	r0, [pc, #144]	@ (8000da4 <read_pwm+0x2f0>)
 8000d12:	f7ff fe6e 	bl	80009f2 <media_filter>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a20      	ldr	r2, [pc, #128]	@ (8000d9c <read_pwm+0x2e8>)
 8000d1a:	6093      	str	r3, [r2, #8]
						GPIO_InitStruct.Pin = CH2_Pin;
 8000d1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <read_pwm+0x2e4>)
 8000d26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000d34:	4619      	mov	r1, r3
 8000d36:	4811      	ldr	r0, [pc, #68]	@ (8000d7c <read_pwm+0x2c8>)
 8000d38:	f001 f98e 	bl	8002058 <HAL_GPIO_Init>
			break;
 8000d3c:	f000 bc15 	b.w	800156a <read_pwm+0xab6>
			case 3:
				if(HAL_GPIO_ReadPin(CH3_GPIO_Port, CH3_Pin)==1)
 8000d40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d44:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <read_pwm+0x2c8>)
 8000d46:	f001 fb1b 	bl	8002380 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d12d      	bne.n	8000dac <read_pwm+0x2f8>
					{
						read_3.start = htim1.Instance->CNT;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <read_pwm+0x2cc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d56:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <read_pwm+0x2f4>)
 8000d58:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH3_Pin;
 8000d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <read_pwm+0x2d4>)
 8000d64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d72:	4619      	mov	r1, r3
 8000d74:	4801      	ldr	r0, [pc, #4]	@ (8000d7c <read_pwm+0x2c8>)
 8000d76:	f001 f96f 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH3_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000d7a:	e3f6      	b.n	800156a <read_pwm+0xab6>
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	2000002c 	.word	0x2000002c
 8000d84:	200001bc 	.word	0x200001bc
 8000d88:	10210000 	.word	0x10210000
 8000d8c:	20000164 	.word	0x20000164
 8000d90:	2000016c 	.word	0x2000016c
 8000d94:	20000000 	.word	0x20000000
 8000d98:	10110000 	.word	0x10110000
 8000d9c:	200001cc 	.word	0x200001cc
 8000da0:	20000168 	.word	0x20000168
 8000da4:	20000194 	.word	0x20000194
 8000da8:	200001dc 	.word	0x200001dc
						read_3.end = htim1.Instance->CNT;
 8000dac:	4b9e      	ldr	r3, [pc, #632]	@ (8001028 <read_pwm+0x574>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db2:	4a9e      	ldr	r2, [pc, #632]	@ (800102c <read_pwm+0x578>)
 8000db4:	6053      	str	r3, [r2, #4]
						if(read_3.start > read_3.end)
 8000db6:	4b9d      	ldr	r3, [pc, #628]	@ (800102c <read_pwm+0x578>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b9c      	ldr	r3, [pc, #624]	@ (800102c <read_pwm+0x578>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d90a      	bls.n	8000dd8 <read_pwm+0x324>
							read_3.out = 65535 - read_3.start + read_3.end;
 8000dc2:	4b9a      	ldr	r3, [pc, #616]	@ (800102c <read_pwm+0x578>)
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4b99      	ldr	r3, [pc, #612]	@ (800102c <read_pwm+0x578>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000dd0:	33ff      	adds	r3, #255	@ 0xff
 8000dd2:	4a96      	ldr	r2, [pc, #600]	@ (800102c <read_pwm+0x578>)
 8000dd4:	6093      	str	r3, [r2, #8]
 8000dd6:	e006      	b.n	8000de6 <read_pwm+0x332>
							read_3.out = read_3.end - read_3.start;
 8000dd8:	4b94      	ldr	r3, [pc, #592]	@ (800102c <read_pwm+0x578>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	4b93      	ldr	r3, [pc, #588]	@ (800102c <read_pwm+0x578>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	4a92      	ldr	r2, [pc, #584]	@ (800102c <read_pwm+0x578>)
 8000de4:	6093      	str	r3, [r2, #8]
						if(read_3.out >= 61200)
 8000de6:	4b91      	ldr	r3, [pc, #580]	@ (800102c <read_pwm+0x578>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d904      	bls.n	8000dfc <read_pwm+0x348>
							read_3.out = 61200;
 8000df2:	4b8e      	ldr	r3, [pc, #568]	@ (800102c <read_pwm+0x578>)
 8000df4:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	e01a      	b.n	8000e32 <read_pwm+0x37e>
						else if(read_3.out <= 7000)
 8000dfc:	4b8b      	ldr	r3, [pc, #556]	@ (800102c <read_pwm+0x578>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d804      	bhi.n	8000e12 <read_pwm+0x35e>
							read_3.out = 7000;
 8000e08:	4b88      	ldr	r3, [pc, #544]	@ (800102c <read_pwm+0x578>)
 8000e0a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	e00f      	b.n	8000e32 <read_pwm+0x37e>
						else if(40000 <= read_3.out && read_3.out <= 45000)
 8000e12:	4b86      	ldr	r3, [pc, #536]	@ (800102c <read_pwm+0x578>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d909      	bls.n	8000e32 <read_pwm+0x37e>
 8000e1e:	4b83      	ldr	r3, [pc, #524]	@ (800102c <read_pwm+0x578>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d803      	bhi.n	8000e32 <read_pwm+0x37e>
							read_3.out = 41300;
 8000e2a:	4b80      	ldr	r3, [pc, #512]	@ (800102c <read_pwm+0x578>)
 8000e2c:	f24a 1254 	movw	r2, #41300	@ 0xa154
 8000e30:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH3_Pin;
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001030 <read_pwm+0x57c>)
 8000e3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4879      	ldr	r0, [pc, #484]	@ (8001034 <read_pwm+0x580>)
 8000e4e:	f001 f903 	bl	8002058 <HAL_GPIO_Init>
			break;
 8000e52:	e38a      	b.n	800156a <read_pwm+0xab6>
			case 4:
				if(HAL_GPIO_ReadPin(CH4_GPIO_Port, CH4_Pin)==1)
 8000e54:	2101      	movs	r1, #1
 8000e56:	4878      	ldr	r0, [pc, #480]	@ (8001038 <read_pwm+0x584>)
 8000e58:	f001 fa92 	bl	8002380 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d114      	bne.n	8000e8c <read_pwm+0x3d8>
					{
						read_4.start = htim1.Instance->CNT;
 8000e62:	4b71      	ldr	r3, [pc, #452]	@ (8001028 <read_pwm+0x574>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e68:	4a74      	ldr	r2, [pc, #464]	@ (800103c <read_pwm+0x588>)
 8000e6a:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH4_Pin;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e72:	4b73      	ldr	r3, [pc, #460]	@ (8001040 <read_pwm+0x58c>)
 8000e74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8000e82:	4619      	mov	r1, r3
 8000e84:	486c      	ldr	r0, [pc, #432]	@ (8001038 <read_pwm+0x584>)
 8000e86:	f001 f8e7 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH4_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000e8a:	e36e      	b.n	800156a <read_pwm+0xab6>
						read_4.end = htim1.Instance->CNT;
 8000e8c:	4b66      	ldr	r3, [pc, #408]	@ (8001028 <read_pwm+0x574>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	4a6a      	ldr	r2, [pc, #424]	@ (800103c <read_pwm+0x588>)
 8000e94:	6053      	str	r3, [r2, #4]
						if(read_4.start > read_4.end)
 8000e96:	4b69      	ldr	r3, [pc, #420]	@ (800103c <read_pwm+0x588>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b68      	ldr	r3, [pc, #416]	@ (800103c <read_pwm+0x588>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d90a      	bls.n	8000eb8 <read_pwm+0x404>
							read_4.out = 65535 - read_4.start + read_4.end;
 8000ea2:	4b66      	ldr	r3, [pc, #408]	@ (800103c <read_pwm+0x588>)
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4b65      	ldr	r3, [pc, #404]	@ (800103c <read_pwm+0x588>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000eb0:	33ff      	adds	r3, #255	@ 0xff
 8000eb2:	4a62      	ldr	r2, [pc, #392]	@ (800103c <read_pwm+0x588>)
 8000eb4:	6093      	str	r3, [r2, #8]
 8000eb6:	e006      	b.n	8000ec6 <read_pwm+0x412>
							read_4.out = read_4.end - read_4.start;
 8000eb8:	4b60      	ldr	r3, [pc, #384]	@ (800103c <read_pwm+0x588>)
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4b5f      	ldr	r3, [pc, #380]	@ (800103c <read_pwm+0x588>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800103c <read_pwm+0x588>)
 8000ec4:	6093      	str	r3, [r2, #8]
						if(read_4.out > 61200)
 8000ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800103c <read_pwm+0x588>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d904      	bls.n	8000edc <read_pwm+0x428>
							read_4.out = 61200;
 8000ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800103c <read_pwm+0x588>)
 8000ed4:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	e01a      	b.n	8000f12 <read_pwm+0x45e>
						else if(read_4.out < 25000)
 8000edc:	4b57      	ldr	r3, [pc, #348]	@ (800103c <read_pwm+0x588>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d804      	bhi.n	8000ef2 <read_pwm+0x43e>
							read_4.out = 25000;
 8000ee8:	4b54      	ldr	r3, [pc, #336]	@ (800103c <read_pwm+0x588>)
 8000eea:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	e00f      	b.n	8000f12 <read_pwm+0x45e>
						else if(40000 <= read_4.out && read_4.out <= 45000)
 8000ef2:	4b52      	ldr	r3, [pc, #328]	@ (800103c <read_pwm+0x588>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d909      	bls.n	8000f12 <read_pwm+0x45e>
 8000efe:	4b4f      	ldr	r3, [pc, #316]	@ (800103c <read_pwm+0x588>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d803      	bhi.n	8000f12 <read_pwm+0x45e>
							read_4.out = 42900;
 8000f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800103c <read_pwm+0x588>)
 8000f0c:	f24a 7294 	movw	r2, #42900	@ 0xa794
 8000f10:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH4_Pin;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f18:	4b45      	ldr	r3, [pc, #276]	@ (8001030 <read_pwm+0x57c>)
 8000f1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4843      	ldr	r0, [pc, #268]	@ (8001038 <read_pwm+0x584>)
 8000f2c:	f001 f894 	bl	8002058 <HAL_GPIO_Init>
					break;
 8000f30:	e31b      	b.n	800156a <read_pwm+0xab6>
			case 5:
				if(HAL_GPIO_ReadPin(CH5_GPIO_Port, CH5_Pin)==1)
 8000f32:	2108      	movs	r1, #8
 8000f34:	4843      	ldr	r0, [pc, #268]	@ (8001044 <read_pwm+0x590>)
 8000f36:	f001 fa23 	bl	8002380 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d114      	bne.n	8000f6a <read_pwm+0x4b6>
					{
						read_5.start = htim1.Instance->CNT;
 8000f40:	4b39      	ldr	r3, [pc, #228]	@ (8001028 <read_pwm+0x574>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f46:	4a40      	ldr	r2, [pc, #256]	@ (8001048 <read_pwm+0x594>)
 8000f48:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH5_Pin;
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f50:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <read_pwm+0x58c>)
 8000f52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000f60:	4619      	mov	r1, r3
 8000f62:	4838      	ldr	r0, [pc, #224]	@ (8001044 <read_pwm+0x590>)
 8000f64:	f001 f878 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH5_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000f68:	e2ff      	b.n	800156a <read_pwm+0xab6>
						read_5.end = htim1.Instance->CNT;
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001028 <read_pwm+0x574>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f70:	4a35      	ldr	r2, [pc, #212]	@ (8001048 <read_pwm+0x594>)
 8000f72:	6053      	str	r3, [r2, #4]
						if(read_5.start > read_5.end)
 8000f74:	4b34      	ldr	r3, [pc, #208]	@ (8001048 <read_pwm+0x594>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b33      	ldr	r3, [pc, #204]	@ (8001048 <read_pwm+0x594>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d90a      	bls.n	8000f96 <read_pwm+0x4e2>
							read_5.out = 65535 - read_5.start + read_5.end;
 8000f80:	4b31      	ldr	r3, [pc, #196]	@ (8001048 <read_pwm+0x594>)
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <read_pwm+0x594>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f8e:	33ff      	adds	r3, #255	@ 0xff
 8000f90:	4a2d      	ldr	r2, [pc, #180]	@ (8001048 <read_pwm+0x594>)
 8000f92:	6093      	str	r3, [r2, #8]
 8000f94:	e006      	b.n	8000fa4 <read_pwm+0x4f0>
							read_5.out = read_5.end - read_5.start;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <read_pwm+0x594>)
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001048 <read_pwm+0x594>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	4a29      	ldr	r2, [pc, #164]	@ (8001048 <read_pwm+0x594>)
 8000fa2:	6093      	str	r3, [r2, #8]
						if(read_5.out > 61200)
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <read_pwm+0x594>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d904      	bls.n	8000fba <read_pwm+0x506>
							read_5.out = 61200;
 8000fb0:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <read_pwm+0x594>)
 8000fb2:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	e009      	b.n	8000fce <read_pwm+0x51a>
						else if(read_5.out < 7000)
 8000fba:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <read_pwm+0x594>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d803      	bhi.n	8000fce <read_pwm+0x51a>
							read_5.out = 7000;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <read_pwm+0x594>)
 8000fc8:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000fcc:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH5_Pin;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <read_pwm+0x57c>)
 8000fd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4817      	ldr	r0, [pc, #92]	@ (8001044 <read_pwm+0x590>)
 8000fe8:	f001 f836 	bl	8002058 <HAL_GPIO_Init>
					break;
 8000fec:	e2bd      	b.n	800156a <read_pwm+0xab6>
			case 6:
				if(HAL_GPIO_ReadPin(CH6_GPIO_Port, CH6_Pin)==1)
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4814      	ldr	r0, [pc, #80]	@ (8001044 <read_pwm+0x590>)
 8000ff2:	f001 f9c5 	bl	8002380 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d129      	bne.n	8001050 <read_pwm+0x59c>
					{
						read_6.start = htim1.Instance->CNT;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <read_pwm+0x574>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <read_pwm+0x598>)
 8001004:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH6_Pin;
 8001006:	2310      	movs	r3, #16
 8001008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <read_pwm+0x58c>)
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800101c:	4619      	mov	r1, r3
 800101e:	4809      	ldr	r0, [pc, #36]	@ (8001044 <read_pwm+0x590>)
 8001020:	f001 f81a 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH6_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8001024:	e2a1      	b.n	800156a <read_pwm+0xab6>
 8001026:	bf00      	nop
 8001028:	2000002c 	.word	0x2000002c
 800102c:	200001dc 	.word	0x200001dc
 8001030:	10110000 	.word	0x10110000
 8001034:	40011000 	.word	0x40011000
 8001038:	40011400 	.word	0x40011400
 800103c:	200001ec 	.word	0x200001ec
 8001040:	10210000 	.word	0x10210000
 8001044:	40010c00 	.word	0x40010c00
 8001048:	200001fc 	.word	0x200001fc
 800104c:	2000020c 	.word	0x2000020c
						read_6.end = htim1.Instance->CNT;
 8001050:	4b9f      	ldr	r3, [pc, #636]	@ (80012d0 <read_pwm+0x81c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001056:	4a9f      	ldr	r2, [pc, #636]	@ (80012d4 <read_pwm+0x820>)
 8001058:	6053      	str	r3, [r2, #4]
						if(read_6.start > read_6.end)
 800105a:	4b9e      	ldr	r3, [pc, #632]	@ (80012d4 <read_pwm+0x820>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b9d      	ldr	r3, [pc, #628]	@ (80012d4 <read_pwm+0x820>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	d90a      	bls.n	800107c <read_pwm+0x5c8>
							read_6.out = 65535 - read_6.start + read_6.end;
 8001066:	4b9b      	ldr	r3, [pc, #620]	@ (80012d4 <read_pwm+0x820>)
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4b9a      	ldr	r3, [pc, #616]	@ (80012d4 <read_pwm+0x820>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001074:	33ff      	adds	r3, #255	@ 0xff
 8001076:	4a97      	ldr	r2, [pc, #604]	@ (80012d4 <read_pwm+0x820>)
 8001078:	6093      	str	r3, [r2, #8]
 800107a:	e006      	b.n	800108a <read_pwm+0x5d6>
							read_6.out = read_6.end - read_6.start;
 800107c:	4b95      	ldr	r3, [pc, #596]	@ (80012d4 <read_pwm+0x820>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4b94      	ldr	r3, [pc, #592]	@ (80012d4 <read_pwm+0x820>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	4a93      	ldr	r2, [pc, #588]	@ (80012d4 <read_pwm+0x820>)
 8001088:	6093      	str	r3, [r2, #8]
						if(read_6.out > 13700)
 800108a:	4b92      	ldr	r3, [pc, #584]	@ (80012d4 <read_pwm+0x820>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f243 5284 	movw	r2, #13700	@ 0x3584
 8001092:	4293      	cmp	r3, r2
 8001094:	d904      	bls.n	80010a0 <read_pwm+0x5ec>
							read_6.out = 13700;
 8001096:	4b8f      	ldr	r3, [pc, #572]	@ (80012d4 <read_pwm+0x820>)
 8001098:	f243 5284 	movw	r2, #13700	@ 0x3584
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e009      	b.n	80010b4 <read_pwm+0x600>
						else if(read_6.out < 6900)
 80010a0:	4b8c      	ldr	r3, [pc, #560]	@ (80012d4 <read_pwm+0x820>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f641 22f3 	movw	r2, #6899	@ 0x1af3
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d803      	bhi.n	80010b4 <read_pwm+0x600>
							read_6.out = 6900;
 80010ac:	4b89      	ldr	r3, [pc, #548]	@ (80012d4 <read_pwm+0x820>)
 80010ae:	f641 22f4 	movw	r2, #6900	@ 0x1af4
 80010b2:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH6_Pin;
 80010b4:	2310      	movs	r3, #16
 80010b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ba:	4b87      	ldr	r3, [pc, #540]	@ (80012d8 <read_pwm+0x824>)
 80010bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80010ca:	4619      	mov	r1, r3
 80010cc:	4883      	ldr	r0, [pc, #524]	@ (80012dc <read_pwm+0x828>)
 80010ce:	f000 ffc3 	bl	8002058 <HAL_GPIO_Init>
					break;
 80010d2:	e24a      	b.n	800156a <read_pwm+0xab6>
			case 7:
					if(HAL_GPIO_ReadPin(CH7_GPIO_Port, CH7_Pin)==1)
 80010d4:	2120      	movs	r1, #32
 80010d6:	4881      	ldr	r0, [pc, #516]	@ (80012dc <read_pwm+0x828>)
 80010d8:	f001 f952 	bl	8002380 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d114      	bne.n	800110c <read_pwm+0x658>
					{
						read_7.start = htim1.Instance->CNT;
 80010e2:	4b7b      	ldr	r3, [pc, #492]	@ (80012d0 <read_pwm+0x81c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	4a7d      	ldr	r2, [pc, #500]	@ (80012e0 <read_pwm+0x82c>)
 80010ea:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH7_Pin;
 80010ec:	2320      	movs	r3, #32
 80010ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f2:	4b7c      	ldr	r3, [pc, #496]	@ (80012e4 <read_pwm+0x830>)
 80010f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001102:	4619      	mov	r1, r3
 8001104:	4875      	ldr	r0, [pc, #468]	@ (80012dc <read_pwm+0x828>)
 8001106:	f000 ffa7 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH7_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 800110a:	e22e      	b.n	800156a <read_pwm+0xab6>
						read_7.end = htim1.Instance->CNT;
 800110c:	4b70      	ldr	r3, [pc, #448]	@ (80012d0 <read_pwm+0x81c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	4a73      	ldr	r2, [pc, #460]	@ (80012e0 <read_pwm+0x82c>)
 8001114:	6053      	str	r3, [r2, #4]
						if( read_7.start > read_7.end)
 8001116:	4b72      	ldr	r3, [pc, #456]	@ (80012e0 <read_pwm+0x82c>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b71      	ldr	r3, [pc, #452]	@ (80012e0 <read_pwm+0x82c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d90a      	bls.n	8001138 <read_pwm+0x684>
							read_7.out = 65535 - read_7.start + read_7.end;
 8001122:	4b6f      	ldr	r3, [pc, #444]	@ (80012e0 <read_pwm+0x82c>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4b6e      	ldr	r3, [pc, #440]	@ (80012e0 <read_pwm+0x82c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001130:	33ff      	adds	r3, #255	@ 0xff
 8001132:	4a6b      	ldr	r2, [pc, #428]	@ (80012e0 <read_pwm+0x82c>)
 8001134:	6093      	str	r3, [r2, #8]
 8001136:	e006      	b.n	8001146 <read_pwm+0x692>
							read_7.out = read_7.end - read_7.start;
 8001138:	4b69      	ldr	r3, [pc, #420]	@ (80012e0 <read_pwm+0x82c>)
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4b68      	ldr	r3, [pc, #416]	@ (80012e0 <read_pwm+0x82c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a67      	ldr	r2, [pc, #412]	@ (80012e0 <read_pwm+0x82c>)
 8001144:	6093      	str	r3, [r2, #8]
						if(read_7.out > 13500)
 8001146:	4b66      	ldr	r3, [pc, #408]	@ (80012e0 <read_pwm+0x82c>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 800114e:	4293      	cmp	r3, r2
 8001150:	d904      	bls.n	800115c <read_pwm+0x6a8>
							read_7.out = 13500;
 8001152:	4b63      	ldr	r3, [pc, #396]	@ (80012e0 <read_pwm+0x82c>)
 8001154:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	e009      	b.n	8001170 <read_pwm+0x6bc>
						else if(read_7.out < 7140)
 800115c:	4b60      	ldr	r3, [pc, #384]	@ (80012e0 <read_pwm+0x82c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f641 32e3 	movw	r2, #7139	@ 0x1be3
 8001164:	4293      	cmp	r3, r2
 8001166:	d803      	bhi.n	8001170 <read_pwm+0x6bc>
							read_7.out = 7140;
 8001168:	4b5d      	ldr	r3, [pc, #372]	@ (80012e0 <read_pwm+0x82c>)
 800116a:	f641 32e4 	movw	r2, #7140	@ 0x1be4
 800116e:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH7_Pin;
 8001170:	2320      	movs	r3, #32
 8001172:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001176:	4b58      	ldr	r3, [pc, #352]	@ (80012d8 <read_pwm+0x824>)
 8001178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001186:	4619      	mov	r1, r3
 8001188:	4854      	ldr	r0, [pc, #336]	@ (80012dc <read_pwm+0x828>)
 800118a:	f000 ff65 	bl	8002058 <HAL_GPIO_Init>
					break;
 800118e:	e1ec      	b.n	800156a <read_pwm+0xab6>
			case 8:
					if(HAL_GPIO_ReadPin(CH8_GPIO_Port, CH8_Pin)==1)
 8001190:	2140      	movs	r1, #64	@ 0x40
 8001192:	4852      	ldr	r0, [pc, #328]	@ (80012dc <read_pwm+0x828>)
 8001194:	f001 f8f4 	bl	8002380 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d112      	bne.n	80011c4 <read_pwm+0x710>
					{
						read_8.start = htim1.Instance->CNT;
 800119e:	4b4c      	ldr	r3, [pc, #304]	@ (80012d0 <read_pwm+0x81c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a4:	4a50      	ldr	r2, [pc, #320]	@ (80012e8 <read_pwm+0x834>)
 80011a6:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH8_Pin;
 80011a8:	2340      	movs	r3, #64	@ 0x40
 80011aa:	67bb      	str	r3, [r7, #120]	@ 0x78
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ac:	4b4d      	ldr	r3, [pc, #308]	@ (80012e4 <read_pwm+0x830>)
 80011ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80011ba:	4619      	mov	r1, r3
 80011bc:	4847      	ldr	r0, [pc, #284]	@ (80012dc <read_pwm+0x828>)
 80011be:	f000 ff4b 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH8_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80011c2:	e1d2      	b.n	800156a <read_pwm+0xab6>
						read_8.end = htim1.Instance->CNT;
 80011c4:	4b42      	ldr	r3, [pc, #264]	@ (80012d0 <read_pwm+0x81c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	4a47      	ldr	r2, [pc, #284]	@ (80012e8 <read_pwm+0x834>)
 80011cc:	6053      	str	r3, [r2, #4]
						if( read_8.start > read_8.end)
 80011ce:	4b46      	ldr	r3, [pc, #280]	@ (80012e8 <read_pwm+0x834>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b45      	ldr	r3, [pc, #276]	@ (80012e8 <read_pwm+0x834>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d90a      	bls.n	80011f0 <read_pwm+0x73c>
							read_8.out = 65535 - read_8.start + read_8.end;
 80011da:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <read_pwm+0x834>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4b42      	ldr	r3, [pc, #264]	@ (80012e8 <read_pwm+0x834>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e8:	33ff      	adds	r3, #255	@ 0xff
 80011ea:	4a3f      	ldr	r2, [pc, #252]	@ (80012e8 <read_pwm+0x834>)
 80011ec:	6093      	str	r3, [r2, #8]
 80011ee:	e006      	b.n	80011fe <read_pwm+0x74a>
							read_8.out = read_8.end - read_8.start;
 80011f0:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <read_pwm+0x834>)
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <read_pwm+0x834>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	4a3b      	ldr	r2, [pc, #236]	@ (80012e8 <read_pwm+0x834>)
 80011fc:	6093      	str	r3, [r2, #8]
						if(read_8.out > 12500)
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <read_pwm+0x834>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001206:	4293      	cmp	r3, r2
 8001208:	d904      	bls.n	8001214 <read_pwm+0x760>
							read_8.out = 12500;
 800120a:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <read_pwm+0x834>)
 800120c:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e009      	b.n	8001228 <read_pwm+0x774>
						else if(read_8.out < 6160)
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <read_pwm+0x834>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f641 020f 	movw	r2, #6159	@ 0x180f
 800121c:	4293      	cmp	r3, r2
 800121e:	d803      	bhi.n	8001228 <read_pwm+0x774>
							read_8.out = 6160;
 8001220:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <read_pwm+0x834>)
 8001222:	f641 0210 	movw	r2, #6160	@ 0x1810
 8001226:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH8_Pin;
 8001228:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800122c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001230:	2240      	movs	r2, #64	@ 0x40
 8001232:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001234:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001238:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800123c:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <read_pwm+0x824>)
 800123e:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001244:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001250:	4619      	mov	r1, r3
 8001252:	4822      	ldr	r0, [pc, #136]	@ (80012dc <read_pwm+0x828>)
 8001254:	f000 ff00 	bl	8002058 <HAL_GPIO_Init>
					break;
 8001258:	e187      	b.n	800156a <read_pwm+0xab6>
			case 9:
					if(HAL_GPIO_ReadPin(CH9_GPIO_Port, CH9_Pin)==1)
 800125a:	2180      	movs	r1, #128	@ 0x80
 800125c:	481f      	ldr	r0, [pc, #124]	@ (80012dc <read_pwm+0x828>)
 800125e:	f001 f88f 	bl	8002380 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d11d      	bne.n	80012a4 <read_pwm+0x7f0>
					{
						read_9.start = htim1.Instance->CNT;
 8001268:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <read_pwm+0x81c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	4a1f      	ldr	r2, [pc, #124]	@ (80012ec <read_pwm+0x838>)
 8001270:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH9_Pin;
 8001272:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001276:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800127a:	2280      	movs	r2, #128	@ 0x80
 800127c:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001282:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001286:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <read_pwm+0x830>)
 8001288:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800128e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800129a:	4619      	mov	r1, r3
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <read_pwm+0x828>)
 800129e:	f000 fedb 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH9_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80012a2:	e162      	b.n	800156a <read_pwm+0xab6>
						read_9.end = htim1.Instance->CNT;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <read_pwm+0x81c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <read_pwm+0x838>)
 80012ac:	6053      	str	r3, [r2, #4]
						if( read_9.start > read_9.end)
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <read_pwm+0x838>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <read_pwm+0x838>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d91a      	bls.n	80012f0 <read_pwm+0x83c>
							read_9.out = 65535 - read_9.start + read_9.end;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <read_pwm+0x838>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <read_pwm+0x838>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80012c8:	33ff      	adds	r3, #255	@ 0xff
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <read_pwm+0x838>)
 80012cc:	6093      	str	r3, [r2, #8]
 80012ce:	e016      	b.n	80012fe <read_pwm+0x84a>
 80012d0:	2000002c 	.word	0x2000002c
 80012d4:	2000020c 	.word	0x2000020c
 80012d8:	10110000 	.word	0x10110000
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	2000021c 	.word	0x2000021c
 80012e4:	10210000 	.word	0x10210000
 80012e8:	2000022c 	.word	0x2000022c
 80012ec:	2000023c 	.word	0x2000023c
							read_9.out = read_9.end - read_9.start;
 80012f0:	4ba0      	ldr	r3, [pc, #640]	@ (8001574 <read_pwm+0xac0>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4b9f      	ldr	r3, [pc, #636]	@ (8001574 <read_pwm+0xac0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	4a9e      	ldr	r2, [pc, #632]	@ (8001574 <read_pwm+0xac0>)
 80012fc:	6093      	str	r3, [r2, #8]
						if(read_9.out > 12500)
 80012fe:	4b9d      	ldr	r3, [pc, #628]	@ (8001574 <read_pwm+0xac0>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001306:	4293      	cmp	r3, r2
 8001308:	d904      	bls.n	8001314 <read_pwm+0x860>
							read_9.out = 12500;
 800130a:	4b9a      	ldr	r3, [pc, #616]	@ (8001574 <read_pwm+0xac0>)
 800130c:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	e009      	b.n	8001328 <read_pwm+0x874>
						else if(read_9.out < 6200)
 8001314:	4b97      	ldr	r3, [pc, #604]	@ (8001574 <read_pwm+0xac0>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f641 0237 	movw	r2, #6199	@ 0x1837
 800131c:	4293      	cmp	r3, r2
 800131e:	d803      	bhi.n	8001328 <read_pwm+0x874>
							read_9.out = 26500;
 8001320:	4b94      	ldr	r3, [pc, #592]	@ (8001574 <read_pwm+0xac0>)
 8001322:	f246 7284 	movw	r2, #26500	@ 0x6784
 8001326:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH9_Pin;
 8001328:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800132c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001334:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001338:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800133c:	4a8e      	ldr	r2, [pc, #568]	@ (8001578 <read_pwm+0xac4>)
 800133e:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001344:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001350:	4619      	mov	r1, r3
 8001352:	488a      	ldr	r0, [pc, #552]	@ (800157c <read_pwm+0xac8>)
 8001354:	f000 fe80 	bl	8002058 <HAL_GPIO_Init>
					break;
 8001358:	e107      	b.n	800156a <read_pwm+0xab6>
			case 10:
					if(HAL_GPIO_ReadPin(CH10_GPIO_Port, CH10_Pin)==1)
 800135a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800135e:	4887      	ldr	r0, [pc, #540]	@ (800157c <read_pwm+0xac8>)
 8001360:	f001 f80e 	bl	8002380 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d11e      	bne.n	80013a8 <read_pwm+0x8f4>
					{
						read_10.start = htim1.Instance->CNT;
 800136a:	4b85      	ldr	r3, [pc, #532]	@ (8001580 <read_pwm+0xacc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	4a84      	ldr	r2, [pc, #528]	@ (8001584 <read_pwm+0xad0>)
 8001372:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH10_Pin;
 8001374:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001378:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800137c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001380:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001382:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001386:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800138a:	4a7f      	ldr	r2, [pc, #508]	@ (8001588 <read_pwm+0xad4>)
 800138c:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001392:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800139e:	4619      	mov	r1, r3
 80013a0:	4876      	ldr	r0, [pc, #472]	@ (800157c <read_pwm+0xac8>)
 80013a2:	f000 fe59 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH10_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80013a6:	e0e0      	b.n	800156a <read_pwm+0xab6>
						read_10.end = htim1.Instance->CNT;
 80013a8:	4b75      	ldr	r3, [pc, #468]	@ (8001580 <read_pwm+0xacc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	4a75      	ldr	r2, [pc, #468]	@ (8001584 <read_pwm+0xad0>)
 80013b0:	6053      	str	r3, [r2, #4]
						if( read_10.start > read_10.end)
 80013b2:	4b74      	ldr	r3, [pc, #464]	@ (8001584 <read_pwm+0xad0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b73      	ldr	r3, [pc, #460]	@ (8001584 <read_pwm+0xad0>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d90a      	bls.n	80013d4 <read_pwm+0x920>
							read_10.out = 65535 - read_10.start + read_10.end;
 80013be:	4b71      	ldr	r3, [pc, #452]	@ (8001584 <read_pwm+0xad0>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4b70      	ldr	r3, [pc, #448]	@ (8001584 <read_pwm+0xad0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80013cc:	33ff      	adds	r3, #255	@ 0xff
 80013ce:	4a6d      	ldr	r2, [pc, #436]	@ (8001584 <read_pwm+0xad0>)
 80013d0:	6093      	str	r3, [r2, #8]
 80013d2:	e006      	b.n	80013e2 <read_pwm+0x92e>
							read_10.out = read_10.end - read_10.start;
 80013d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001584 <read_pwm+0xad0>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001584 <read_pwm+0xad0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	4a69      	ldr	r2, [pc, #420]	@ (8001584 <read_pwm+0xad0>)
 80013e0:	6093      	str	r3, [r2, #8]
						if(read_10.out > 60000)
 80013e2:	4b68      	ldr	r3, [pc, #416]	@ (8001584 <read_pwm+0xad0>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d904      	bls.n	80013f8 <read_pwm+0x944>
							read_10.out = 60000;
 80013ee:	4b65      	ldr	r3, [pc, #404]	@ (8001584 <read_pwm+0xad0>)
 80013f0:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	e01a      	b.n	800142e <read_pwm+0x97a>
						else if(read_10.out < 6200)
 80013f8:	4b62      	ldr	r3, [pc, #392]	@ (8001584 <read_pwm+0xad0>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f641 0237 	movw	r2, #6199	@ 0x1837
 8001400:	4293      	cmp	r3, r2
 8001402:	d804      	bhi.n	800140e <read_pwm+0x95a>
							read_10.out = 6200;
 8001404:	4b5f      	ldr	r3, [pc, #380]	@ (8001584 <read_pwm+0xad0>)
 8001406:	f641 0238 	movw	r2, #6200	@ 0x1838
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e00f      	b.n	800142e <read_pwm+0x97a>
						else if(41000 <= read_10.out && read_10.out <= 42000)
 800140e:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <read_pwm+0xad0>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f24a 0227 	movw	r2, #40999	@ 0xa027
 8001416:	4293      	cmp	r3, r2
 8001418:	d909      	bls.n	800142e <read_pwm+0x97a>
 800141a:	4b5a      	ldr	r3, [pc, #360]	@ (8001584 <read_pwm+0xad0>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001422:	4293      	cmp	r3, r2
 8001424:	d803      	bhi.n	800142e <read_pwm+0x97a>
							read_10.out = 42100;
 8001426:	4b57      	ldr	r3, [pc, #348]	@ (8001584 <read_pwm+0xad0>)
 8001428:	f24a 4274 	movw	r2, #42100	@ 0xa474
 800142c:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH10_Pin;
 800142e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001432:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001436:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143a:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001440:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001444:	4a4c      	ldr	r2, [pc, #304]	@ (8001578 <read_pwm+0xac4>)
 8001446:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800144c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001458:	4619      	mov	r1, r3
 800145a:	4848      	ldr	r0, [pc, #288]	@ (800157c <read_pwm+0xac8>)
 800145c:	f000 fdfc 	bl	8002058 <HAL_GPIO_Init>
					break;
 8001460:	e083      	b.n	800156a <read_pwm+0xab6>
			case 11:
					if(HAL_GPIO_ReadPin(CH11_GPIO_Port, CH11_Pin)==1)
 8001462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001466:	4845      	ldr	r0, [pc, #276]	@ (800157c <read_pwm+0xac8>)
 8001468:	f000 ff8a 	bl	8002380 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d11e      	bne.n	80014b0 <read_pwm+0x9fc>
					{
						read_11.start = htim1.Instance->CNT;
 8001472:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <read_pwm+0xacc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	4a44      	ldr	r2, [pc, #272]	@ (800158c <read_pwm+0xad8>)
 800147a:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH11_Pin;
 800147c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001480:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001484:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001488:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800148a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800148e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001492:	4a3d      	ldr	r2, [pc, #244]	@ (8001588 <read_pwm+0xad4>)
 8001494:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800149a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4834      	ldr	r0, [pc, #208]	@ (800157c <read_pwm+0xac8>)
 80014aa:	f000 fdd5 	bl	8002058 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH11_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80014ae:	e05b      	b.n	8001568 <read_pwm+0xab4>
						read_11.end = htim1.Instance->CNT;
 80014b0:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <read_pwm+0xacc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	4a35      	ldr	r2, [pc, #212]	@ (800158c <read_pwm+0xad8>)
 80014b8:	6053      	str	r3, [r2, #4]
						if( read_11.start > read_11.end)
 80014ba:	4b34      	ldr	r3, [pc, #208]	@ (800158c <read_pwm+0xad8>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b33      	ldr	r3, [pc, #204]	@ (800158c <read_pwm+0xad8>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d90a      	bls.n	80014dc <read_pwm+0xa28>
							read_11.out = 65535 - read_11.start + read_11.end;
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <read_pwm+0xad8>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4b30      	ldr	r3, [pc, #192]	@ (800158c <read_pwm+0xad8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80014d4:	33ff      	adds	r3, #255	@ 0xff
 80014d6:	4a2d      	ldr	r2, [pc, #180]	@ (800158c <read_pwm+0xad8>)
 80014d8:	6093      	str	r3, [r2, #8]
 80014da:	e006      	b.n	80014ea <read_pwm+0xa36>
							read_11.out = read_11.end - read_11.start;
 80014dc:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <read_pwm+0xad8>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <read_pwm+0xad8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	4a29      	ldr	r2, [pc, #164]	@ (800158c <read_pwm+0xad8>)
 80014e8:	6093      	str	r3, [r2, #8]
						if(read_11.out > 60000)
 80014ea:	4b28      	ldr	r3, [pc, #160]	@ (800158c <read_pwm+0xad8>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d904      	bls.n	8001500 <read_pwm+0xa4c>
							read_11.out = 60000;
 80014f6:	4b25      	ldr	r3, [pc, #148]	@ (800158c <read_pwm+0xad8>)
 80014f8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	e01a      	b.n	8001536 <read_pwm+0xa82>
						else if(read_11.out < 6100)
 8001500:	4b22      	ldr	r3, [pc, #136]	@ (800158c <read_pwm+0xad8>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f241 72d3 	movw	r2, #6099	@ 0x17d3
 8001508:	4293      	cmp	r3, r2
 800150a:	d804      	bhi.n	8001516 <read_pwm+0xa62>
							read_11.out = 6100;
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <read_pwm+0xad8>)
 800150e:	f241 72d4 	movw	r2, #6100	@ 0x17d4
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e00f      	b.n	8001536 <read_pwm+0xa82>
						else if(41000 <= read_11.out && read_11.out <= 42000)
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <read_pwm+0xad8>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f24a 0227 	movw	r2, #40999	@ 0xa027
 800151e:	4293      	cmp	r3, r2
 8001520:	d909      	bls.n	8001536 <read_pwm+0xa82>
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <read_pwm+0xad8>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f24a 4210 	movw	r2, #42000	@ 0xa410
 800152a:	4293      	cmp	r3, r2
 800152c:	d803      	bhi.n	8001536 <read_pwm+0xa82>
							read_11.out = 42100;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <read_pwm+0xad8>)
 8001530:	f24a 4274 	movw	r2, #42100	@ 0xa474
 8001534:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH11_Pin;
 8001536:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800153a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800153e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001542:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001544:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001548:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800154c:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <read_pwm+0xac4>)
 800154e:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001554:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <read_pwm+0xac8>)
 8001564:	f000 fd78 	bl	8002058 <HAL_GPIO_Init>
					break;
 8001568:	bf00      	nop
		}
	}
 800156a:	bf00      	nop
 800156c:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000023c 	.word	0x2000023c
 8001578:	10110000 	.word	0x10110000
 800157c:	40010c00 	.word	0x40010c00
 8001580:	2000002c 	.word	0x2000002c
 8001584:	2000024c 	.word	0x2000024c
 8001588:	10210000 	.word	0x10210000
 800158c:	2000025c 	.word	0x2000025c

08001590 <convert>:

void convert(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af02      	add	r7, sp, #8
	if(read_1.out > 43200)
 8001596:	4b87      	ldr	r3, [pc, #540]	@ (80017b4 <convert+0x224>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 800159e:	4293      	cmp	r3, r2
 80015a0:	d917      	bls.n	80015d2 <convert+0x42>
	{
		read1_out = map(read_1.out,43200,61200,28700,0);
 80015a2:	4b84      	ldr	r3, [pc, #528]	@ (80017b4 <convert+0x224>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	b298      	uxth	r0, r3
 80015a8:	2300      	movs	r3, #0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	f247 031c 	movw	r3, #28700	@ 0x701c
 80015b0:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80015b4:	f64a 01c0 	movw	r1, #43200	@ 0xa8c0
 80015b8:	f7ff f9f6 	bl	80009a8 <map>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b7d      	ldr	r3, [pc, #500]	@ (80017b8 <convert+0x228>)
 80015c2:	601a      	str	r2, [r3, #0]
		val = 1;
 80015c4:	4b7d      	ldr	r3, [pc, #500]	@ (80017bc <convert+0x22c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
		change = 1;
 80015ca:	4b7d      	ldr	r3, [pc, #500]	@ (80017c0 <convert+0x230>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	e021      	b.n	8001616 <convert+0x86>

	}
	else if(read_1.out < 43200)
 80015d2:	4b78      	ldr	r3, [pc, #480]	@ (80017b4 <convert+0x224>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f64a 02bf 	movw	r2, #43199	@ 0xa8bf
 80015da:	4293      	cmp	r3, r2
 80015dc:	d817      	bhi.n	800160e <convert+0x7e>
	{
		read1_out = map(read_1.out,7000,43200,0,28700);
 80015de:	4b75      	ldr	r3, [pc, #468]	@ (80017b4 <convert+0x224>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	b298      	uxth	r0, r3
 80015e4:	f247 031c 	movw	r3, #28700	@ 0x701c
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 80015f0:	f641 3158 	movw	r1, #7000	@ 0x1b58
 80015f4:	f7ff f9d8 	bl	80009a8 <map>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b6e      	ldr	r3, [pc, #440]	@ (80017b8 <convert+0x228>)
 80015fe:	601a      	str	r2, [r3, #0]
		val = 2;
 8001600:	4b6e      	ldr	r3, [pc, #440]	@ (80017bc <convert+0x22c>)
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
		change = 2;
 8001606:	4b6e      	ldr	r3, [pc, #440]	@ (80017c0 <convert+0x230>)
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e003      	b.n	8001616 <convert+0x86>
	}
	else
	{
		read1_out = 28700;
 800160e:	4b6a      	ldr	r3, [pc, #424]	@ (80017b8 <convert+0x228>)
 8001610:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001614:	601a      	str	r2, [r3, #0]
	}

	//ch2 tien lui banh
	if(read_2.out > 43250)
 8001616:	4b6b      	ldr	r3, [pc, #428]	@ (80017c4 <convert+0x234>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 800161e:	4293      	cmp	r3, r2
 8001620:	d917      	bls.n	8001652 <convert+0xc2>
	{
		read2_out = map(read_2.out,43250,61200,28700,0);
 8001622:	4b68      	ldr	r3, [pc, #416]	@ (80017c4 <convert+0x234>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	b298      	uxth	r0, r3
 8001628:	2300      	movs	r3, #0
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001630:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001634:	f64a 01f2 	movw	r1, #43250	@ 0xa8f2
 8001638:	f7ff f9b6 	bl	80009a8 <map>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b61      	ldr	r3, [pc, #388]	@ (80017c8 <convert+0x238>)
 8001642:	601a      	str	r2, [r3, #0]
		val = 3;
 8001644:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <convert+0x22c>)
 8001646:	2203      	movs	r2, #3
 8001648:	601a      	str	r2, [r3, #0]
		change = 3;
 800164a:	4b5d      	ldr	r3, [pc, #372]	@ (80017c0 <convert+0x230>)
 800164c:	2203      	movs	r2, #3
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e021      	b.n	8001696 <convert+0x106>

	}
	else if((read_2.out < 43250))//||((read1_out>read2_out)&&(read_2.out < 43250))
 8001652:	4b5c      	ldr	r3, [pc, #368]	@ (80017c4 <convert+0x234>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f64a 02f1 	movw	r2, #43249	@ 0xa8f1
 800165a:	4293      	cmp	r3, r2
 800165c:	d817      	bhi.n	800168e <convert+0xfe>
	{
		read2_out = map(read_2.out,7000,43250,0,28700);
 800165e:	4b59      	ldr	r3, [pc, #356]	@ (80017c4 <convert+0x234>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	b298      	uxth	r0, r3
 8001664:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8001670:	f641 3158 	movw	r1, #7000	@ 0x1b58
 8001674:	f7ff f998 	bl	80009a8 <map>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4b52      	ldr	r3, [pc, #328]	@ (80017c8 <convert+0x238>)
 800167e:	601a      	str	r2, [r3, #0]
		val = 4;
 8001680:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <convert+0x22c>)
 8001682:	2204      	movs	r2, #4
 8001684:	601a      	str	r2, [r3, #0]
		change = 4;
 8001686:	4b4e      	ldr	r3, [pc, #312]	@ (80017c0 <convert+0x230>)
 8001688:	2204      	movs	r2, #4
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e003      	b.n	8001696 <convert+0x106>

	}
	else
	{
		read2_out = 28700;
 800168e:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <convert+0x238>)
 8001690:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001694:	601a      	str	r2, [r3, #0]
	}

	//////// JOYSTIK GIUA
	if(read_1.out != 43200 && read_2.out != 43250)
 8001696:	4b47      	ldr	r3, [pc, #284]	@ (80017b4 <convert+0x224>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 800169e:	4293      	cmp	r3, r2
 80016a0:	d009      	beq.n	80016b6 <convert+0x126>
 80016a2:	4b48      	ldr	r3, [pc, #288]	@ (80017c4 <convert+0x234>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d003      	beq.n	80016b6 <convert+0x126>
	{
		limit_value = 1;
 80016ae:	4b47      	ldr	r3, [pc, #284]	@ (80017cc <convert+0x23c>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e002      	b.n	80016bc <convert+0x12c>
	}
	else
	{
		limit_value = 0;
 80016b6:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <convert+0x23c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
	}
	if(limit_value == 1)
 80016bc:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <convert+0x23c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d173      	bne.n	80017ac <convert+0x21c>
	{
		if((val ==4)&&(read_1.out>read_2.out)&&(read_1.out<55000))//(read_1.out > 43200)
 80016c4:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <convert+0x22c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d10f      	bne.n	80016ec <convert+0x15c>
 80016cc:	4b39      	ldr	r3, [pc, #228]	@ (80017b4 <convert+0x224>)
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	4b3c      	ldr	r3, [pc, #240]	@ (80017c4 <convert+0x234>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d909      	bls.n	80016ec <convert+0x15c>
 80016d8:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <convert+0x224>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d803      	bhi.n	80016ec <convert+0x15c>
		{
			val =4;
 80016e4:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <convert+0x22c>)
 80016e6:	2204      	movs	r2, #4
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e01f      	b.n	800172c <convert+0x19c>
		}
		else if((read_1.out < read_2.out)&&(read_1.out<10000))//(read_1.out < 43200)
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <convert+0x224>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <convert+0x234>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d209      	bcs.n	800170c <convert+0x17c>
 80016f8:	4b2e      	ldr	r3, [pc, #184]	@ (80017b4 <convert+0x224>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001700:	4293      	cmp	r3, r2
 8001702:	d803      	bhi.n	800170c <convert+0x17c>
		{
			val = 2;
 8001704:	4b2d      	ldr	r3, [pc, #180]	@ (80017bc <convert+0x22c>)
 8001706:	2202      	movs	r2, #2
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e00f      	b.n	800172c <convert+0x19c>
		}
		else if((read_1.out>read_2.out)&&(change = 1))//(read_1.out > 43200)
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <convert+0x224>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <convert+0x234>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	429a      	cmp	r2, r3
 8001716:	d906      	bls.n	8001726 <convert+0x196>
 8001718:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <convert+0x230>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]
		{
			val = 1;
 800171e:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <convert+0x22c>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e002      	b.n	800172c <convert+0x19c>
		}
		else
		{
			val=3;
 8001726:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <convert+0x22c>)
 8001728:	2203      	movs	r2, #3
 800172a:	601a      	str	r2, [r3, #0]
		{
			read2_out = 28700;
			val = 1;
		}
		*/
		if(read_1.out == 7000 && read_2.out==7000)
 800172c:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <convert+0x224>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001734:	4293      	cmp	r3, r2
 8001736:	d109      	bne.n	800174c <convert+0x1bc>
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <convert+0x234>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001740:	4293      	cmp	r3, r2
 8001742:	d103      	bne.n	800174c <convert+0x1bc>
		{
			val =17;
 8001744:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <convert+0x22c>)
 8001746:	2211      	movs	r2, #17
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e02f      	b.n	80017ac <convert+0x21c>
		}
		else if(read_1.out == 61200 && read_2.out == 7000)
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <convert+0x224>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001754:	4293      	cmp	r3, r2
 8001756:	d109      	bne.n	800176c <convert+0x1dc>
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <convert+0x234>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001760:	4293      	cmp	r3, r2
 8001762:	d103      	bne.n	800176c <convert+0x1dc>
		{
			val = 18;
 8001764:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <convert+0x22c>)
 8001766:	2212      	movs	r2, #18
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e01f      	b.n	80017ac <convert+0x21c>
		}
		else if (read_1.out == 7000 && read_2.out ==61200)
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <convert+0x224>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001774:	4293      	cmp	r3, r2
 8001776:	d109      	bne.n	800178c <convert+0x1fc>
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <convert+0x234>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001780:	4293      	cmp	r3, r2
 8001782:	d103      	bne.n	800178c <convert+0x1fc>
		{
			val = 19;
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <convert+0x22c>)
 8001786:	2213      	movs	r2, #19
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e00f      	b.n	80017ac <convert+0x21c>
		}
		else if (read_1.out == 61200 && read_2.out ==61200)
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <convert+0x224>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001794:	4293      	cmp	r3, r2
 8001796:	d109      	bne.n	80017ac <convert+0x21c>
 8001798:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <convert+0x234>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d103      	bne.n	80017ac <convert+0x21c>
		{
			val = 20;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <convert+0x22c>)
 80017a6:	2214      	movs	r2, #20
 80017a8:	601a      	str	r2, [r3, #0]
		}
	}
		//////////////////++++++end+++++/////////////////

}
 80017aa:	e7ff      	b.n	80017ac <convert+0x21c>
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001bc 	.word	0x200001bc
 80017b8:	2000014c 	.word	0x2000014c
 80017bc:	20000154 	.word	0x20000154
 80017c0:	20000160 	.word	0x20000160
 80017c4:	200001cc 	.word	0x200001cc
 80017c8:	20000150 	.word	0x20000150
 80017cc:	20000158 	.word	0x20000158

080017d0 <control>:
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
	}
}

void control(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	if(read_1.out>8000&&read_1.out<10000&&read_2.out>28100&&read_2.out<29200)
 80017d4:	4b7a      	ldr	r3, [pc, #488]	@ (80019c0 <control+0x1f0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80017dc:	d95b      	bls.n	8001896 <control+0xc6>
 80017de:	4b78      	ldr	r3, [pc, #480]	@ (80019c0 <control+0x1f0>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d855      	bhi.n	8001896 <control+0xc6>
 80017ea:	4b76      	ldr	r3, [pc, #472]	@ (80019c4 <control+0x1f4>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f646 52c4 	movw	r2, #28100	@ 0x6dc4
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d94f      	bls.n	8001896 <control+0xc6>
 80017f6:	4b73      	ldr	r3, [pc, #460]	@ (80019c4 <control+0x1f4>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f247 220f 	movw	r2, #29199	@ 0x720f
 80017fe:	4293      	cmp	r3, r2
 8001800:	d849      	bhi.n	8001896 <control+0xc6>
	{

		run =0;
 8001802:	4b71      	ldr	r3, [pc, #452]	@ (80019c8 <control+0x1f8>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	486f      	ldr	r0, [pc, #444]	@ (80019cc <control+0x1fc>)
 800180e:	f000 fdce 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001818:	486d      	ldr	r0, [pc, #436]	@ (80019d0 <control+0x200>)
 800181a:	f000 fdc8 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001824:	486a      	ldr	r0, [pc, #424]	@ (80019d0 <control+0x200>)
 8001826:	f000 fdc2 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001830:	4867      	ldr	r0, [pc, #412]	@ (80019d0 <control+0x200>)
 8001832:	f000 fdbc 	bl	80023ae <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800183c:	4863      	ldr	r0, [pc, #396]	@ (80019cc <control+0x1fc>)
 800183e:	f000 fdb6 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001848:	4861      	ldr	r0, [pc, #388]	@ (80019d0 <control+0x200>)
 800184a:	f000 fdb0 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001854:	485e      	ldr	r0, [pc, #376]	@ (80019d0 <control+0x200>)
 8001856:	f000 fdaa 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001860:	485b      	ldr	r0, [pc, #364]	@ (80019d0 <control+0x200>)
 8001862:	f000 fda4 	bl	80023ae <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2180      	movs	r1, #128	@ 0x80
 800186a:	4858      	ldr	r0, [pc, #352]	@ (80019cc <control+0x1fc>)
 800186c:	f000 fd9f 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001876:	4856      	ldr	r0, [pc, #344]	@ (80019d0 <control+0x200>)
 8001878:	f000 fd99 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001882:	4853      	ldr	r0, [pc, #332]	@ (80019d0 <control+0x200>)
 8001884:	f000 fd93 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800188e:	4850      	ldr	r0, [pc, #320]	@ (80019d0 <control+0x200>)
 8001890:	f000 fd8d 	bl	80023ae <HAL_GPIO_WritePin>
 8001894:	e092      	b.n	80019bc <control+0x1ec>
	}
	else
	{
		run =1;
 8001896:	4b4c      	ldr	r3, [pc, #304]	@ (80019c8 <control+0x1f8>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018a2:	484a      	ldr	r0, [pc, #296]	@ (80019cc <control+0x1fc>)
 80018a4:	f000 fd83 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ae:	4848      	ldr	r0, [pc, #288]	@ (80019d0 <control+0x200>)
 80018b0:	f000 fd7d 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ba:	4845      	ldr	r0, [pc, #276]	@ (80019d0 <control+0x200>)
 80018bc:	f000 fd77 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018c6:	4842      	ldr	r0, [pc, #264]	@ (80019d0 <control+0x200>)
 80018c8:	f000 fd71 	bl	80023ae <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2180      	movs	r1, #128	@ 0x80
 80018d0:	483e      	ldr	r0, [pc, #248]	@ (80019cc <control+0x1fc>)
 80018d2:	f000 fd6c 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018dc:	483c      	ldr	r0, [pc, #240]	@ (80019d0 <control+0x200>)
 80018de:	f000 fd66 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018e8:	4839      	ldr	r0, [pc, #228]	@ (80019d0 <control+0x200>)
 80018ea:	f000 fd60 	bl	80023ae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018f4:	4836      	ldr	r0, [pc, #216]	@ (80019d0 <control+0x200>)
 80018f6:	f000 fd5a 	bl	80023ae <HAL_GPIO_WritePin>

		switch (val)
 80018fa:	4b36      	ldr	r3, [pc, #216]	@ (80019d4 <control+0x204>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	2b03      	cmp	r3, #3
 8001902:	d85b      	bhi.n	80019bc <control+0x1ec>
 8001904:	a201      	add	r2, pc, #4	@ (adr r2, 800190c <control+0x13c>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	0800191d 	.word	0x0800191d
 8001910:	08001945 	.word	0x08001945
 8001914:	0800196d 	.word	0x0800196d
 8001918:	08001995 	.word	0x08001995
		{
			case 1:
					TIM3 -> CCR1 = read1_out; // DC TRAI
 800191c:	4a2e      	ldr	r2, [pc, #184]	@ (80019d8 <control+0x208>)
 800191e:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <control+0x20c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6353      	str	r3, [r2, #52]	@ 0x34
					TIM3 -> CCR2 = read1_out; // DC PHAI
 8001924:	4a2c      	ldr	r2, [pc, #176]	@ (80019d8 <control+0x208>)
 8001926:	4b2d      	ldr	r3, [pc, #180]	@ (80019dc <control+0x20c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6393      	str	r3, [r2, #56]	@ 0x38
					HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001932:	4826      	ldr	r0, [pc, #152]	@ (80019cc <control+0x1fc>)
 8001934:	f000 fd3b 	bl	80023ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
 8001938:	2201      	movs	r2, #1
 800193a:	2140      	movs	r1, #64	@ 0x40
 800193c:	4823      	ldr	r0, [pc, #140]	@ (80019cc <control+0x1fc>)
 800193e:	f000 fd36 	bl	80023ae <HAL_GPIO_WritePin>
					break;
 8001942:	e03b      	b.n	80019bc <control+0x1ec>
			case 2:
					TIM3 -> CCR1 = read1_out; // DC TRAI
 8001944:	4a24      	ldr	r2, [pc, #144]	@ (80019d8 <control+0x208>)
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <control+0x20c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6353      	str	r3, [r2, #52]	@ 0x34
					TIM3 -> CCR2 = read1_out; // DC PHAI
 800194c:	4a22      	ldr	r2, [pc, #136]	@ (80019d8 <control+0x208>)
 800194e:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <control+0x20c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6393      	str	r3, [r2, #56]	@ 0x38
					HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
 8001954:	2201      	movs	r2, #1
 8001956:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800195a:	481c      	ldr	r0, [pc, #112]	@ (80019cc <control+0x1fc>)
 800195c:	f000 fd27 	bl	80023ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2140      	movs	r1, #64	@ 0x40
 8001964:	4819      	ldr	r0, [pc, #100]	@ (80019cc <control+0x1fc>)
 8001966:	f000 fd22 	bl	80023ae <HAL_GPIO_WritePin>
					break;
 800196a:	e027      	b.n	80019bc <control+0x1ec>
			case 3:
					TIM3 -> CCR1 = read2_out; // DC TRAI
 800196c:	4a1a      	ldr	r2, [pc, #104]	@ (80019d8 <control+0x208>)
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <control+0x210>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6353      	str	r3, [r2, #52]	@ 0x34
					TIM3 -> CCR2 = read2_out; // DC PHAI
 8001974:	4a18      	ldr	r2, [pc, #96]	@ (80019d8 <control+0x208>)
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <control+0x210>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6393      	str	r3, [r2, #56]	@ 0x38
					HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001982:	4812      	ldr	r0, [pc, #72]	@ (80019cc <control+0x1fc>)
 8001984:	f000 fd13 	bl	80023ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
 8001988:	2201      	movs	r2, #1
 800198a:	2140      	movs	r1, #64	@ 0x40
 800198c:	480f      	ldr	r0, [pc, #60]	@ (80019cc <control+0x1fc>)
 800198e:	f000 fd0e 	bl	80023ae <HAL_GPIO_WritePin>
					break;
 8001992:	e013      	b.n	80019bc <control+0x1ec>
			case 4:
					TIM3 -> CCR1 = read2_out; // DC TRAI
 8001994:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <control+0x208>)
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <control+0x210>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6353      	str	r3, [r2, #52]	@ 0x34
					TIM3 -> CCR2 = read2_out; // DC PHAI
 800199c:	4a0e      	ldr	r2, [pc, #56]	@ (80019d8 <control+0x208>)
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <control+0x210>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6393      	str	r3, [r2, #56]	@ 0x38
					HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019aa:	4808      	ldr	r0, [pc, #32]	@ (80019cc <control+0x1fc>)
 80019ac:	f000 fcff 	bl	80023ae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2140      	movs	r1, #64	@ 0x40
 80019b4:	4805      	ldr	r0, [pc, #20]	@ (80019cc <control+0x1fc>)
 80019b6:	f000 fcfa 	bl	80023ae <HAL_GPIO_WritePin>
					break;
 80019ba:	bf00      	nop
		}
	}
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200001bc 	.word	0x200001bc
 80019c4:	200001cc 	.word	0x200001cc
 80019c8:	2000015c 	.word	0x2000015c
 80019cc:	40011000 	.word	0x40011000
 80019d0:	40011400 	.word	0x40011400
 80019d4:	20000154 	.word	0x20000154
 80019d8:	40000400 	.word	0x40000400
 80019dc:	2000014c 	.word	0x2000014c
 80019e0:	20000150 	.word	0x20000150

080019e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_MspInit+0x5c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <HAL_MspInit+0x5c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6193      	str	r3, [r2, #24]
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <HAL_MspInit+0x5c>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <HAL_MspInit+0x5c>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a0e      	ldr	r2, [pc, #56]	@ (8001a40 <HAL_MspInit+0x5c>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <HAL_MspInit+0x5c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_MspInit+0x60>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <HAL_MspInit+0x60>)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010000 	.word	0x40010000

08001a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x7c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d10c      	bne.n	8001a74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001a60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a72:	e022      	b.n	8001aba <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
}
 8001a96:	e010      	b.n	8001aba <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_TIM_Base_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10b      	bne.n	8001aba <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x80>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40012c00 	.word	0x40012c00
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40000400 	.word	0x40000400

08001ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aee:	d118      	bne.n	8001b22 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a27      	ldr	r2, [pc, #156]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b08:	230e      	movs	r3, #14
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2302      	movs	r3, #2
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0318 	add.w	r3, r7, #24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	481f      	ldr	r0, [pc, #124]	@ (8001b98 <HAL_TIM_MspPostInit+0xc8>)
 8001b1c:	f000 fa9c 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b20:	e034      	b.n	8001b8c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1d      	ldr	r2, [pc, #116]	@ (8001b9c <HAL_TIM_MspPostInit+0xcc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d12f      	bne.n	8001b8c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001b4a:	f043 0308 	orr.w	r3, r3, #8
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_TIM_MspPostInit+0xc4>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b5c:	23c0      	movs	r3, #192	@ 0xc0
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2302      	movs	r3, #2
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480a      	ldr	r0, [pc, #40]	@ (8001b98 <HAL_TIM_MspPostInit+0xc8>)
 8001b70:	f000 fa72 	bl	8002058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <HAL_TIM_MspPostInit+0xd0>)
 8001b88:	f000 fa66 	bl	8002058 <HAL_GPIO_Init>
}
 8001b8c:	bf00      	nop
 8001b8e:	3728      	adds	r7, #40	@ 0x28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40010c00 	.word	0x40010c00

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001c30 <HAL_UART_MspInit+0x8c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d131      	bne.n	8001c28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <HAL_UART_MspInit+0x90>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <HAL_UART_MspInit+0x90>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <HAL_UART_MspInit+0x90>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_UART_MspInit+0x90>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <HAL_UART_MspInit+0x90>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_UART_MspInit+0x90>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	@ (8001c38 <HAL_UART_MspInit+0x94>)
 8001c0a:	f000 fa25 	bl	8002058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <HAL_UART_MspInit+0x94>)
 8001c24:	f000 fa18 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40013800 	.word	0x40013800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010800 	.word	0x40010800

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <NMI_Handler+0x4>

08001c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <MemManage_Handler+0x4>

08001c54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 f8ba 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f000 fba1 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH5_Pin);
 8001ca6:	2008      	movs	r0, #8
 8001ca8:	f000 fb9a 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH6_Pin);
 8001cb4:	2010      	movs	r0, #16
 8001cb6:	f000 fb93 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH7_Pin);
 8001cc2:	2020      	movs	r0, #32
 8001cc4:	f000 fb8c 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH8_Pin);
 8001cc8:	2040      	movs	r0, #64	@ 0x40
 8001cca:	f000 fb89 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH9_Pin);
 8001cce:	2080      	movs	r0, #128	@ 0x80
 8001cd0:	f000 fb86 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH10_Pin);
 8001cd4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001cd8:	f000 fb82 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH11_Pin);
 8001cdc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ce0:	f000 fb7e 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 8001cec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cf0:	f000 fb76 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8001cf4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001cf8:	f000 fb72 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 8001cfc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001d00:	f000 fb6e 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS2_Pin);
 8001d04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d08:	f000 fb6a 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS3_Pin);
 8001d0c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d10:	f000 fb66 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS4_Pin);
 8001d14:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d18:	f000 fb62 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d2c:	f7ff fff8 	bl	8001d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d32:	490c      	ldr	r1, [pc, #48]	@ (8001d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d34:	4a0c      	ldr	r2, [pc, #48]	@ (8001d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d48:	4c09      	ldr	r4, [pc, #36]	@ (8001d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d56:	f001 feed 	bl	8003b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5a:	f7fe fabf 	bl	80002dc <main>
  bx lr
 8001d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d68:	08003bc8 	.word	0x08003bc8
  ldr r2, =_sbss
 8001d6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d70:	20000270 	.word	0x20000270

08001d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC1_2_IRQHandler>
	...

08001d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <HAL_Init+0x28>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <HAL_Init+0x28>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 f923 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fe26 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f93b 	bl	800203e <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 f903 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	@ (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	20000008 	.word	0x20000008

08001e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_IncTick+0x1c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a03      	ldr	r2, [pc, #12]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	2000026c 	.word	0x2000026c

08001e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	@ (8001e38 <HAL_GetTick+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	2000026c 	.word	0x2000026c

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4906      	ldr	r1, [pc, #24]	@ (8001ed4 <__NVIC_EnableIRQ+0x34>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff90 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff2d 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff42 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff90 	bl	8001f2c <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5f 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff35 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffa2 	bl	8001f90 <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b08b      	sub	sp, #44	@ 0x2c
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e179      	b.n	8002360 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800206c:	2201      	movs	r2, #1
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 8168 	bne.w	800235a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a96      	ldr	r2, [pc, #600]	@ (80022e8 <HAL_GPIO_Init+0x290>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d05e      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 8002094:	4a94      	ldr	r2, [pc, #592]	@ (80022e8 <HAL_GPIO_Init+0x290>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d875      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 800209a:	4a94      	ldr	r2, [pc, #592]	@ (80022ec <HAL_GPIO_Init+0x294>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d058      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020a0:	4a92      	ldr	r2, [pc, #584]	@ (80022ec <HAL_GPIO_Init+0x294>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d86f      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020a6:	4a92      	ldr	r2, [pc, #584]	@ (80022f0 <HAL_GPIO_Init+0x298>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d052      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020ac:	4a90      	ldr	r2, [pc, #576]	@ (80022f0 <HAL_GPIO_Init+0x298>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d869      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020b2:	4a90      	ldr	r2, [pc, #576]	@ (80022f4 <HAL_GPIO_Init+0x29c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04c      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020b8:	4a8e      	ldr	r2, [pc, #568]	@ (80022f4 <HAL_GPIO_Init+0x29c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d863      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020be:	4a8e      	ldr	r2, [pc, #568]	@ (80022f8 <HAL_GPIO_Init+0x2a0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d046      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
 80020c4:	4a8c      	ldr	r2, [pc, #560]	@ (80022f8 <HAL_GPIO_Init+0x2a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d85d      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d82a      	bhi.n	8002124 <HAL_GPIO_Init+0xcc>
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d859      	bhi.n	8002186 <HAL_GPIO_Init+0x12e>
 80020d2:	a201      	add	r2, pc, #4	@ (adr r2, 80020d8 <HAL_GPIO_Init+0x80>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	08002153 	.word	0x08002153
 80020dc:	0800212d 	.word	0x0800212d
 80020e0:	0800213f 	.word	0x0800213f
 80020e4:	08002181 	.word	0x08002181
 80020e8:	08002187 	.word	0x08002187
 80020ec:	08002187 	.word	0x08002187
 80020f0:	08002187 	.word	0x08002187
 80020f4:	08002187 	.word	0x08002187
 80020f8:	08002187 	.word	0x08002187
 80020fc:	08002187 	.word	0x08002187
 8002100:	08002187 	.word	0x08002187
 8002104:	08002187 	.word	0x08002187
 8002108:	08002187 	.word	0x08002187
 800210c:	08002187 	.word	0x08002187
 8002110:	08002187 	.word	0x08002187
 8002114:	08002187 	.word	0x08002187
 8002118:	08002187 	.word	0x08002187
 800211c:	08002135 	.word	0x08002135
 8002120:	08002149 	.word	0x08002149
 8002124:	4a75      	ldr	r2, [pc, #468]	@ (80022fc <HAL_GPIO_Init+0x2a4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212a:	e02c      	b.n	8002186 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e029      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	623b      	str	r3, [r7, #32]
          break;
 800213c:	e024      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	3308      	adds	r3, #8
 8002144:	623b      	str	r3, [r7, #32]
          break;
 8002146:	e01f      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	330c      	adds	r3, #12
 800214e:	623b      	str	r3, [r7, #32]
          break;
 8002150:	e01a      	b.n	8002188 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800215a:	2304      	movs	r3, #4
 800215c:	623b      	str	r3, [r7, #32]
          break;
 800215e:	e013      	b.n	8002188 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	611a      	str	r2, [r3, #16]
          break;
 8002172:	e009      	b.n	8002188 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002174:	2308      	movs	r3, #8
 8002176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	615a      	str	r2, [r3, #20]
          break;
 800217e:	e003      	b.n	8002188 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
          break;
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x130>
          break;
 8002186:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2bff      	cmp	r3, #255	@ 0xff
 800218c:	d801      	bhi.n	8002192 <HAL_GPIO_Init+0x13a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_Init+0x13e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2bff      	cmp	r3, #255	@ 0xff
 800219c:	d802      	bhi.n	80021a4 <HAL_GPIO_Init+0x14c>
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x152>
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	3b08      	subs	r3, #8
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	210f      	movs	r1, #15
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	401a      	ands	r2, r3
 80021bc:	6a39      	ldr	r1, [r7, #32]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80c1 	beq.w	800235a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d8:	4b49      	ldr	r3, [pc, #292]	@ (8002300 <HAL_GPIO_Init+0x2a8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a48      	ldr	r2, [pc, #288]	@ (8002300 <HAL_GPIO_Init+0x2a8>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b46      	ldr	r3, [pc, #280]	@ (8002300 <HAL_GPIO_Init+0x2a8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021f0:	4a44      	ldr	r2, [pc, #272]	@ (8002304 <HAL_GPIO_Init+0x2ac>)
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3c      	ldr	r2, [pc, #240]	@ (8002308 <HAL_GPIO_Init+0x2b0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d01f      	beq.n	800225c <HAL_GPIO_Init+0x204>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3b      	ldr	r2, [pc, #236]	@ (800230c <HAL_GPIO_Init+0x2b4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d019      	beq.n	8002258 <HAL_GPIO_Init+0x200>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3a      	ldr	r2, [pc, #232]	@ (8002310 <HAL_GPIO_Init+0x2b8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <HAL_GPIO_Init+0x1fc>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a39      	ldr	r2, [pc, #228]	@ (8002314 <HAL_GPIO_Init+0x2bc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00d      	beq.n	8002250 <HAL_GPIO_Init+0x1f8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a38      	ldr	r2, [pc, #224]	@ (8002318 <HAL_GPIO_Init+0x2c0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <HAL_GPIO_Init+0x1f4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a37      	ldr	r2, [pc, #220]	@ (800231c <HAL_GPIO_Init+0x2c4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_GPIO_Init+0x1f0>
 8002244:	2305      	movs	r3, #5
 8002246:	e00a      	b.n	800225e <HAL_GPIO_Init+0x206>
 8002248:	2306      	movs	r3, #6
 800224a:	e008      	b.n	800225e <HAL_GPIO_Init+0x206>
 800224c:	2304      	movs	r3, #4
 800224e:	e006      	b.n	800225e <HAL_GPIO_Init+0x206>
 8002250:	2303      	movs	r3, #3
 8002252:	e004      	b.n	800225e <HAL_GPIO_Init+0x206>
 8002254:	2302      	movs	r3, #2
 8002256:	e002      	b.n	800225e <HAL_GPIO_Init+0x206>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_GPIO_Init+0x206>
 800225c:	2300      	movs	r3, #0
 800225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002260:	f002 0203 	and.w	r2, r2, #3
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	4093      	lsls	r3, r2
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800226e:	4925      	ldr	r1, [pc, #148]	@ (8002304 <HAL_GPIO_Init+0x2ac>)
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d006      	beq.n	8002296 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002288:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4924      	ldr	r1, [pc, #144]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002296:	4b22      	ldr	r3, [pc, #136]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	43db      	mvns	r3, r3
 800229e:	4920      	ldr	r1, [pc, #128]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	491a      	ldr	r1, [pc, #104]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60cb      	str	r3, [r1, #12]
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022be:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4916      	ldr	r1, [pc, #88]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d025      	beq.n	8002324 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4910      	ldr	r1, [pc, #64]	@ (8002320 <HAL_GPIO_Init+0x2c8>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e025      	b.n	8002332 <HAL_GPIO_Init+0x2da>
 80022e6:	bf00      	nop
 80022e8:	10320000 	.word	0x10320000
 80022ec:	10310000 	.word	0x10310000
 80022f0:	10220000 	.word	0x10220000
 80022f4:	10210000 	.word	0x10210000
 80022f8:	10120000 	.word	0x10120000
 80022fc:	10110000 	.word	0x10110000
 8002300:	40021000 	.word	0x40021000
 8002304:	40010000 	.word	0x40010000
 8002308:	40010800 	.word	0x40010800
 800230c:	40010c00 	.word	0x40010c00
 8002310:	40011000 	.word	0x40011000
 8002314:	40011400 	.word	0x40011400
 8002318:	40011800 	.word	0x40011800
 800231c:	40011c00 	.word	0x40011c00
 8002320:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002324:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_GPIO_Init+0x324>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	43db      	mvns	r3, r3
 800232c:	4913      	ldr	r1, [pc, #76]	@ (800237c <HAL_GPIO_Init+0x324>)
 800232e:	4013      	ands	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800233e:	4b0f      	ldr	r3, [pc, #60]	@ (800237c <HAL_GPIO_Init+0x324>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	490e      	ldr	r1, [pc, #56]	@ (800237c <HAL_GPIO_Init+0x324>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
 800234a:	e006      	b.n	800235a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_GPIO_Init+0x324>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	43db      	mvns	r3, r3
 8002354:	4909      	ldr	r1, [pc, #36]	@ (800237c <HAL_GPIO_Init+0x324>)
 8002356:	4013      	ands	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	3301      	adds	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f47f ae7e 	bne.w	800206c <HAL_GPIO_Init+0x14>
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	372c      	adds	r7, #44	@ 0x2c
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e001      	b.n	80023a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]
 80023ba:	4613      	mov	r3, r2
 80023bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023be:	787b      	ldrb	r3, [r7, #1]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c4:	887a      	ldrh	r2, [r7, #2]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ca:	e003      	b.n	80023d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	041a      	lsls	r2, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	611a      	str	r2, [r3, #16]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ea:	4b08      	ldr	r3, [pc, #32]	@ (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd ff10 	bl	8000224 <HAL_GPIO_EXTI_Callback>
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e272      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8087 	beq.w	800253e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b92      	ldr	r3, [pc, #584]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00c      	beq.n	8002456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800243c:	4b8f      	ldr	r3, [pc, #572]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d112      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
 8002448:	4b8c      	ldr	r3, [pc, #560]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b89      	ldr	r3, [pc, #548]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d06c      	beq.n	800253c <HAL_RCC_OscConfig+0x12c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d168      	bne.n	800253c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e24c      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x76>
 8002478:	4b80      	ldr	r3, [pc, #512]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7f      	ldr	r2, [pc, #508]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b7b      	ldr	r3, [pc, #492]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7a      	ldr	r2, [pc, #488]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b78      	ldr	r3, [pc, #480]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0xbc>
 80024b2:	4b72      	ldr	r3, [pc, #456]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6f      	ldr	r3, [pc, #444]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024cc:	4b6b      	ldr	r3, [pc, #428]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b68      	ldr	r3, [pc, #416]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a67      	ldr	r2, [pc, #412]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fc9c 	bl	8001e28 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff fc98 	bl	8001e28 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	@ 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e200      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5d      	ldr	r3, [pc, #372]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe4>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fc88 	bl	8001e28 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff fc84 	bl	8001e28 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	@ 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1ec      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b53      	ldr	r3, [pc, #332]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x10c>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254a:	4b4c      	ldr	r3, [pc, #304]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002556:	4b49      	ldr	r3, [pc, #292]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
 8002562:	4b46      	ldr	r3, [pc, #280]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b43      	ldr	r3, [pc, #268]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c0      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3d      	ldr	r3, [pc, #244]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4939      	ldr	r1, [pc, #228]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <HAL_RCC_OscConfig+0x270>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fc3d 	bl	8001e28 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff fc39 	bl	8001e28 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b2a      	ldr	r3, [pc, #168]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4927      	ldr	r1, [pc, #156]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b26      	ldr	r3, [pc, #152]	@ (8002680 <HAL_RCC_OscConfig+0x270>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fc1c 	bl	8001e28 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff fc18 	bl	8001e28 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e180      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03a      	beq.n	8002694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <HAL_RCC_OscConfig+0x274>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fbfc 	bl	8001e28 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fbf8 	bl	8001e28 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e160      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <HAL_RCC_OscConfig+0x26c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f000 face 	bl	8002bf4 <RCC_Delay>
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_RCC_OscConfig+0x274>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7ff fbe2 	bl	8001e28 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002666:	e00f      	b.n	8002688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff fbde 	bl	8001e28 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d908      	bls.n	8002688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e146      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	42420000 	.word	0x42420000
 8002684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b92      	ldr	r3, [pc, #584]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e9      	bne.n	8002668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a6 	beq.w	80027ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b8b      	ldr	r3, [pc, #556]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a87      	ldr	r2, [pc, #540]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b85      	ldr	r3, [pc, #532]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b82      	ldr	r3, [pc, #520]	@ (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b7f      	ldr	r3, [pc, #508]	@ (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7e      	ldr	r2, [pc, #504]	@ (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7ff fb9f 	bl	8001e28 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7ff fb9b 	bl	8001e28 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	@ 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e103      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b75      	ldr	r3, [pc, #468]	@ (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x312>
 8002714:	4b6f      	ldr	r3, [pc, #444]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a6e      	ldr	r2, [pc, #440]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	e02d      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x334>
 800272a:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a69      	ldr	r2, [pc, #420]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b67      	ldr	r3, [pc, #412]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a66      	ldr	r2, [pc, #408]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x356>
 800274c:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a60      	ldr	r2, [pc, #384]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	4b5e      	ldr	r3, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a5d      	ldr	r2, [pc, #372]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002766:	4b5b      	ldr	r3, [pc, #364]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a5a      	ldr	r2, [pc, #360]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a57      	ldr	r2, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fb4f 	bl	8001e28 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff fb4b 	bl	8001e28 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0b1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b4b      	ldr	r3, [pc, #300]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x37e>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fb39 	bl	8001e28 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff fb35 	bl	8001e28 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e09b      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b40      	ldr	r3, [pc, #256]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b3c      	ldr	r3, [pc, #240]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b36      	ldr	r3, [pc, #216]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d061      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d146      	bne.n	800289a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fb09 	bl	8001e28 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7ff fb05 	bl	8001e28 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e06d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002842:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4921      	ldr	r1, [pc, #132]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b1f      	ldr	r3, [pc, #124]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a19      	ldr	r1, [r3, #32]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	430b      	orrs	r3, r1
 8002866:	491b      	ldr	r1, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7ff fad9 	bl	8001e28 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff fad5 	bl	8001e28 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x46a>
 8002898:	e035      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff fac2 	bl	8001e28 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7ff fabe 	bl	8001e28 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e026      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x498>
 80028c6:	e01e      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e019      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_OscConfig+0x500>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0d0      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b67      	ldr	r3, [pc, #412]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4965      	ldr	r1, [pc, #404]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800297a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a52      	ldr	r2, [pc, #328]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d040      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e073      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06b      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4936      	ldr	r1, [pc, #216]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7ff fa10 	bl	8001e28 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7ff fa0c 	bl	8001e28 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e053      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b27      	ldr	r3, [pc, #156]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d210      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b24      	ldr	r3, [pc, #144]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4922      	ldr	r1, [pc, #136]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	@ (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	@ (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f96e 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08003b94 	.word	0x08003b94
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b02:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x30>
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x36>
 8002b16:	e027      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1a:	613b      	str	r3, [r7, #16]
      break;
 8002b1c:	e027      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	0c9b      	lsrs	r3, r3, #18
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d010      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	0c5b      	lsrs	r3, r3, #17
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	4a11      	ldr	r2, [pc, #68]	@ (8002b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	fb03 f202 	mul.w	r2, r3, r2
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e004      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	613b      	str	r3, [r7, #16]
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6a:	613b      	str	r3, [r7, #16]
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	693b      	ldr	r3, [r7, #16]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	007a1200 	.word	0x007a1200
 8002b84:	08003bac 	.word	0x08003bac
 8002b88:	08003bbc 	.word	0x08003bbc
 8002b8c:	003d0900 	.word	0x003d0900

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b02      	ldr	r3, [pc, #8]	@ (8002ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	20000004 	.word	0x20000004

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff2 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	@ (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08003ba4 	.word	0x08003ba4

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0adb      	lsrs	r3, r3, #11
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	@ (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08003ba4 	.word	0x08003ba4

08002bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <RCC_Delay+0x34>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <RCC_Delay+0x38>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a5b      	lsrs	r3, r3, #9
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c10:	bf00      	nop
  }
  while (Delay --);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	60fa      	str	r2, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f9      	bne.n	8002c10 <RCC_Delay+0x1c>
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000004 	.word	0x20000004
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e041      	b.n	8002cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fef6 	bl	8001a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fb22 	bl	80032b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d001      	beq.n	8002ce8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e03c      	b.n	8002d62 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <HAL_TIM_Base_Start+0x9c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d018      	beq.n	8002d2c <HAL_TIM_Base_Start+0x5c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002d70 <HAL_TIM_Base_Start+0xa0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d013      	beq.n	8002d2c <HAL_TIM_Base_Start+0x5c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0c:	d00e      	beq.n	8002d2c <HAL_TIM_Base_Start+0x5c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <HAL_TIM_Base_Start+0xa4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_TIM_Base_Start+0x5c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a16      	ldr	r2, [pc, #88]	@ (8002d78 <HAL_TIM_Base_Start+0xa8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_Base_Start+0x5c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a15      	ldr	r2, [pc, #84]	@ (8002d7c <HAL_TIM_Base_Start+0xac>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d010      	beq.n	8002d60 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4e:	e007      	b.n	8002d60 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40013400 	.word	0x40013400
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	40000c00 	.word	0x40000c00

08002d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e041      	b.n	8002e16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f839 	bl	8002e1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 fa7a 	bl	80032b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_TIM_PWM_Start+0x24>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e022      	b.n	8002e9a <HAL_TIM_PWM_Start+0x6a>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d109      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x3e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e015      	b.n	8002e9a <HAL_TIM_PWM_Start+0x6a>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d109      	bne.n	8002e88 <HAL_TIM_PWM_Start+0x58>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e008      	b.n	8002e9a <HAL_TIM_PWM_Start+0x6a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e072      	b.n	8002f88 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d104      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0x82>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb0:	e013      	b.n	8002eda <HAL_TIM_PWM_Start+0xaa>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0x92>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ec0:	e00b      	b.n	8002eda <HAL_TIM_PWM_Start+0xaa>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0xa2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ed0:	e003      	b.n	8002eda <HAL_TIM_PWM_Start+0xaa>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fcb0 	bl	8003848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a28      	ldr	r2, [pc, #160]	@ (8002f90 <HAL_TIM_PWM_Start+0x160>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_TIM_PWM_Start+0xcc>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	@ (8002f94 <HAL_TIM_PWM_Start+0x164>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d101      	bne.n	8002f00 <HAL_TIM_PWM_Start+0xd0>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <HAL_TIM_PWM_Start+0xd2>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <HAL_TIM_PWM_Start+0x160>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x122>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <HAL_TIM_PWM_Start+0x164>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x122>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x122>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	@ (8002f98 <HAL_TIM_PWM_Start+0x168>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x122>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	@ (8002f9c <HAL_TIM_PWM_Start+0x16c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIM_PWM_Start+0x122>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a14      	ldr	r2, [pc, #80]	@ (8002fa0 <HAL_TIM_PWM_Start+0x170>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d010      	beq.n	8002f86 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	e007      	b.n	8002f86 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40013400 	.word	0x40013400
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00

08002fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e0ae      	b.n	8003120 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	f200 809f 	bhi.w	8003110 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	0800300d 	.word	0x0800300d
 8002fdc:	08003111 	.word	0x08003111
 8002fe0:	08003111 	.word	0x08003111
 8002fe4:	08003111 	.word	0x08003111
 8002fe8:	0800304d 	.word	0x0800304d
 8002fec:	08003111 	.word	0x08003111
 8002ff0:	08003111 	.word	0x08003111
 8002ff4:	08003111 	.word	0x08003111
 8002ff8:	0800308f 	.word	0x0800308f
 8002ffc:	08003111 	.word	0x08003111
 8003000:	08003111 	.word	0x08003111
 8003004:	08003111 	.word	0x08003111
 8003008:	080030cf 	.word	0x080030cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f9d6 	bl	80033c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0208 	orr.w	r2, r2, #8
 8003026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6999      	ldr	r1, [r3, #24]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	619a      	str	r2, [r3, #24]
      break;
 800304a:	e064      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fa26 	bl	80034a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6999      	ldr	r1, [r3, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]
      break;
 800308c:	e043      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fa79 	bl	800358c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69da      	ldr	r2, [r3, #28]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0208 	orr.w	r2, r2, #8
 80030a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0204 	bic.w	r2, r2, #4
 80030b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69d9      	ldr	r1, [r3, #28]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	61da      	str	r2, [r3, #28]
      break;
 80030cc:	e023      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 facd 	bl	8003674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69d9      	ldr	r1, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	021a      	lsls	r2, r3, #8
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	61da      	str	r2, [r3, #28]
      break;
 800310e:	e002      	b.n	8003116 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	75fb      	strb	r3, [r7, #23]
      break;
 8003114:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x1c>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b4      	b.n	80032ae <HAL_TIM_ConfigClockSource+0x186>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800316a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317c:	d03e      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0xd4>
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003182:	f200 8087 	bhi.w	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318a:	f000 8086 	beq.w	800329a <HAL_TIM_ConfigClockSource+0x172>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003192:	d87f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b70      	cmp	r3, #112	@ 0x70
 8003196:	d01a      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0xa6>
 8003198:	2b70      	cmp	r3, #112	@ 0x70
 800319a:	d87b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b60      	cmp	r3, #96	@ 0x60
 800319e:	d050      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x11a>
 80031a0:	2b60      	cmp	r3, #96	@ 0x60
 80031a2:	d877      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b50      	cmp	r3, #80	@ 0x50
 80031a6:	d03c      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0xfa>
 80031a8:	2b50      	cmp	r3, #80	@ 0x50
 80031aa:	d873      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b40      	cmp	r3, #64	@ 0x40
 80031ae:	d058      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x13a>
 80031b0:	2b40      	cmp	r3, #64	@ 0x40
 80031b2:	d86f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b30      	cmp	r3, #48	@ 0x30
 80031b6:	d064      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	2b30      	cmp	r3, #48	@ 0x30
 80031ba:	d86b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d060      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d867      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05c      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d05a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x15a>
 80031cc:	e062      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031de:	f000 fb14 	bl	800380a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	609a      	str	r2, [r3, #8]
      break;
 80031fa:	e04f      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800320c:	f000 fafd 	bl	800380a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e03c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800322e:	461a      	mov	r2, r3
 8003230:	f000 fa74 	bl	800371c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2150      	movs	r1, #80	@ 0x50
 800323a:	4618      	mov	r0, r3
 800323c:	f000 facb 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003240:	e02c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800324e:	461a      	mov	r2, r3
 8003250:	f000 fa92 	bl	8003778 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2160      	movs	r1, #96	@ 0x60
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fabb 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003260:	e01c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	461a      	mov	r2, r3
 8003270:	f000 fa54 	bl	800371c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2140      	movs	r1, #64	@ 0x40
 800327a:	4618      	mov	r0, r3
 800327c:	f000 faab 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003280:	e00c      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f000 faa2 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003292:	e003      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e000      	b.n	800329c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800329a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a39      	ldr	r2, [pc, #228]	@ (80033b0 <TIM_Base_SetConfig+0xf8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d013      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a38      	ldr	r2, [pc, #224]	@ (80033b4 <TIM_Base_SetConfig+0xfc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00f      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032de:	d00b      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a35      	ldr	r2, [pc, #212]	@ (80033b8 <TIM_Base_SetConfig+0x100>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d007      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a34      	ldr	r2, [pc, #208]	@ (80033bc <TIM_Base_SetConfig+0x104>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d003      	beq.n	80032f8 <TIM_Base_SetConfig+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a33      	ldr	r2, [pc, #204]	@ (80033c0 <TIM_Base_SetConfig+0x108>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d108      	bne.n	800330a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a28      	ldr	r2, [pc, #160]	@ (80033b0 <TIM_Base_SetConfig+0xf8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <TIM_Base_SetConfig+0x82>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a27      	ldr	r2, [pc, #156]	@ (80033b4 <TIM_Base_SetConfig+0xfc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00f      	beq.n	800333a <TIM_Base_SetConfig+0x82>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003320:	d00b      	beq.n	800333a <TIM_Base_SetConfig+0x82>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a24      	ldr	r2, [pc, #144]	@ (80033b8 <TIM_Base_SetConfig+0x100>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <TIM_Base_SetConfig+0x82>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a23      	ldr	r2, [pc, #140]	@ (80033bc <TIM_Base_SetConfig+0x104>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d003      	beq.n	800333a <TIM_Base_SetConfig+0x82>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a22      	ldr	r2, [pc, #136]	@ (80033c0 <TIM_Base_SetConfig+0x108>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a0f      	ldr	r2, [pc, #60]	@ (80033b0 <TIM_Base_SetConfig+0xf8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0e      	ldr	r2, [pc, #56]	@ (80033b4 <TIM_Base_SetConfig+0xfc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f023 0201 	bic.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]
  }
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40013400 	.word	0x40013400
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00

080033c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 0201 	bic.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f023 0302 	bic.w	r3, r3, #2
 800340c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a20      	ldr	r2, [pc, #128]	@ (800349c <TIM_OC1_SetConfig+0xd8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_OC1_SetConfig+0x64>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1f      	ldr	r2, [pc, #124]	@ (80034a0 <TIM_OC1_SetConfig+0xdc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10c      	bne.n	8003442 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f023 0308 	bic.w	r3, r3, #8
 800342e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a15      	ldr	r2, [pc, #84]	@ (800349c <TIM_OC1_SetConfig+0xd8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_OC1_SetConfig+0x8e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a14      	ldr	r2, [pc, #80]	@ (80034a0 <TIM_OC1_SetConfig+0xdc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d111      	bne.n	8003476 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	621a      	str	r2, [r3, #32]
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40013400 	.word	0x40013400

080034a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 0210 	bic.w	r2, r3, #16
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0320 	bic.w	r3, r3, #32
 80034ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a21      	ldr	r2, [pc, #132]	@ (8003584 <TIM_OC2_SetConfig+0xe0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_OC2_SetConfig+0x68>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a20      	ldr	r2, [pc, #128]	@ (8003588 <TIM_OC2_SetConfig+0xe4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d10d      	bne.n	8003528 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <TIM_OC2_SetConfig+0xe0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_OC2_SetConfig+0x94>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <TIM_OC2_SetConfig+0xe4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d113      	bne.n	8003560 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800353e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003546:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40013400 	.word	0x40013400

0800358c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a21      	ldr	r2, [pc, #132]	@ (800366c <TIM_OC3_SetConfig+0xe0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <TIM_OC3_SetConfig+0x66>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a20      	ldr	r2, [pc, #128]	@ (8003670 <TIM_OC3_SetConfig+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d10d      	bne.n	800360e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800360c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a16      	ldr	r2, [pc, #88]	@ (800366c <TIM_OC3_SetConfig+0xe0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_OC3_SetConfig+0x92>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <TIM_OC3_SetConfig+0xe4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d113      	bne.n	8003646 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	621a      	str	r2, [r3, #32]
}
 8003660:	bf00      	nop
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40013400 	.word	0x40013400

08003674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	031b      	lsls	r3, r3, #12
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a11      	ldr	r2, [pc, #68]	@ (8003714 <TIM_OC4_SetConfig+0xa0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_OC4_SetConfig+0x68>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a10      	ldr	r2, [pc, #64]	@ (8003718 <TIM_OC4_SetConfig+0xa4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d109      	bne.n	80036f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40013400 	.word	0x40013400

0800371c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 030a 	bic.w	r3, r3, #10
 8003758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	621a      	str	r2, [r3, #32]
}
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f023 0210 	bic.w	r2, r3, #16
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	031b      	lsls	r3, r3, #12
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f043 0307 	orr.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003824:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	021a      	lsls	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	431a      	orrs	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4313      	orrs	r3, r2
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	609a      	str	r2, [r3, #8]
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2201      	movs	r2, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	431a      	orrs	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e050      	b.n	800394a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d018      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a19      	ldr	r2, [pc, #100]	@ (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d00e      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a15      	ldr	r2, [pc, #84]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a14      	ldr	r2, [pc, #80]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a12      	ldr	r2, [pc, #72]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10c      	bne.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	4313      	orrs	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40013400 	.word	0x40013400
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00

08003968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e042      	b.n	8003a00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe f908 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	@ 0x24
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f82b 	bl	8003a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a42:	f023 030c 	bic.w	r3, r3, #12
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b1c <UART_SetConfig+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d103      	bne.n	8003a78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7ff f8ac 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	e002      	b.n	8003a7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a78:	f7ff f894 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8003a7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009a      	lsls	r2, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	4a22      	ldr	r2, [pc, #136]	@ (8003b20 <UART_SetConfig+0x118>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	0119      	lsls	r1, r3, #4
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009a      	lsls	r2, r3, #2
 8003aa8:	441a      	add	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <UART_SetConfig+0x118>)
 8003ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2064      	movs	r0, #100	@ 0x64
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	@ 0x32
 8003ac8:	4a15      	ldr	r2, [pc, #84]	@ (8003b20 <UART_SetConfig+0x118>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ad4:	4419      	add	r1, r3
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009a      	lsls	r2, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aec:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <UART_SetConfig+0x118>)
 8003aee:	fba3 0302 	umull	r0, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2064      	movs	r0, #100	@ 0x64
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	3332      	adds	r3, #50	@ 0x32
 8003b00:	4a07      	ldr	r2, [pc, #28]	@ (8003b20 <UART_SetConfig+0x118>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	440a      	add	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	51eb851f 	.word	0x51eb851f

08003b24 <memset>:
 8003b24:	4603      	mov	r3, r0
 8003b26:	4402      	add	r2, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <__libc_init_array>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	2600      	movs	r6, #0
 8003b38:	4d0c      	ldr	r5, [pc, #48]	@ (8003b6c <__libc_init_array+0x38>)
 8003b3a:	4c0d      	ldr	r4, [pc, #52]	@ (8003b70 <__libc_init_array+0x3c>)
 8003b3c:	1b64      	subs	r4, r4, r5
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	42a6      	cmp	r6, r4
 8003b42:	d109      	bne.n	8003b58 <__libc_init_array+0x24>
 8003b44:	f000 f81a 	bl	8003b7c <_init>
 8003b48:	2600      	movs	r6, #0
 8003b4a:	4d0a      	ldr	r5, [pc, #40]	@ (8003b74 <__libc_init_array+0x40>)
 8003b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003b78 <__libc_init_array+0x44>)
 8003b4e:	1b64      	subs	r4, r4, r5
 8003b50:	10a4      	asrs	r4, r4, #2
 8003b52:	42a6      	cmp	r6, r4
 8003b54:	d105      	bne.n	8003b62 <__libc_init_array+0x2e>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5c:	4798      	blx	r3
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7ee      	b.n	8003b40 <__libc_init_array+0xc>
 8003b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b66:	4798      	blx	r3
 8003b68:	3601      	adds	r6, #1
 8003b6a:	e7f2      	b.n	8003b52 <__libc_init_array+0x1e>
 8003b6c:	08003bc0 	.word	0x08003bc0
 8003b70:	08003bc0 	.word	0x08003bc0
 8003b74:	08003bc0 	.word	0x08003bc0
 8003b78:	08003bc4 	.word	0x08003bc4

08003b7c <_init>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr

08003b88 <_fini>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr
