
Spixel_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d8  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e8  080048e8  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080048e8  080048e8  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e8  080048e8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e8  080048e8  000058e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048ec  080048ec  000058ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000010  08004900  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004900  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6ad  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cab  00000000  00000000  000126e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00014398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096b  00000000  00000000  00014f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d5c  00000000  00000000  000158fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfec  00000000  00000000  0002f657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000992df  00000000  00000000  0003d643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6922  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031dc  00000000  00000000  000d6968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000d9b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	080048a4 	.word	0x080048a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	080048a4 	.word	0x080048a4

08000224 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == CH1_Pin)
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000234:	d103      	bne.n	800023e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		read_pwm(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fc8e 	bl	8000b58 <read_pwm>
 800023c:	e067      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH2_Pin)
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000244:	d103      	bne.n	800024e <HAL_GPIO_EXTI_Callback+0x2a>
	{
		read_pwm(2);
 8000246:	2002      	movs	r0, #2
 8000248:	f000 fc86 	bl	8000b58 <read_pwm>
 800024c:	e05f      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH3_Pin)
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000254:	d103      	bne.n	800025e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		read_pwm(3);
 8000256:	2003      	movs	r0, #3
 8000258:	f000 fc7e 	bl	8000b58 <read_pwm>
 800025c:	e057      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH4_Pin)
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d103      	bne.n	800026c <HAL_GPIO_EXTI_Callback+0x48>
	{
		read_pwm(4);
 8000264:	2004      	movs	r0, #4
 8000266:	f000 fc77 	bl	8000b58 <read_pwm>
 800026a:	e050      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH5_Pin)
 800026c:	88fb      	ldrh	r3, [r7, #6]
 800026e:	2b08      	cmp	r3, #8
 8000270:	d103      	bne.n	800027a <HAL_GPIO_EXTI_Callback+0x56>
	{
		read_pwm(5);
 8000272:	2005      	movs	r0, #5
 8000274:	f000 fc70 	bl	8000b58 <read_pwm>
 8000278:	e049      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH6_Pin)
 800027a:	88fb      	ldrh	r3, [r7, #6]
 800027c:	2b10      	cmp	r3, #16
 800027e:	d103      	bne.n	8000288 <HAL_GPIO_EXTI_Callback+0x64>
	{
		read_pwm(6);
 8000280:	2006      	movs	r0, #6
 8000282:	f000 fc69 	bl	8000b58 <read_pwm>
 8000286:	e042      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH7_Pin)
 8000288:	88fb      	ldrh	r3, [r7, #6]
 800028a:	2b20      	cmp	r3, #32
 800028c:	d103      	bne.n	8000296 <HAL_GPIO_EXTI_Callback+0x72>
	{
		read_pwm(7);
 800028e:	2007      	movs	r0, #7
 8000290:	f000 fc62 	bl	8000b58 <read_pwm>
 8000294:	e03b      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH8_Pin)
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	2b40      	cmp	r3, #64	@ 0x40
 800029a:	d103      	bne.n	80002a4 <HAL_GPIO_EXTI_Callback+0x80>
	{
		read_pwm(8);
 800029c:	2008      	movs	r0, #8
 800029e:	f000 fc5b 	bl	8000b58 <read_pwm>
 80002a2:	e034      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH9_Pin)
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	2b80      	cmp	r3, #128	@ 0x80
 80002a8:	d103      	bne.n	80002b2 <HAL_GPIO_EXTI_Callback+0x8e>
	{
		read_pwm(9);
 80002aa:	2009      	movs	r0, #9
 80002ac:	f000 fc54 	bl	8000b58 <read_pwm>
 80002b0:	e02d      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH10_Pin)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80002b8:	d103      	bne.n	80002c2 <HAL_GPIO_EXTI_Callback+0x9e>
	{
		read_pwm(10);
 80002ba:	200a      	movs	r0, #10
 80002bc:	f000 fc4c 	bl	8000b58 <read_pwm>
 80002c0:	e025      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == CH11_Pin)
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002c8:	d103      	bne.n	80002d2 <HAL_GPIO_EXTI_Callback+0xae>
	{
		read_pwm(11);
 80002ca:	200b      	movs	r0, #11
 80002cc:	f000 fc44 	bl	8000b58 <read_pwm>
 80002d0:	e01d      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>

	}
	else if(GPIO_Pin == SS1_Pin)
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2b04      	cmp	r3, #4
 80002d6:	d103      	bne.n	80002e0 <HAL_GPIO_EXTI_Callback+0xbc>
	{
		read_pwm(12);
 80002d8:	200c      	movs	r0, #12
 80002da:	f000 fc3d 	bl	8000b58 <read_pwm>
 80002de:	e016      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	}
	else if(GPIO_Pin == SS2_Pin)
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80002e6:	d103      	bne.n	80002f0 <HAL_GPIO_EXTI_Callback+0xcc>
	{
		read_pwm(13);
 80002e8:	200d      	movs	r0, #13
 80002ea:	f000 fc35 	bl	8000b58 <read_pwm>
 80002ee:	e00e      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	}
	else if(GPIO_Pin == SS3_Pin)
 80002f0:	88fb      	ldrh	r3, [r7, #6]
 80002f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80002f6:	d103      	bne.n	8000300 <HAL_GPIO_EXTI_Callback+0xdc>
	{
		read_pwm(14);
 80002f8:	200e      	movs	r0, #14
 80002fa:	f000 fc2d 	bl	8000b58 <read_pwm>
 80002fe:	e006      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	}
	else if(GPIO_Pin == SS4_Pin)
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000306:	d102      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0xea>
	{
		read_pwm(15);
 8000308:	200f      	movs	r0, #15
 800030a:	f000 fc25 	bl	8000b58 <read_pwm>
	}
	  convert();
 800030e:	f001 f9ef 	bl	80016f0 <convert>

}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000320:	f002 f9e6 	bl	80026f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f834 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f000 fa3e 	bl	80007a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800032c:	f000 f876 	bl	800041c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000330:	f000 f8c4 	bl	80004bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000334:	f000 f94e 	bl	80005d4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000338:	f000 fa0c 	bl	8000754 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800033c:	f000 f9d6 	bl	80006ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // TIM2 BROOM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000340:	2104      	movs	r1, #4
 8000342:	4810      	ldr	r0, [pc, #64]	@ (8000384 <main+0x68>)
 8000344:	f003 fae2 	bl	800390c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000348:	2108      	movs	r1, #8
 800034a:	480e      	ldr	r0, [pc, #56]	@ (8000384 <main+0x68>)
 800034c:	f003 fade 	bl	800390c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000350:	210c      	movs	r1, #12
 8000352:	480c      	ldr	r0, [pc, #48]	@ (8000384 <main+0x68>)
 8000354:	f003 fada 	bl	800390c <HAL_TIM_PWM_Start>

  //TIM3 WHEEL
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000358:	2100      	movs	r1, #0
 800035a:	480b      	ldr	r0, [pc, #44]	@ (8000388 <main+0x6c>)
 800035c:	f003 fad6 	bl	800390c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000360:	2104      	movs	r1, #4
 8000362:	4809      	ldr	r0, [pc, #36]	@ (8000388 <main+0x6c>)
 8000364:	f003 fad2 	bl	800390c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000368:	2108      	movs	r1, #8
 800036a:	4807      	ldr	r0, [pc, #28]	@ (8000388 <main+0x6c>)
 800036c:	f003 face 	bl	800390c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim1);
 8000370:	4806      	ldr	r0, [pc, #24]	@ (800038c <main+0x70>)
 8000372:	f003 f98d 	bl	8003690 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Status_SS();
 8000376:	f001 fb6d 	bl	8001a54 <Status_SS>
	  control();
 800037a:	f001 fd83 	bl	8001e84 <control>
	  Status_SS();
 800037e:	bf00      	nop
 8000380:	e7f9      	b.n	8000376 <main+0x5a>
 8000382:	bf00      	nop
 8000384:	20000074 	.word	0x20000074
 8000388:	200000bc 	.word	0x200000bc
 800038c:	2000002c 	.word	0x2000002c

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	@ 0x40
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2228      	movs	r2, #40	@ 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 fa54 	bl	800484c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	4618      	mov	r0, r3
 80003da:	f002 fcf9 	bl	8002dd0 <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e4:	f000 fb2c 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	230f      	movs	r3, #15
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ec:	2302      	movs	r3, #2
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f002 ff66 	bl	80032d4 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040e:	f000 fb17 	bl	8000a40 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3740      	adds	r7, #64	@ 0x40
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	463b      	mov	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <MX_TIM1_Init+0x98>)
 800043a:	4a1f      	ldr	r2, [pc, #124]	@ (80004b8 <MX_TIM1_Init+0x9c>)
 800043c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_TIM1_Init+0x98>)
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <MX_TIM1_Init+0x98>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <MX_TIM1_Init+0x98>)
 800044c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000450:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <MX_TIM1_Init+0x98>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000458:	4b16      	ldr	r3, [pc, #88]	@ (80004b4 <MX_TIM1_Init+0x98>)
 800045a:	2200      	movs	r2, #0
 800045c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <MX_TIM1_Init+0x98>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000464:	4813      	ldr	r0, [pc, #76]	@ (80004b4 <MX_TIM1_Init+0x98>)
 8000466:	f003 f8c3 	bl	80035f0 <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000470:	f000 fae6 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <MX_TIM1_Init+0x98>)
 8000482:	f003 fcaf 	bl	8003de4 <HAL_TIM_ConfigClockSource>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800048c:	f000 fad8 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_TIM1_Init+0x98>)
 800049e:	f004 f879 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004a8:	f000 faca 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	40012c00 	.word	0x40012c00

080004bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	@ 0x38
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	f107 0320 	add.w	r3, r7, #32
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ec:	4b38      	ldr	r3, [pc, #224]	@ (80005d0 <MX_TIM2_Init+0x114>)
 80004ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80004f4:	4b36      	ldr	r3, [pc, #216]	@ (80005d0 <MX_TIM2_Init+0x114>)
 80004f6:	2263      	movs	r2, #99	@ 0x63
 80004f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b35      	ldr	r3, [pc, #212]	@ (80005d0 <MX_TIM2_Init+0x114>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14400-1;
 8000500:	4b33      	ldr	r3, [pc, #204]	@ (80005d0 <MX_TIM2_Init+0x114>)
 8000502:	f643 023f 	movw	r2, #14399	@ 0x383f
 8000506:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b31      	ldr	r3, [pc, #196]	@ (80005d0 <MX_TIM2_Init+0x114>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050e:	4b30      	ldr	r3, [pc, #192]	@ (80005d0 <MX_TIM2_Init+0x114>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000514:	482e      	ldr	r0, [pc, #184]	@ (80005d0 <MX_TIM2_Init+0x114>)
 8000516:	f003 f86b 	bl	80035f0 <HAL_TIM_Base_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000520:	f000 fa8e 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000528:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800052a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800052e:	4619      	mov	r1, r3
 8000530:	4827      	ldr	r0, [pc, #156]	@ (80005d0 <MX_TIM2_Init+0x114>)
 8000532:	f003 fc57 	bl	8003de4 <HAL_TIM_ConfigClockSource>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800053c:	f000 fa80 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000540:	4823      	ldr	r0, [pc, #140]	@ (80005d0 <MX_TIM2_Init+0x114>)
 8000542:	f003 f98b 	bl	800385c <HAL_TIM_PWM_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800054c:	f000 fa78 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	4619      	mov	r1, r3
 800055e:	481c      	ldr	r0, [pc, #112]	@ (80005d0 <MX_TIM2_Init+0x114>)
 8000560:	f004 f818 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800056a:	f000 fa69 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056e:	2360      	movs	r3, #96	@ 0x60
 8000570:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2204      	movs	r2, #4
 8000582:	4619      	mov	r1, r3
 8000584:	4812      	ldr	r0, [pc, #72]	@ (80005d0 <MX_TIM2_Init+0x114>)
 8000586:	f003 fb6b 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000590:	f000 fa56 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2208      	movs	r2, #8
 8000598:	4619      	mov	r1, r3
 800059a:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <MX_TIM2_Init+0x114>)
 800059c:	f003 fb60 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80005a6:	f000 fa4b 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	220c      	movs	r2, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	4807      	ldr	r0, [pc, #28]	@ (80005d0 <MX_TIM2_Init+0x114>)
 80005b2:	f003 fb55 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80005bc:	f000 fa40 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <MX_TIM2_Init+0x114>)
 80005c2:	f001 ff2f 	bl	8002424 <HAL_TIM_MspPostInit>

}
 80005c6:	bf00      	nop
 80005c8:	3738      	adds	r7, #56	@ 0x38
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000074 	.word	0x20000074

080005d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08e      	sub	sp, #56	@ 0x38
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]
 8000602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000604:	4b37      	ldr	r3, [pc, #220]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000606:	4a38      	ldr	r2, [pc, #224]	@ (80006e8 <MX_TIM3_Init+0x114>)
 8000608:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <MX_TIM3_Init+0x110>)
 800060c:	2231      	movs	r2, #49	@ 0x31
 800060e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000610:	4b34      	ldr	r3, [pc, #208]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 28800-1;
 8000616:	4b33      	ldr	r3, [pc, #204]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000618:	f247 027f 	movw	r2, #28799	@ 0x707f
 800061c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b31      	ldr	r3, [pc, #196]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000624:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800062a:	482e      	ldr	r0, [pc, #184]	@ (80006e4 <MX_TIM3_Init+0x110>)
 800062c:	f002 ffe0 	bl	80035f0 <HAL_TIM_Base_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000636:	f000 fa03 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000640:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000644:	4619      	mov	r1, r3
 8000646:	4827      	ldr	r0, [pc, #156]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000648:	f003 fbcc 	bl	8003de4 <HAL_TIM_ConfigClockSource>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000652:	f000 f9f5 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000656:	4823      	ldr	r0, [pc, #140]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000658:	f003 f900 	bl	800385c <HAL_TIM_PWM_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000662:	f000 f9ed 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4619      	mov	r1, r3
 8000674:	481b      	ldr	r0, [pc, #108]	@ (80006e4 <MX_TIM3_Init+0x110>)
 8000676:	f003 ff8d 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000680:	f000 f9de 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	4619      	mov	r1, r3
 800069a:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <MX_TIM3_Init+0x110>)
 800069c:	f003 fae0 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80006a6:	f000 f9cb 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2204      	movs	r2, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_TIM3_Init+0x110>)
 80006b2:	f003 fad5 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80006bc:	f000 f9c0 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2208      	movs	r2, #8
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <MX_TIM3_Init+0x110>)
 80006c8:	f003 faca 	bl	8003c60 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80006d2:	f000 f9b5 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <MX_TIM3_Init+0x110>)
 80006d8:	f001 fea4 	bl	8002424 <HAL_TIM_MspPostInit>

}
 80006dc:	bf00      	nop
 80006de:	3738      	adds	r7, #56	@ 0x38
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000bc 	.word	0x200000bc
 80006e8:	40000400 	.word	0x40000400

080006ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_TIM6_Init+0x60>)
 80006fc:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <MX_TIM6_Init+0x64>)
 80006fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_TIM6_Init+0x60>)
 8000702:	2247      	movs	r2, #71	@ 0x47
 8000704:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_TIM6_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_TIM6_Init+0x60>)
 800070e:	22c7      	movs	r2, #199	@ 0xc7
 8000710:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_TIM6_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <MX_TIM6_Init+0x60>)
 800071a:	f002 ff69 	bl	80035f0 <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000724:	f000 f98c 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000728:	2320      	movs	r3, #32
 800072a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_TIM6_Init+0x60>)
 8000736:	f003 ff2d 	bl	8004594 <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 f97e 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000104 	.word	0x20000104
 8000750:	40001000 	.word	0x40001000

08000754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <MX_USART1_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_USART1_UART_Init+0x4c>)
 800078c:	f003 ff80 	bl	8004690 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f953 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000014c 	.word	0x2000014c
 80007a4:	40013800 	.word	0x40013800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b8e      	ldr	r3, [pc, #568]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a8d      	ldr	r2, [pc, #564]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b8b      	ldr	r3, [pc, #556]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	4b88      	ldr	r3, [pc, #544]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a87      	ldr	r2, [pc, #540]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b85      	ldr	r3, [pc, #532]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ec:	4b82      	ldr	r3, [pc, #520]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a81      	ldr	r2, [pc, #516]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b7f      	ldr	r3, [pc, #508]	@ (80009f8 <MX_GPIO_Init+0x250>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000804:	4b7c      	ldr	r3, [pc, #496]	@ (80009f8 <MX_GPIO_Init+0x250>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a7b      	ldr	r2, [pc, #492]	@ (80009f8 <MX_GPIO_Init+0x250>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b79      	ldr	r3, [pc, #484]	@ (80009f8 <MX_GPIO_Init+0x250>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081c:	4b76      	ldr	r3, [pc, #472]	@ (80009f8 <MX_GPIO_Init+0x250>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a75      	ldr	r2, [pc, #468]	@ (80009f8 <MX_GPIO_Init+0x250>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b73      	ldr	r3, [pc, #460]	@ (80009f8 <MX_GPIO_Init+0x250>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0310 	and.w	r3, r3, #16
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800083a:	4870      	ldr	r0, [pc, #448]	@ (80009fc <MX_GPIO_Init+0x254>)
 800083c:	f002 fa97 	bl	8002d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000846:	486e      	ldr	r0, [pc, #440]	@ (8000a00 <MX_GPIO_Init+0x258>)
 8000848:	f002 fa91 	bl	8002d6e <HAL_GPIO_WritePin>
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin|F_R_1A_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000852:	486c      	ldr	r0, [pc, #432]	@ (8000a04 <MX_GPIO_Init+0x25c>)
 8000854:	f002 fa8b 	bl	8002d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	486a      	ldr	r0, [pc, #424]	@ (8000a08 <MX_GPIO_Init+0x260>)
 800085e:	f002 fa86 	bl	8002d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS1_Pin */
  GPIO_InitStruct.Pin = SS1_Pin;
 8000862:	2304      	movs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	4b69      	ldr	r3, [pc, #420]	@ (8000a0c <MX_GPIO_Init+0x264>)
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS1_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4619      	mov	r1, r3
 8000874:	4861      	ldr	r0, [pc, #388]	@ (80009fc <MX_GPIO_Init+0x254>)
 8000876:	f002 f8cf 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS5_Pin SS6_Pin SS7_Pin SS8_Pin */
  GPIO_InitStruct.Pin = SS5_Pin|SS6_Pin|SS7_Pin|SS8_Pin;
 800087a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4619      	mov	r1, r3
 800088e:	485e      	ldr	r0, [pc, #376]	@ (8000a08 <MX_GPIO_Init+0x260>)
 8000890:	f002 f8c2 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin SS3_Pin SS4_Pin */
  GPIO_InitStruct.Pin = SS2_Pin|SS3_Pin|SS4_Pin;
 8000894:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089a:	4b5c      	ldr	r3, [pc, #368]	@ (8000a0c <MX_GPIO_Init+0x264>)
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	4619      	mov	r1, r3
 80008a8:	4857      	ldr	r0, [pc, #348]	@ (8000a08 <MX_GPIO_Init+0x260>)
 80008aa:	f002 f8b5 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_Pin LIGHT_Pin SLN_Pin OUT_Pin */
  GPIO_InitStruct.Pin = CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin;
 80008ae:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2302      	movs	r3, #2
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	4619      	mov	r1, r3
 80008c6:	484d      	ldr	r0, [pc, #308]	@ (80009fc <MX_GPIO_Init+0x254>)
 80008c8:	f002 f8a6 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK_2B_Pin EN_2B_Pin F_R_2B_Pin BRK_2A_Pin
                           EN_2A_Pin F_R_2A_Pin BRK_1B_Pin EN_1B_Pin */
  GPIO_InitStruct.Pin = BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 80008cc:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80008d0:	61bb      	str	r3, [r7, #24]
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2302      	movs	r3, #2
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4846      	ldr	r0, [pc, #280]	@ (8000a00 <MX_GPIO_Init+0x258>)
 80008e6:	f002 f897 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : F_R_1B_Pin BRK_1A_Pin EN_1A_Pin */
  GPIO_InitStruct.Pin = F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin;
 80008ea:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2302      	movs	r3, #2
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4619      	mov	r1, r3
 8000902:	4840      	ldr	r0, [pc, #256]	@ (8000a04 <MX_GPIO_Init+0x25c>)
 8000904:	f002 f888 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : F_R_1A_Pin */
  GPIO_InitStruct.Pin = F_R_1A_Pin;
 8000908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000916:	2303      	movs	r3, #3
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(F_R_1A_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	4619      	mov	r1, r3
 8000920:	4838      	ldr	r0, [pc, #224]	@ (8000a04 <MX_GPIO_Init+0x25c>)
 8000922:	f002 f879 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_Pin CH2_Pin CH3_Pin */
  GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin|CH3_Pin;
 8000926:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092c:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <MX_GPIO_Init+0x268>)
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4619      	mov	r1, r3
 800093a:	4832      	ldr	r0, [pc, #200]	@ (8000a04 <MX_GPIO_Init+0x25c>)
 800093c:	f002 f86c 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH4_Pin */
  GPIO_InitStruct.Pin = CH4_Pin;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000944:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4619      	mov	r1, r3
 8000952:	482b      	ldr	r0, [pc, #172]	@ (8000a00 <MX_GPIO_Init+0x258>)
 8000954:	f002 f860 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH5_Pin CH6_Pin CH7_Pin CH8_Pin
                           CH9_Pin CH10_Pin CH11_Pin */
  GPIO_InitStruct.Pin = CH5_Pin|CH6_Pin|CH7_Pin|CH8_Pin
 8000958:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 800095c:	61bb      	str	r3, [r7, #24]
                          |CH9_Pin|CH10_Pin|CH11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <MX_GPIO_Init+0x268>)
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0318 	add.w	r3, r7, #24
 800096a:	4619      	mov	r1, r3
 800096c:	4823      	ldr	r0, [pc, #140]	@ (80009fc <MX_GPIO_Init+0x254>)
 800096e:	f002 f853 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2302      	movs	r3, #2
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0318 	add.w	r3, r7, #24
 8000986:	4619      	mov	r1, r3
 8000988:	481f      	ldr	r0, [pc, #124]	@ (8000a08 <MX_GPIO_Init+0x260>)
 800098a:	f002 f845 	bl	8002a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2006      	movs	r0, #6
 8000994:	f002 f809 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000998:	2006      	movs	r0, #6
 800099a:	f002 f822 	bl	80029e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2008      	movs	r0, #8
 80009a4:	f002 f801 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009a8:	2008      	movs	r0, #8
 80009aa:	f002 f81a 	bl	80029e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2009      	movs	r0, #9
 80009b4:	f001 fff9 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009b8:	2009      	movs	r0, #9
 80009ba:	f002 f812 	bl	80029e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	200a      	movs	r0, #10
 80009c4:	f001 fff1 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009c8:	200a      	movs	r0, #10
 80009ca:	f002 f80a 	bl	80029e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2017      	movs	r0, #23
 80009d4:	f001 ffe9 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009d8:	2017      	movs	r0, #23
 80009da:	f002 f802 	bl	80029e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2028      	movs	r0, #40	@ 0x28
 80009e4:	f001 ffe1 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e8:	2028      	movs	r0, #40	@ 0x28
 80009ea:	f001 fffa 	bl	80029e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	@ 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40011400 	.word	0x40011400
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40011800 	.word	0x40011800
 8000a0c:	10210000 	.word	0x10210000
 8000a10:	10110000 	.word	0x10110000

08000a14 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d102      	bne.n	8000a2c <HAL_TIM_PeriodElapsedCallback+0x18>
        flag_tim6 = 1; // Cờ báo hiệu TIM6 ngắt
 8000a26:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]

    }
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40001000 	.word	0x40001000
 8000a3c:	200001f4 	.word	0x200001f4

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <map>:
	 read_ss1,read_ss2,read_ss3,read_ss4;



uint16_t map(uint16_t x,uint16_t In_Max,uint16_t In_Min,uint16_t Out_Max,uint16_t Out_Min )
{
 8000a4c:	b490      	push	{r4, r7}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4604      	mov	r4, r0
 8000a54:	4608      	mov	r0, r1
 8000a56:	4611      	mov	r1, r2
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	80fb      	strh	r3, [r7, #6]
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80bb      	strh	r3, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	807b      	strh	r3, [r7, #2]
 8000a66:	4613      	mov	r3, r2
 8000a68:	803b      	strh	r3, [r7, #0]
	return(((x-In_Min)*(Out_Max-Out_Min)/(In_Max-In_Min))+Out_Min);
 8000a6a:	88fa      	ldrh	r2, [r7, #6]
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	8839      	ldrh	r1, [r7, #0]
 8000a72:	8a3a      	ldrh	r2, [r7, #16]
 8000a74:	1a8a      	subs	r2, r1, r2
 8000a76:	fb03 f202 	mul.w	r2, r3, r2
 8000a7a:	88b9      	ldrh	r1, [r7, #4]
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	1acb      	subs	r3, r1, r3
 8000a80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	8a3b      	ldrh	r3, [r7, #16]
 8000a88:	4413      	add	r3, r2
 8000a8a:	b29b      	uxth	r3, r3
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc90      	pop	{r4, r7}
 8000a94:	4770      	bx	lr

08000a96 <media_filter>:

uint32_t media_filter(uint32_t* array_read, int size) {
 8000a96:	b480      	push	{r7}
 8000a98:	b097      	sub	sp, #92	@ 0x5c
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]


    uint32_t temp_array[15];
    for (int i = 0; i < size; i++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8000aa4:	e00d      	b.n	8000ac2 <media_filter+0x2c>
        temp_array[i] = array_read[i];
 8000aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	3358      	adds	r3, #88	@ 0x58
 8000ab6:	443b      	add	r3, r7
 8000ab8:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (int i = 0; i < size; i++) {
 8000abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000abe:	3301      	adds	r3, #1
 8000ac0:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ac2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbed      	blt.n	8000aa6 <media_filter+0x10>
    }

    // Sắp xếp mảng tạm bằng Insertion Sort
    for (int i = 1; i < size; i++) {
 8000aca:	2301      	movs	r3, #1
 8000acc:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ace:	e031      	b.n	8000b34 <media_filter+0x9e>
        uint32_t temp = temp_array[i];
 8000ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	3358      	adds	r3, #88	@ 0x58
 8000ad6:	443b      	add	r3, r7
 8000ad8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000adc:	64bb      	str	r3, [r7, #72]	@ 0x48
        int j = i - 1;
 8000ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c

        while (j >= 0 && temp_array[j] > temp) {
 8000ae4:	e00f      	b.n	8000b06 <media_filter+0x70>
            temp_array[j + 1] = temp_array[j];
 8000ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ae8:	1c59      	adds	r1, r3, #1
 8000aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	3358      	adds	r3, #88	@ 0x58
 8000af0:	443b      	add	r3, r7
 8000af2:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8000af6:	008b      	lsls	r3, r1, #2
 8000af8:	3358      	adds	r3, #88	@ 0x58
 8000afa:	443b      	add	r3, r7
 8000afc:	f843 2c4c 	str.w	r2, [r3, #-76]
            j--;
 8000b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b02:	3b01      	subs	r3, #1
 8000b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while (j >= 0 && temp_array[j] > temp) {
 8000b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db08      	blt.n	8000b1e <media_filter+0x88>
 8000b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	3358      	adds	r3, #88	@ 0x58
 8000b12:	443b      	add	r3, r7
 8000b14:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000b18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3e3      	bcc.n	8000ae6 <media_filter+0x50>
        }
        temp_array[j + 1] = temp;
 8000b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b20:	3301      	adds	r3, #1
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	3358      	adds	r3, #88	@ 0x58
 8000b26:	443b      	add	r3, r7
 8000b28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000b2a:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (int i = 1; i < size; i++) {
 8000b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b30:	3301      	adds	r3, #1
 8000b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8000b34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbc9      	blt.n	8000ad0 <media_filter+0x3a>
    }

    // Trả về giá trị trung vị
    return temp_array[size / 2];
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	0fda      	lsrs	r2, r3, #31
 8000b40:	4413      	add	r3, r2
 8000b42:	105b      	asrs	r3, r3, #1
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	3358      	adds	r3, #88	@ 0x58
 8000b48:	443b      	add	r3, r7
 8000b4a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	375c      	adds	r7, #92	@ 0x5c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <read_pwm>:
void read_pwm(int val_ch)
	{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0da      	sub	sp, #360	@ 0x168
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000b62:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8000b66:	6018      	str	r0, [r3, #0]
		switch(val_ch)
 8000b68:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000b6c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	2b0e      	cmp	r3, #14
 8000b76:	f200 85b1 	bhi.w	80016dc <read_pwm+0xb84>
 8000b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <read_pwm+0x28>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000bbd 	.word	0x08000bbd
 8000b84:	08000cd9 	.word	0x08000cd9
 8000b88:	08000df5 	.word	0x08000df5
 8000b8c:	08000f0d 	.word	0x08000f0d
 8000b90:	08000feb 	.word	0x08000feb
 8000b94:	080010a5 	.word	0x080010a5
 8000b98:	08001189 	.word	0x08001189
 8000b9c:	08001245 	.word	0x08001245
 8000ba0:	0800130f 	.word	0x0800130f
 8000ba4:	0800140f 	.word	0x0800140f
 8000ba8:	08001517 	.word	0x08001517
 8000bac:	0800161f 	.word	0x0800161f
 8000bb0:	08001665 	.word	0x08001665
 8000bb4:	0800168d 	.word	0x0800168d
 8000bb8:	080016b5 	.word	0x080016b5
		{
			case 1:
				if(HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin)==1)
 8000bbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc0:	489c      	ldr	r0, [pc, #624]	@ (8000e34 <read_pwm+0x2dc>)
 8000bc2:	f002 f8bd 	bl	8002d40 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d116      	bne.n	8000bfa <read_pwm+0xa2>
					{
						read_1.start = htim1.Instance->CNT;
 8000bcc:	4b9a      	ldr	r3, [pc, #616]	@ (8000e38 <read_pwm+0x2e0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bd2:	4a9a      	ldr	r2, [pc, #616]	@ (8000e3c <read_pwm+0x2e4>)
 8000bd4:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH1_Pin;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bda:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	4b98      	ldr	r3, [pc, #608]	@ (8000e40 <read_pwm+0x2e8>)
 8000be0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4890      	ldr	r0, [pc, #576]	@ (8000e34 <read_pwm+0x2dc>)
 8000bf2:	f001 ff11 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH1_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000bf6:	f000 bd71 	b.w	80016dc <read_pwm+0xb84>
						read_1.end = htim1.Instance->CNT;
 8000bfa:	4b8f      	ldr	r3, [pc, #572]	@ (8000e38 <read_pwm+0x2e0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c00:	4a8e      	ldr	r2, [pc, #568]	@ (8000e3c <read_pwm+0x2e4>)
 8000c02:	6053      	str	r3, [r2, #4]
						if(read_1.start > read_1.end)
 8000c04:	4b8d      	ldr	r3, [pc, #564]	@ (8000e3c <read_pwm+0x2e4>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b8c      	ldr	r3, [pc, #560]	@ (8000e3c <read_pwm+0x2e4>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d90a      	bls.n	8000c26 <read_pwm+0xce>
							read_1.out = 65535 - read_1.start + read_1.end;
 8000c10:	4b8a      	ldr	r3, [pc, #552]	@ (8000e3c <read_pwm+0x2e4>)
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4b89      	ldr	r3, [pc, #548]	@ (8000e3c <read_pwm+0x2e4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c1e:	33ff      	adds	r3, #255	@ 0xff
 8000c20:	4a86      	ldr	r2, [pc, #536]	@ (8000e3c <read_pwm+0x2e4>)
 8000c22:	6093      	str	r3, [r2, #8]
 8000c24:	e006      	b.n	8000c34 <read_pwm+0xdc>
							read_1.out = read_1.end - read_1.start;
 8000c26:	4b85      	ldr	r3, [pc, #532]	@ (8000e3c <read_pwm+0x2e4>)
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	4b84      	ldr	r3, [pc, #528]	@ (8000e3c <read_pwm+0x2e4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	4a82      	ldr	r2, [pc, #520]	@ (8000e3c <read_pwm+0x2e4>)
 8000c32:	6093      	str	r3, [r2, #8]
						if(read_1.out > 61200)
 8000c34:	4b81      	ldr	r3, [pc, #516]	@ (8000e3c <read_pwm+0x2e4>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d904      	bls.n	8000c4a <read_pwm+0xf2>
							read_1.out = 61200;
 8000c40:	4b7e      	ldr	r3, [pc, #504]	@ (8000e3c <read_pwm+0x2e4>)
 8000c42:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	e01a      	b.n	8000c80 <read_pwm+0x128>
						else if(read_1.out < 7000)
 8000c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e3c <read_pwm+0x2e4>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d804      	bhi.n	8000c60 <read_pwm+0x108>
							read_1.out = 7000;
 8000c56:	4b79      	ldr	r3, [pc, #484]	@ (8000e3c <read_pwm+0x2e4>)
 8000c58:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	e00f      	b.n	8000c80 <read_pwm+0x128>
						else if(40000 <= read_1.out && read_1.out <= 45000)
 8000c60:	4b76      	ldr	r3, [pc, #472]	@ (8000e3c <read_pwm+0x2e4>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d909      	bls.n	8000c80 <read_pwm+0x128>
 8000c6c:	4b73      	ldr	r3, [pc, #460]	@ (8000e3c <read_pwm+0x2e4>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d803      	bhi.n	8000c80 <read_pwm+0x128>
							read_1.out = 43200;
 8000c78:	4b70      	ldr	r3, [pc, #448]	@ (8000e3c <read_pwm+0x2e4>)
 8000c7a:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8000c7e:	609a      	str	r2, [r3, #8]
						array_read_ch1[count_ch1] = read_1.out;
 8000c80:	4b70      	ldr	r3, [pc, #448]	@ (8000e44 <read_pwm+0x2ec>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6d      	ldr	r2, [pc, #436]	@ (8000e3c <read_pwm+0x2e4>)
 8000c86:	6892      	ldr	r2, [r2, #8]
 8000c88:	496f      	ldr	r1, [pc, #444]	@ (8000e48 <read_pwm+0x2f0>)
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					    count_ch1 = (count_ch1 + 1) % size;
 8000c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8000e44 <read_pwm+0x2ec>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4a6d      	ldr	r2, [pc, #436]	@ (8000e4c <read_pwm+0x2f4>)
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c9c:	fb01 f202 	mul.w	r2, r1, r2
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	4a68      	ldr	r2, [pc, #416]	@ (8000e44 <read_pwm+0x2ec>)
 8000ca4:	6013      	str	r3, [r2, #0]
						read_1.out = media_filter(array_read_ch1,10);
 8000ca6:	210a      	movs	r1, #10
 8000ca8:	4867      	ldr	r0, [pc, #412]	@ (8000e48 <read_pwm+0x2f0>)
 8000caa:	f7ff fef4 	bl	8000a96 <media_filter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a62      	ldr	r2, [pc, #392]	@ (8000e3c <read_pwm+0x2e4>)
 8000cb2:	6093      	str	r3, [r2, #8]
						GPIO_InitStruct.Pin = CH1_Pin;
 8000cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbc:	4b64      	ldr	r3, [pc, #400]	@ (8000e50 <read_pwm+0x2f8>)
 8000cbe:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4859      	ldr	r0, [pc, #356]	@ (8000e34 <read_pwm+0x2dc>)
 8000cd0:	f001 fea2 	bl	8002a18 <HAL_GPIO_Init>
			break;
 8000cd4:	f000 bd02 	b.w	80016dc <read_pwm+0xb84>
			case 2:
				if(HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin)==1)
 8000cd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cdc:	4855      	ldr	r0, [pc, #340]	@ (8000e34 <read_pwm+0x2dc>)
 8000cde:	f002 f82f 	bl	8002d40 <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d116      	bne.n	8000d16 <read_pwm+0x1be>
					{
						read_2.start = htim1.Instance->CNT;
 8000ce8:	4b53      	ldr	r3, [pc, #332]	@ (8000e38 <read_pwm+0x2e0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cee:	4a59      	ldr	r2, [pc, #356]	@ (8000e54 <read_pwm+0x2fc>)
 8000cf0:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH2_Pin;
 8000cf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cf6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfa:	4b51      	ldr	r3, [pc, #324]	@ (8000e40 <read_pwm+0x2e8>)
 8000cfc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4849      	ldr	r0, [pc, #292]	@ (8000e34 <read_pwm+0x2dc>)
 8000d0e:	f001 fe83 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH2_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000d12:	f000 bce3 	b.w	80016dc <read_pwm+0xb84>
						read_2.end = htim1.Instance->CNT;
 8000d16:	4b48      	ldr	r3, [pc, #288]	@ (8000e38 <read_pwm+0x2e0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8000e54 <read_pwm+0x2fc>)
 8000d1e:	6053      	str	r3, [r2, #4]
						if(read_2.start > read_2.end)
 8000d20:	4b4c      	ldr	r3, [pc, #304]	@ (8000e54 <read_pwm+0x2fc>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b4b      	ldr	r3, [pc, #300]	@ (8000e54 <read_pwm+0x2fc>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d90a      	bls.n	8000d42 <read_pwm+0x1ea>
							read_2.out = 65535 - read_2.start + read_2.end;
 8000d2c:	4b49      	ldr	r3, [pc, #292]	@ (8000e54 <read_pwm+0x2fc>)
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	4b48      	ldr	r3, [pc, #288]	@ (8000e54 <read_pwm+0x2fc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000d3a:	33ff      	adds	r3, #255	@ 0xff
 8000d3c:	4a45      	ldr	r2, [pc, #276]	@ (8000e54 <read_pwm+0x2fc>)
 8000d3e:	6093      	str	r3, [r2, #8]
 8000d40:	e006      	b.n	8000d50 <read_pwm+0x1f8>
							read_2.out = read_2.end - read_2.start;
 8000d42:	4b44      	ldr	r3, [pc, #272]	@ (8000e54 <read_pwm+0x2fc>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	4b43      	ldr	r3, [pc, #268]	@ (8000e54 <read_pwm+0x2fc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	4a41      	ldr	r2, [pc, #260]	@ (8000e54 <read_pwm+0x2fc>)
 8000d4e:	6093      	str	r3, [r2, #8]
						if(read_2.out >= 61200)
 8000d50:	4b40      	ldr	r3, [pc, #256]	@ (8000e54 <read_pwm+0x2fc>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d904      	bls.n	8000d66 <read_pwm+0x20e>
							read_2.out = 61200;
 8000d5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e54 <read_pwm+0x2fc>)
 8000d5e:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	e01a      	b.n	8000d9c <read_pwm+0x244>
						else if(read_2.out <= 7000)
 8000d66:	4b3b      	ldr	r3, [pc, #236]	@ (8000e54 <read_pwm+0x2fc>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d804      	bhi.n	8000d7c <read_pwm+0x224>
							read_2.out = 7000;
 8000d72:	4b38      	ldr	r3, [pc, #224]	@ (8000e54 <read_pwm+0x2fc>)
 8000d74:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	e00f      	b.n	8000d9c <read_pwm+0x244>
						else if(40000 < read_2.out && read_2.out < 45000)
 8000d7c:	4b35      	ldr	r3, [pc, #212]	@ (8000e54 <read_pwm+0x2fc>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d909      	bls.n	8000d9c <read_pwm+0x244>
 8000d88:	4b32      	ldr	r3, [pc, #200]	@ (8000e54 <read_pwm+0x2fc>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d803      	bhi.n	8000d9c <read_pwm+0x244>
							read_2.out = 43250;
 8000d94:	4b2f      	ldr	r3, [pc, #188]	@ (8000e54 <read_pwm+0x2fc>)
 8000d96:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8000d9a:	609a      	str	r2, [r3, #8]
						array_read_ch2[count_ch2] = read_2.out;
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <read_pwm+0x300>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e54 <read_pwm+0x2fc>)
 8000da2:	6892      	ldr	r2, [r2, #8]
 8000da4:	492d      	ldr	r1, [pc, #180]	@ (8000e5c <read_pwm+0x304>)
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					    count_ch2 = (count_ch2 + 1) % size;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <read_pwm+0x300>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a26      	ldr	r2, [pc, #152]	@ (8000e4c <read_pwm+0x2f4>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000db8:	fb01 f202 	mul.w	r2, r1, r2
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <read_pwm+0x300>)
 8000dc0:	6013      	str	r3, [r2, #0]
						read_2.out = media_filter(array_read_ch2,10);
 8000dc2:	210a      	movs	r1, #10
 8000dc4:	4825      	ldr	r0, [pc, #148]	@ (8000e5c <read_pwm+0x304>)
 8000dc6:	f7ff fe66 	bl	8000a96 <media_filter>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a21      	ldr	r2, [pc, #132]	@ (8000e54 <read_pwm+0x2fc>)
 8000dce:	6093      	str	r3, [r2, #8]
						GPIO_InitStruct.Pin = CH2_Pin;
 8000dd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <read_pwm+0x2f8>)
 8000dda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000de8:	4619      	mov	r1, r3
 8000dea:	4812      	ldr	r0, [pc, #72]	@ (8000e34 <read_pwm+0x2dc>)
 8000dec:	f001 fe14 	bl	8002a18 <HAL_GPIO_Init>
			break;
 8000df0:	f000 bc74 	b.w	80016dc <read_pwm+0xb84>
			case 3:
				if(HAL_GPIO_ReadPin(CH3_GPIO_Port, CH3_Pin)==1)
 8000df4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df8:	480e      	ldr	r0, [pc, #56]	@ (8000e34 <read_pwm+0x2dc>)
 8000dfa:	f001 ffa1 	bl	8002d40 <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d12f      	bne.n	8000e64 <read_pwm+0x30c>
					{
						read_3.start = htim1.Instance->CNT;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <read_pwm+0x2e0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0a:	4a15      	ldr	r2, [pc, #84]	@ (8000e60 <read_pwm+0x308>)
 8000e0c:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH3_Pin;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <read_pwm+0x2e8>)
 8000e18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e26:	4619      	mov	r1, r3
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <read_pwm+0x2dc>)
 8000e2a:	f001 fdf5 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH3_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000e2e:	f000 bc55 	b.w	80016dc <read_pwm+0xb84>
 8000e32:	bf00      	nop
 8000e34:	40011000 	.word	0x40011000
 8000e38:	2000002c 	.word	0x2000002c
 8000e3c:	20000228 	.word	0x20000228
 8000e40:	10210000 	.word	0x10210000
 8000e44:	20000220 	.word	0x20000220
 8000e48:	200001a0 	.word	0x200001a0
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	10110000 	.word	0x10110000
 8000e54:	20000238 	.word	0x20000238
 8000e58:	20000224 	.word	0x20000224
 8000e5c:	200001c8 	.word	0x200001c8
 8000e60:	20000248 	.word	0x20000248
						read_3.end = htim1.Instance->CNT;
 8000e64:	4b9d      	ldr	r3, [pc, #628]	@ (80010dc <read_pwm+0x584>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	4a9d      	ldr	r2, [pc, #628]	@ (80010e0 <read_pwm+0x588>)
 8000e6c:	6053      	str	r3, [r2, #4]
						if(read_3.start > read_3.end)
 8000e6e:	4b9c      	ldr	r3, [pc, #624]	@ (80010e0 <read_pwm+0x588>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4b9b      	ldr	r3, [pc, #620]	@ (80010e0 <read_pwm+0x588>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d90a      	bls.n	8000e90 <read_pwm+0x338>
							read_3.out = 65535 - read_3.start + read_3.end;
 8000e7a:	4b99      	ldr	r3, [pc, #612]	@ (80010e0 <read_pwm+0x588>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4b98      	ldr	r3, [pc, #608]	@ (80010e0 <read_pwm+0x588>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e88:	33ff      	adds	r3, #255	@ 0xff
 8000e8a:	4a95      	ldr	r2, [pc, #596]	@ (80010e0 <read_pwm+0x588>)
 8000e8c:	6093      	str	r3, [r2, #8]
 8000e8e:	e006      	b.n	8000e9e <read_pwm+0x346>
							read_3.out = read_3.end - read_3.start;
 8000e90:	4b93      	ldr	r3, [pc, #588]	@ (80010e0 <read_pwm+0x588>)
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4b92      	ldr	r3, [pc, #584]	@ (80010e0 <read_pwm+0x588>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	4a91      	ldr	r2, [pc, #580]	@ (80010e0 <read_pwm+0x588>)
 8000e9c:	6093      	str	r3, [r2, #8]
						if(read_3.out >= 61200)
 8000e9e:	4b90      	ldr	r3, [pc, #576]	@ (80010e0 <read_pwm+0x588>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d904      	bls.n	8000eb4 <read_pwm+0x35c>
							read_3.out = 61200;
 8000eaa:	4b8d      	ldr	r3, [pc, #564]	@ (80010e0 <read_pwm+0x588>)
 8000eac:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	e01a      	b.n	8000eea <read_pwm+0x392>
						else if(read_3.out <= 7000)
 8000eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80010e0 <read_pwm+0x588>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d804      	bhi.n	8000eca <read_pwm+0x372>
							read_3.out = 7000;
 8000ec0:	4b87      	ldr	r3, [pc, #540]	@ (80010e0 <read_pwm+0x588>)
 8000ec2:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e00f      	b.n	8000eea <read_pwm+0x392>
						else if(40000 <= read_3.out && read_3.out <= 45000)
 8000eca:	4b85      	ldr	r3, [pc, #532]	@ (80010e0 <read_pwm+0x588>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d909      	bls.n	8000eea <read_pwm+0x392>
 8000ed6:	4b82      	ldr	r3, [pc, #520]	@ (80010e0 <read_pwm+0x588>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d803      	bhi.n	8000eea <read_pwm+0x392>
							read_3.out = 41300;
 8000ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80010e0 <read_pwm+0x588>)
 8000ee4:	f24a 1254 	movw	r2, #41300	@ 0xa154
 8000ee8:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH3_Pin;
 8000eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80010e4 <read_pwm+0x58c>)
 8000ef4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000f02:	4619      	mov	r1, r3
 8000f04:	4878      	ldr	r0, [pc, #480]	@ (80010e8 <read_pwm+0x590>)
 8000f06:	f001 fd87 	bl	8002a18 <HAL_GPIO_Init>
			break;
 8000f0a:	e3e7      	b.n	80016dc <read_pwm+0xb84>
			case 4:
				if(HAL_GPIO_ReadPin(CH4_GPIO_Port, CH4_Pin)==1)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4877      	ldr	r0, [pc, #476]	@ (80010ec <read_pwm+0x594>)
 8000f10:	f001 ff16 	bl	8002d40 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d114      	bne.n	8000f44 <read_pwm+0x3ec>
					{
						read_4.start = htim1.Instance->CNT;
 8000f1a:	4b70      	ldr	r3, [pc, #448]	@ (80010dc <read_pwm+0x584>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	4a73      	ldr	r2, [pc, #460]	@ (80010f0 <read_pwm+0x598>)
 8000f22:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH4_Pin;
 8000f24:	2301      	movs	r3, #1
 8000f26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2a:	4b72      	ldr	r3, [pc, #456]	@ (80010f4 <read_pwm+0x59c>)
 8000f2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	486b      	ldr	r0, [pc, #428]	@ (80010ec <read_pwm+0x594>)
 8000f3e:	f001 fd6b 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH4_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000f42:	e3cb      	b.n	80016dc <read_pwm+0xb84>
						read_4.end = htim1.Instance->CNT;
 8000f44:	4b65      	ldr	r3, [pc, #404]	@ (80010dc <read_pwm+0x584>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4a:	4a69      	ldr	r2, [pc, #420]	@ (80010f0 <read_pwm+0x598>)
 8000f4c:	6053      	str	r3, [r2, #4]
						if(read_4.start > read_4.end)
 8000f4e:	4b68      	ldr	r3, [pc, #416]	@ (80010f0 <read_pwm+0x598>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b67      	ldr	r3, [pc, #412]	@ (80010f0 <read_pwm+0x598>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d90a      	bls.n	8000f70 <read_pwm+0x418>
							read_4.out = 65535 - read_4.start + read_4.end;
 8000f5a:	4b65      	ldr	r3, [pc, #404]	@ (80010f0 <read_pwm+0x598>)
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4b64      	ldr	r3, [pc, #400]	@ (80010f0 <read_pwm+0x598>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f68:	33ff      	adds	r3, #255	@ 0xff
 8000f6a:	4a61      	ldr	r2, [pc, #388]	@ (80010f0 <read_pwm+0x598>)
 8000f6c:	6093      	str	r3, [r2, #8]
 8000f6e:	e006      	b.n	8000f7e <read_pwm+0x426>
							read_4.out = read_4.end - read_4.start;
 8000f70:	4b5f      	ldr	r3, [pc, #380]	@ (80010f0 <read_pwm+0x598>)
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4b5e      	ldr	r3, [pc, #376]	@ (80010f0 <read_pwm+0x598>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	4a5d      	ldr	r2, [pc, #372]	@ (80010f0 <read_pwm+0x598>)
 8000f7c:	6093      	str	r3, [r2, #8]
						if(read_4.out > 61200)
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80010f0 <read_pwm+0x598>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d904      	bls.n	8000f94 <read_pwm+0x43c>
							read_4.out = 61200;
 8000f8a:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <read_pwm+0x598>)
 8000f8c:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	e01a      	b.n	8000fca <read_pwm+0x472>
						else if(read_4.out < 25000)
 8000f94:	4b56      	ldr	r3, [pc, #344]	@ (80010f0 <read_pwm+0x598>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d804      	bhi.n	8000faa <read_pwm+0x452>
							read_4.out = 25000;
 8000fa0:	4b53      	ldr	r3, [pc, #332]	@ (80010f0 <read_pwm+0x598>)
 8000fa2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	e00f      	b.n	8000fca <read_pwm+0x472>
						else if(40000 <= read_4.out && read_4.out <= 45000)
 8000faa:	4b51      	ldr	r3, [pc, #324]	@ (80010f0 <read_pwm+0x598>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d909      	bls.n	8000fca <read_pwm+0x472>
 8000fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80010f0 <read_pwm+0x598>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d803      	bhi.n	8000fca <read_pwm+0x472>
							read_4.out = 42900;
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <read_pwm+0x598>)
 8000fc4:	f24a 7294 	movw	r2, #42900	@ 0xa794
 8000fc8:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH4_Pin;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd0:	4b44      	ldr	r3, [pc, #272]	@ (80010e4 <read_pwm+0x58c>)
 8000fd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4842      	ldr	r0, [pc, #264]	@ (80010ec <read_pwm+0x594>)
 8000fe4:	f001 fd18 	bl	8002a18 <HAL_GPIO_Init>
					break;
 8000fe8:	e378      	b.n	80016dc <read_pwm+0xb84>
			case 5:
				if(HAL_GPIO_ReadPin(CH5_GPIO_Port, CH5_Pin)==1)
 8000fea:	2108      	movs	r1, #8
 8000fec:	4842      	ldr	r0, [pc, #264]	@ (80010f8 <read_pwm+0x5a0>)
 8000fee:	f001 fea7 	bl	8002d40 <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d114      	bne.n	8001022 <read_pwm+0x4ca>
					{
						read_5.start = htim1.Instance->CNT;
 8000ff8:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <read_pwm+0x584>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80010fc <read_pwm+0x5a4>)
 8001000:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH5_Pin;
 8001002:	2308      	movs	r3, #8
 8001004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001008:	4b3a      	ldr	r3, [pc, #232]	@ (80010f4 <read_pwm+0x59c>)
 800100a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001018:	4619      	mov	r1, r3
 800101a:	4837      	ldr	r0, [pc, #220]	@ (80010f8 <read_pwm+0x5a0>)
 800101c:	f001 fcfc 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH5_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8001020:	e35c      	b.n	80016dc <read_pwm+0xb84>
						read_5.end = htim1.Instance->CNT;
 8001022:	4b2e      	ldr	r3, [pc, #184]	@ (80010dc <read_pwm+0x584>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001028:	4a34      	ldr	r2, [pc, #208]	@ (80010fc <read_pwm+0x5a4>)
 800102a:	6053      	str	r3, [r2, #4]
						if(read_5.start > read_5.end)
 800102c:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <read_pwm+0x5a4>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <read_pwm+0x5a4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d90a      	bls.n	800104e <read_pwm+0x4f6>
							read_5.out = 65535 - read_5.start + read_5.end;
 8001038:	4b30      	ldr	r3, [pc, #192]	@ (80010fc <read_pwm+0x5a4>)
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <read_pwm+0x5a4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001046:	33ff      	adds	r3, #255	@ 0xff
 8001048:	4a2c      	ldr	r2, [pc, #176]	@ (80010fc <read_pwm+0x5a4>)
 800104a:	6093      	str	r3, [r2, #8]
 800104c:	e006      	b.n	800105c <read_pwm+0x504>
							read_5.out = read_5.end - read_5.start;
 800104e:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <read_pwm+0x5a4>)
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <read_pwm+0x5a4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	4a28      	ldr	r2, [pc, #160]	@ (80010fc <read_pwm+0x5a4>)
 800105a:	6093      	str	r3, [r2, #8]
						if(read_5.out > 61200)
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <read_pwm+0x5a4>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001064:	4293      	cmp	r3, r2
 8001066:	d904      	bls.n	8001072 <read_pwm+0x51a>
							read_5.out = 61200;
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <read_pwm+0x5a4>)
 800106a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	e008      	b.n	8001084 <read_pwm+0x52c>
						else if(read_5.out < 7200)
 8001072:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <read_pwm+0x5a4>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 800107a:	d203      	bcs.n	8001084 <read_pwm+0x52c>
							read_5.out = 7200;
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <read_pwm+0x5a4>)
 800107e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8001082:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH5_Pin;
 8001084:	2308      	movs	r3, #8
 8001086:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <read_pwm+0x58c>)
 800108c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800109a:	4619      	mov	r1, r3
 800109c:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <read_pwm+0x5a0>)
 800109e:	f001 fcbb 	bl	8002a18 <HAL_GPIO_Init>
					break;
 80010a2:	e31b      	b.n	80016dc <read_pwm+0xb84>
			case 6:
				if(HAL_GPIO_ReadPin(CH6_GPIO_Port, CH6_Pin)==1)
 80010a4:	2110      	movs	r1, #16
 80010a6:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <read_pwm+0x5a0>)
 80010a8:	f001 fe4a 	bl	8002d40 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d128      	bne.n	8001104 <read_pwm+0x5ac>
					{
						read_6.start = htim1.Instance->CNT;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <read_pwm+0x584>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <read_pwm+0x5a8>)
 80010ba:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH6_Pin;
 80010bc:	2310      	movs	r3, #16
 80010be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <read_pwm+0x59c>)
 80010c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80010d2:	4619      	mov	r1, r3
 80010d4:	4808      	ldr	r0, [pc, #32]	@ (80010f8 <read_pwm+0x5a0>)
 80010d6:	f001 fc9f 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH6_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80010da:	e2ff      	b.n	80016dc <read_pwm+0xb84>
 80010dc:	2000002c 	.word	0x2000002c
 80010e0:	20000248 	.word	0x20000248
 80010e4:	10110000 	.word	0x10110000
 80010e8:	40011000 	.word	0x40011000
 80010ec:	40011400 	.word	0x40011400
 80010f0:	20000258 	.word	0x20000258
 80010f4:	10210000 	.word	0x10210000
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	20000268 	.word	0x20000268
 8001100:	20000278 	.word	0x20000278
						read_6.end = htim1.Instance->CNT;
 8001104:	4b9f      	ldr	r3, [pc, #636]	@ (8001384 <read_pwm+0x82c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110a:	4a9f      	ldr	r2, [pc, #636]	@ (8001388 <read_pwm+0x830>)
 800110c:	6053      	str	r3, [r2, #4]
						if(read_6.start > read_6.end)
 800110e:	4b9e      	ldr	r3, [pc, #632]	@ (8001388 <read_pwm+0x830>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b9d      	ldr	r3, [pc, #628]	@ (8001388 <read_pwm+0x830>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	429a      	cmp	r2, r3
 8001118:	d90a      	bls.n	8001130 <read_pwm+0x5d8>
							read_6.out = 65535 - read_6.start + read_6.end;
 800111a:	4b9b      	ldr	r3, [pc, #620]	@ (8001388 <read_pwm+0x830>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4b9a      	ldr	r3, [pc, #616]	@ (8001388 <read_pwm+0x830>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001128:	33ff      	adds	r3, #255	@ 0xff
 800112a:	4a97      	ldr	r2, [pc, #604]	@ (8001388 <read_pwm+0x830>)
 800112c:	6093      	str	r3, [r2, #8]
 800112e:	e006      	b.n	800113e <read_pwm+0x5e6>
							read_6.out = read_6.end - read_6.start;
 8001130:	4b95      	ldr	r3, [pc, #596]	@ (8001388 <read_pwm+0x830>)
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4b94      	ldr	r3, [pc, #592]	@ (8001388 <read_pwm+0x830>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4a93      	ldr	r2, [pc, #588]	@ (8001388 <read_pwm+0x830>)
 800113c:	6093      	str	r3, [r2, #8]
						if(read_6.out > 13700)
 800113e:	4b92      	ldr	r3, [pc, #584]	@ (8001388 <read_pwm+0x830>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f243 5284 	movw	r2, #13700	@ 0x3584
 8001146:	4293      	cmp	r3, r2
 8001148:	d904      	bls.n	8001154 <read_pwm+0x5fc>
							read_6.out = 13700;
 800114a:	4b8f      	ldr	r3, [pc, #572]	@ (8001388 <read_pwm+0x830>)
 800114c:	f243 5284 	movw	r2, #13700	@ 0x3584
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	e009      	b.n	8001168 <read_pwm+0x610>
						else if(read_6.out < 6900)
 8001154:	4b8c      	ldr	r3, [pc, #560]	@ (8001388 <read_pwm+0x830>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f641 22f3 	movw	r2, #6899	@ 0x1af3
 800115c:	4293      	cmp	r3, r2
 800115e:	d803      	bhi.n	8001168 <read_pwm+0x610>
							read_6.out = 6900;
 8001160:	4b89      	ldr	r3, [pc, #548]	@ (8001388 <read_pwm+0x830>)
 8001162:	f641 22f4 	movw	r2, #6900	@ 0x1af4
 8001166:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH6_Pin;
 8001168:	2310      	movs	r3, #16
 800116a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116e:	4b87      	ldr	r3, [pc, #540]	@ (800138c <read_pwm+0x834>)
 8001170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800117e:	4619      	mov	r1, r3
 8001180:	4883      	ldr	r0, [pc, #524]	@ (8001390 <read_pwm+0x838>)
 8001182:	f001 fc49 	bl	8002a18 <HAL_GPIO_Init>
					break;
 8001186:	e2a9      	b.n	80016dc <read_pwm+0xb84>
			case 7:
					if(HAL_GPIO_ReadPin(CH7_GPIO_Port, CH7_Pin)==1)
 8001188:	2120      	movs	r1, #32
 800118a:	4881      	ldr	r0, [pc, #516]	@ (8001390 <read_pwm+0x838>)
 800118c:	f001 fdd8 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b01      	cmp	r3, #1
 8001194:	d114      	bne.n	80011c0 <read_pwm+0x668>
					{
						read_7.start = htim1.Instance->CNT;
 8001196:	4b7b      	ldr	r3, [pc, #492]	@ (8001384 <read_pwm+0x82c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	4a7d      	ldr	r2, [pc, #500]	@ (8001394 <read_pwm+0x83c>)
 800119e:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH7_Pin;
 80011a0:	2320      	movs	r3, #32
 80011a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001398 <read_pwm+0x840>)
 80011a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80011b6:	4619      	mov	r1, r3
 80011b8:	4875      	ldr	r0, [pc, #468]	@ (8001390 <read_pwm+0x838>)
 80011ba:	f001 fc2d 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH7_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80011be:	e28d      	b.n	80016dc <read_pwm+0xb84>
						read_7.end = htim1.Instance->CNT;
 80011c0:	4b70      	ldr	r3, [pc, #448]	@ (8001384 <read_pwm+0x82c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c6:	4a73      	ldr	r2, [pc, #460]	@ (8001394 <read_pwm+0x83c>)
 80011c8:	6053      	str	r3, [r2, #4]
						if( read_7.start > read_7.end)
 80011ca:	4b72      	ldr	r3, [pc, #456]	@ (8001394 <read_pwm+0x83c>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b71      	ldr	r3, [pc, #452]	@ (8001394 <read_pwm+0x83c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d90a      	bls.n	80011ec <read_pwm+0x694>
							read_7.out = 65535 - read_7.start + read_7.end;
 80011d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001394 <read_pwm+0x83c>)
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4b6e      	ldr	r3, [pc, #440]	@ (8001394 <read_pwm+0x83c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e4:	33ff      	adds	r3, #255	@ 0xff
 80011e6:	4a6b      	ldr	r2, [pc, #428]	@ (8001394 <read_pwm+0x83c>)
 80011e8:	6093      	str	r3, [r2, #8]
 80011ea:	e006      	b.n	80011fa <read_pwm+0x6a2>
							read_7.out = read_7.end - read_7.start;
 80011ec:	4b69      	ldr	r3, [pc, #420]	@ (8001394 <read_pwm+0x83c>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4b68      	ldr	r3, [pc, #416]	@ (8001394 <read_pwm+0x83c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	4a67      	ldr	r2, [pc, #412]	@ (8001394 <read_pwm+0x83c>)
 80011f8:	6093      	str	r3, [r2, #8]
						if(read_7.out > 13500)
 80011fa:	4b66      	ldr	r3, [pc, #408]	@ (8001394 <read_pwm+0x83c>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 8001202:	4293      	cmp	r3, r2
 8001204:	d904      	bls.n	8001210 <read_pwm+0x6b8>
							read_7.out = 13500;
 8001206:	4b63      	ldr	r3, [pc, #396]	@ (8001394 <read_pwm+0x83c>)
 8001208:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	e009      	b.n	8001224 <read_pwm+0x6cc>
						else if(read_7.out < 7140)
 8001210:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <read_pwm+0x83c>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f641 32e3 	movw	r2, #7139	@ 0x1be3
 8001218:	4293      	cmp	r3, r2
 800121a:	d803      	bhi.n	8001224 <read_pwm+0x6cc>
							read_7.out = 7140;
 800121c:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <read_pwm+0x83c>)
 800121e:	f641 32e4 	movw	r2, #7140	@ 0x1be4
 8001222:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH7_Pin;
 8001224:	2320      	movs	r3, #32
 8001226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122a:	4b58      	ldr	r3, [pc, #352]	@ (800138c <read_pwm+0x834>)
 800122c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800123a:	4619      	mov	r1, r3
 800123c:	4854      	ldr	r0, [pc, #336]	@ (8001390 <read_pwm+0x838>)
 800123e:	f001 fbeb 	bl	8002a18 <HAL_GPIO_Init>
					break;
 8001242:	e24b      	b.n	80016dc <read_pwm+0xb84>
			case 8:
					if(HAL_GPIO_ReadPin(CH8_GPIO_Port, CH8_Pin)==1)
 8001244:	2140      	movs	r1, #64	@ 0x40
 8001246:	4852      	ldr	r0, [pc, #328]	@ (8001390 <read_pwm+0x838>)
 8001248:	f001 fd7a 	bl	8002d40 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d112      	bne.n	8001278 <read_pwm+0x720>
					{
						read_8.start = htim1.Instance->CNT;
 8001252:	4b4c      	ldr	r3, [pc, #304]	@ (8001384 <read_pwm+0x82c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001258:	4a50      	ldr	r2, [pc, #320]	@ (800139c <read_pwm+0x844>)
 800125a:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH8_Pin;
 800125c:	2340      	movs	r3, #64	@ 0x40
 800125e:	67bb      	str	r3, [r7, #120]	@ 0x78
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001260:	4b4d      	ldr	r3, [pc, #308]	@ (8001398 <read_pwm+0x840>)
 8001262:	67fb      	str	r3, [r7, #124]	@ 0x7c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800126e:	4619      	mov	r1, r3
 8001270:	4847      	ldr	r0, [pc, #284]	@ (8001390 <read_pwm+0x838>)
 8001272:	f001 fbd1 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH8_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8001276:	e231      	b.n	80016dc <read_pwm+0xb84>
						read_8.end = htim1.Instance->CNT;
 8001278:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <read_pwm+0x82c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	4a47      	ldr	r2, [pc, #284]	@ (800139c <read_pwm+0x844>)
 8001280:	6053      	str	r3, [r2, #4]
						if( read_8.start > read_8.end)
 8001282:	4b46      	ldr	r3, [pc, #280]	@ (800139c <read_pwm+0x844>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b45      	ldr	r3, [pc, #276]	@ (800139c <read_pwm+0x844>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d90a      	bls.n	80012a4 <read_pwm+0x74c>
							read_8.out = 65535 - read_8.start + read_8.end;
 800128e:	4b43      	ldr	r3, [pc, #268]	@ (800139c <read_pwm+0x844>)
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4b42      	ldr	r3, [pc, #264]	@ (800139c <read_pwm+0x844>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800129c:	33ff      	adds	r3, #255	@ 0xff
 800129e:	4a3f      	ldr	r2, [pc, #252]	@ (800139c <read_pwm+0x844>)
 80012a0:	6093      	str	r3, [r2, #8]
 80012a2:	e006      	b.n	80012b2 <read_pwm+0x75a>
							read_8.out = read_8.end - read_8.start;
 80012a4:	4b3d      	ldr	r3, [pc, #244]	@ (800139c <read_pwm+0x844>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <read_pwm+0x844>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4a3b      	ldr	r2, [pc, #236]	@ (800139c <read_pwm+0x844>)
 80012b0:	6093      	str	r3, [r2, #8]
						if(read_8.out > 12500)
 80012b2:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <read_pwm+0x844>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d904      	bls.n	80012c8 <read_pwm+0x770>
							read_8.out = 12500;
 80012be:	4b37      	ldr	r3, [pc, #220]	@ (800139c <read_pwm+0x844>)
 80012c0:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	e009      	b.n	80012dc <read_pwm+0x784>
						else if(read_8.out < 6160)
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <read_pwm+0x844>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f641 020f 	movw	r2, #6159	@ 0x180f
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d803      	bhi.n	80012dc <read_pwm+0x784>
							read_8.out = 6160;
 80012d4:	4b31      	ldr	r3, [pc, #196]	@ (800139c <read_pwm+0x844>)
 80012d6:	f641 0210 	movw	r2, #6160	@ 0x1810
 80012da:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH8_Pin;
 80012dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012e4:	2240      	movs	r2, #64	@ 0x40
 80012e6:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012f0:	4a26      	ldr	r2, [pc, #152]	@ (800138c <read_pwm+0x834>)
 80012f2:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001304:	4619      	mov	r1, r3
 8001306:	4822      	ldr	r0, [pc, #136]	@ (8001390 <read_pwm+0x838>)
 8001308:	f001 fb86 	bl	8002a18 <HAL_GPIO_Init>
					break;
 800130c:	e1e6      	b.n	80016dc <read_pwm+0xb84>
			case 9:
					if(HAL_GPIO_ReadPin(CH9_GPIO_Port, CH9_Pin)==1)
 800130e:	2180      	movs	r1, #128	@ 0x80
 8001310:	481f      	ldr	r0, [pc, #124]	@ (8001390 <read_pwm+0x838>)
 8001312:	f001 fd15 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d11d      	bne.n	8001358 <read_pwm+0x800>
					{
						read_9.start = htim1.Instance->CNT;
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <read_pwm+0x82c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001322:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <read_pwm+0x848>)
 8001324:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH9_Pin;
 8001326:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800132a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001332:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001336:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800133a:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <read_pwm+0x840>)
 800133c:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001342:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 800134a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800134e:	4619      	mov	r1, r3
 8001350:	480f      	ldr	r0, [pc, #60]	@ (8001390 <read_pwm+0x838>)
 8001352:	f001 fb61 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH9_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8001356:	e1c1      	b.n	80016dc <read_pwm+0xb84>
						read_9.end = htim1.Instance->CNT;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <read_pwm+0x82c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <read_pwm+0x848>)
 8001360:	6053      	str	r3, [r2, #4]
						if( read_9.start > read_9.end)
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <read_pwm+0x848>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <read_pwm+0x848>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d91a      	bls.n	80013a4 <read_pwm+0x84c>
							read_9.out = 65535 - read_9.start + read_9.end;
 800136e:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <read_pwm+0x848>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <read_pwm+0x848>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800137c:	33ff      	adds	r3, #255	@ 0xff
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <read_pwm+0x848>)
 8001380:	6093      	str	r3, [r2, #8]
 8001382:	e016      	b.n	80013b2 <read_pwm+0x85a>
 8001384:	2000002c 	.word	0x2000002c
 8001388:	20000278 	.word	0x20000278
 800138c:	10110000 	.word	0x10110000
 8001390:	40010c00 	.word	0x40010c00
 8001394:	20000288 	.word	0x20000288
 8001398:	10210000 	.word	0x10210000
 800139c:	20000298 	.word	0x20000298
 80013a0:	200002a8 	.word	0x200002a8
							read_9.out = read_9.end - read_9.start;
 80013a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001644 <read_pwm+0xaec>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001644 <read_pwm+0xaec>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	4aa5      	ldr	r2, [pc, #660]	@ (8001644 <read_pwm+0xaec>)
 80013b0:	6093      	str	r3, [r2, #8]
						if(read_9.out > 12500)
 80013b2:	4ba4      	ldr	r3, [pc, #656]	@ (8001644 <read_pwm+0xaec>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d904      	bls.n	80013c8 <read_pwm+0x870>
							read_9.out = 12500;
 80013be:	4ba1      	ldr	r3, [pc, #644]	@ (8001644 <read_pwm+0xaec>)
 80013c0:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e009      	b.n	80013dc <read_pwm+0x884>
						else if(read_9.out < 6200)
 80013c8:	4b9e      	ldr	r3, [pc, #632]	@ (8001644 <read_pwm+0xaec>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f641 0237 	movw	r2, #6199	@ 0x1837
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d803      	bhi.n	80013dc <read_pwm+0x884>
							read_9.out = 26500;
 80013d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001644 <read_pwm+0xaec>)
 80013d6:	f246 7284 	movw	r2, #26500	@ 0x6784
 80013da:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH9_Pin;
 80013dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80013e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013e4:	2280      	movs	r2, #128	@ 0x80
 80013e6:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80013ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013f0:	4a95      	ldr	r2, [pc, #596]	@ (8001648 <read_pwm+0xaf0>)
 80013f2:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80013f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001404:	4619      	mov	r1, r3
 8001406:	4891      	ldr	r0, [pc, #580]	@ (800164c <read_pwm+0xaf4>)
 8001408:	f001 fb06 	bl	8002a18 <HAL_GPIO_Init>
					break;
 800140c:	e166      	b.n	80016dc <read_pwm+0xb84>
			case 10:
					if(HAL_GPIO_ReadPin(CH10_GPIO_Port, CH10_Pin)==1)
 800140e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001412:	488e      	ldr	r0, [pc, #568]	@ (800164c <read_pwm+0xaf4>)
 8001414:	f001 fc94 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b01      	cmp	r3, #1
 800141c:	d11e      	bne.n	800145c <read_pwm+0x904>
					{
						read_10.start = htim1.Instance->CNT;
 800141e:	4b8c      	ldr	r3, [pc, #560]	@ (8001650 <read_pwm+0xaf8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	4a8b      	ldr	r2, [pc, #556]	@ (8001654 <read_pwm+0xafc>)
 8001426:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH10_Pin;
 8001428:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800142c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001430:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001434:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001436:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800143a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800143e:	4a86      	ldr	r2, [pc, #536]	@ (8001658 <read_pwm+0xb00>)
 8001440:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001446:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001452:	4619      	mov	r1, r3
 8001454:	487d      	ldr	r0, [pc, #500]	@ (800164c <read_pwm+0xaf4>)
 8001456:	f001 fadf 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH10_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 800145a:	e13f      	b.n	80016dc <read_pwm+0xb84>
						read_10.end = htim1.Instance->CNT;
 800145c:	4b7c      	ldr	r3, [pc, #496]	@ (8001650 <read_pwm+0xaf8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	4a7c      	ldr	r2, [pc, #496]	@ (8001654 <read_pwm+0xafc>)
 8001464:	6053      	str	r3, [r2, #4]
						if( read_10.start > read_10.end)
 8001466:	4b7b      	ldr	r3, [pc, #492]	@ (8001654 <read_pwm+0xafc>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b7a      	ldr	r3, [pc, #488]	@ (8001654 <read_pwm+0xafc>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	d90a      	bls.n	8001488 <read_pwm+0x930>
							read_10.out = 65535 - read_10.start + read_10.end;
 8001472:	4b78      	ldr	r3, [pc, #480]	@ (8001654 <read_pwm+0xafc>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4b77      	ldr	r3, [pc, #476]	@ (8001654 <read_pwm+0xafc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001480:	33ff      	adds	r3, #255	@ 0xff
 8001482:	4a74      	ldr	r2, [pc, #464]	@ (8001654 <read_pwm+0xafc>)
 8001484:	6093      	str	r3, [r2, #8]
 8001486:	e006      	b.n	8001496 <read_pwm+0x93e>
							read_10.out = read_10.end - read_10.start;
 8001488:	4b72      	ldr	r3, [pc, #456]	@ (8001654 <read_pwm+0xafc>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4b71      	ldr	r3, [pc, #452]	@ (8001654 <read_pwm+0xafc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	4a70      	ldr	r2, [pc, #448]	@ (8001654 <read_pwm+0xafc>)
 8001494:	6093      	str	r3, [r2, #8]
						if(read_10.out > 60000)
 8001496:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <read_pwm+0xafc>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800149e:	4293      	cmp	r3, r2
 80014a0:	d904      	bls.n	80014ac <read_pwm+0x954>
							read_10.out = 60000;
 80014a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001654 <read_pwm+0xafc>)
 80014a4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	e01a      	b.n	80014e2 <read_pwm+0x98a>
						else if(read_10.out < 6200)
 80014ac:	4b69      	ldr	r3, [pc, #420]	@ (8001654 <read_pwm+0xafc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f641 0237 	movw	r2, #6199	@ 0x1837
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d804      	bhi.n	80014c2 <read_pwm+0x96a>
							read_10.out = 6200;
 80014b8:	4b66      	ldr	r3, [pc, #408]	@ (8001654 <read_pwm+0xafc>)
 80014ba:	f641 0238 	movw	r2, #6200	@ 0x1838
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	e00f      	b.n	80014e2 <read_pwm+0x98a>
						else if(41000 <= read_10.out && read_10.out <= 42000)
 80014c2:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <read_pwm+0xafc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f24a 0227 	movw	r2, #40999	@ 0xa027
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d909      	bls.n	80014e2 <read_pwm+0x98a>
 80014ce:	4b61      	ldr	r3, [pc, #388]	@ (8001654 <read_pwm+0xafc>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d803      	bhi.n	80014e2 <read_pwm+0x98a>
							read_10.out = 42100;
 80014da:	4b5e      	ldr	r3, [pc, #376]	@ (8001654 <read_pwm+0xafc>)
 80014dc:	f24a 4274 	movw	r2, #42100	@ 0xa474
 80014e0:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH10_Pin;
 80014e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014e6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ee:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80014f8:	4a53      	ldr	r2, [pc, #332]	@ (8001648 <read_pwm+0xaf0>)
 80014fa:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001500:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150c:	4619      	mov	r1, r3
 800150e:	484f      	ldr	r0, [pc, #316]	@ (800164c <read_pwm+0xaf4>)
 8001510:	f001 fa82 	bl	8002a18 <HAL_GPIO_Init>
					break;
 8001514:	e0e2      	b.n	80016dc <read_pwm+0xb84>
			case 11:
					if(HAL_GPIO_ReadPin(CH11_GPIO_Port, CH11_Pin)==1)
 8001516:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800151a:	484c      	ldr	r0, [pc, #304]	@ (800164c <read_pwm+0xaf4>)
 800151c:	f001 fc10 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d11e      	bne.n	8001564 <read_pwm+0xa0c>
					{
						read_11.start = htim1.Instance->CNT;
 8001526:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <read_pwm+0xaf8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	4a4b      	ldr	r2, [pc, #300]	@ (800165c <read_pwm+0xb04>)
 800152e:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH11_Pin;
 8001530:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001534:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153c:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001542:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001546:	4a44      	ldr	r2, [pc, #272]	@ (8001658 <read_pwm+0xb00>)
 8001548:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800154e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	4619      	mov	r1, r3
 800155c:	483b      	ldr	r0, [pc, #236]	@ (800164c <read_pwm+0xaf4>)
 800155e:	f001 fa5b 	bl	8002a18 <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH11_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8001562:	e0bb      	b.n	80016dc <read_pwm+0xb84>
						read_11.end = htim1.Instance->CNT;
 8001564:	4b3a      	ldr	r3, [pc, #232]	@ (8001650 <read_pwm+0xaf8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	4a3c      	ldr	r2, [pc, #240]	@ (800165c <read_pwm+0xb04>)
 800156c:	6053      	str	r3, [r2, #4]
						if( read_11.start > read_11.end)
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <read_pwm+0xb04>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <read_pwm+0xb04>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d90a      	bls.n	8001590 <read_pwm+0xa38>
							read_11.out = 65535 - read_11.start + read_11.end;
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <read_pwm+0xb04>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4b37      	ldr	r3, [pc, #220]	@ (800165c <read_pwm+0xb04>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001588:	33ff      	adds	r3, #255	@ 0xff
 800158a:	4a34      	ldr	r2, [pc, #208]	@ (800165c <read_pwm+0xb04>)
 800158c:	6093      	str	r3, [r2, #8]
 800158e:	e006      	b.n	800159e <read_pwm+0xa46>
							read_11.out = read_11.end - read_11.start;
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <read_pwm+0xb04>)
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4b31      	ldr	r3, [pc, #196]	@ (800165c <read_pwm+0xb04>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	4a30      	ldr	r2, [pc, #192]	@ (800165c <read_pwm+0xb04>)
 800159c:	6093      	str	r3, [r2, #8]
						if(read_11.out > 60000)
 800159e:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <read_pwm+0xb04>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d904      	bls.n	80015b4 <read_pwm+0xa5c>
							read_11.out = 60000;
 80015aa:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <read_pwm+0xb04>)
 80015ac:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	e01a      	b.n	80015ea <read_pwm+0xa92>
						else if(read_11.out < 6100)
 80015b4:	4b29      	ldr	r3, [pc, #164]	@ (800165c <read_pwm+0xb04>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f241 72d3 	movw	r2, #6099	@ 0x17d3
 80015bc:	4293      	cmp	r3, r2
 80015be:	d804      	bhi.n	80015ca <read_pwm+0xa72>
							read_11.out = 6100;
 80015c0:	4b26      	ldr	r3, [pc, #152]	@ (800165c <read_pwm+0xb04>)
 80015c2:	f241 72d4 	movw	r2, #6100	@ 0x17d4
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	e00f      	b.n	80015ea <read_pwm+0xa92>
						else if(41000 <= read_11.out && read_11.out <= 42000)
 80015ca:	4b24      	ldr	r3, [pc, #144]	@ (800165c <read_pwm+0xb04>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f24a 0227 	movw	r2, #40999	@ 0xa027
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d909      	bls.n	80015ea <read_pwm+0xa92>
 80015d6:	4b21      	ldr	r3, [pc, #132]	@ (800165c <read_pwm+0xb04>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f24a 4210 	movw	r2, #42000	@ 0xa410
 80015de:	4293      	cmp	r3, r2
 80015e0:	d803      	bhi.n	80015ea <read_pwm+0xa92>
							read_11.out = 42100;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <read_pwm+0xb04>)
 80015e4:	f24a 4274 	movw	r2, #42100	@ 0xa474
 80015e8:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH11_Pin;
 80015ea:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80015f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80015fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001600:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <read_pwm+0xaf0>)
 8001602:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001608:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	@ (800164c <read_pwm+0xaf4>)
 8001618:	f001 f9fe 	bl	8002a18 <HAL_GPIO_Init>
					break;
 800161c:	e05e      	b.n	80016dc <read_pwm+0xb84>
			case 12:
				if(HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0)
 800161e:	2104      	movs	r1, #4
 8001620:	480a      	ldr	r0, [pc, #40]	@ (800164c <read_pwm+0xaf4>)
 8001622:	f001 fb8d 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d103      	bne.n	8001634 <read_pwm+0xadc>
				{
					HAL_TIM_Base_Start_IT(&htim6);
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <read_pwm+0xb08>)
 800162e:	f002 f887 	bl	8003740 <HAL_TIM_Base_Start_IT>
				else
				{
					HAL_TIM_Base_Stop_IT(&htim6);
					htim6.Instance -> CNT =0;
				}
				break;
 8001632:	e053      	b.n	80016dc <read_pwm+0xb84>
					HAL_TIM_Base_Stop_IT(&htim6);
 8001634:	480a      	ldr	r0, [pc, #40]	@ (8001660 <read_pwm+0xb08>)
 8001636:	f002 f8e3 	bl	8003800 <HAL_TIM_Base_Stop_IT>
					htim6.Instance -> CNT =0;
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <read_pwm+0xb08>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
				break;
 8001642:	e04b      	b.n	80016dc <read_pwm+0xb84>
 8001644:	200002a8 	.word	0x200002a8
 8001648:	10110000 	.word	0x10110000
 800164c:	40010c00 	.word	0x40010c00
 8001650:	2000002c 	.word	0x2000002c
 8001654:	200002b8 	.word	0x200002b8
 8001658:	10210000 	.word	0x10210000
 800165c:	200002c8 	.word	0x200002c8
 8001660:	20000104 	.word	0x20000104
			case 13:
				if(HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0)
 8001664:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001668:	481f      	ldr	r0, [pc, #124]	@ (80016e8 <read_pwm+0xb90>)
 800166a:	f001 fb69 	bl	8002d40 <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <read_pwm+0xb24>
				{
					HAL_TIM_Base_Start_IT(&htim6);
 8001674:	481d      	ldr	r0, [pc, #116]	@ (80016ec <read_pwm+0xb94>)
 8001676:	f002 f863 	bl	8003740 <HAL_TIM_Base_Start_IT>
				else
				{
					HAL_TIM_Base_Stop_IT(&htim6);
					htim6.Instance -> CNT =0;
				}
				break;
 800167a:	e02f      	b.n	80016dc <read_pwm+0xb84>
					HAL_TIM_Base_Stop_IT(&htim6);
 800167c:	481b      	ldr	r0, [pc, #108]	@ (80016ec <read_pwm+0xb94>)
 800167e:	f002 f8bf 	bl	8003800 <HAL_TIM_Base_Stop_IT>
					htim6.Instance -> CNT =0;
 8001682:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <read_pwm+0xb94>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
				break;
 800168a:	e027      	b.n	80016dc <read_pwm+0xb84>
			case 14:
				if(HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin)==0)
 800168c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001690:	4815      	ldr	r0, [pc, #84]	@ (80016e8 <read_pwm+0xb90>)
 8001692:	f001 fb55 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <read_pwm+0xb4c>
				{
					HAL_TIM_Base_Start_IT(&htim6);
 800169c:	4813      	ldr	r0, [pc, #76]	@ (80016ec <read_pwm+0xb94>)
 800169e:	f002 f84f 	bl	8003740 <HAL_TIM_Base_Start_IT>
				else
				{
					HAL_TIM_Base_Stop_IT(&htim6);
					htim6.Instance -> CNT =0;
				}
				break;
 80016a2:	e01b      	b.n	80016dc <read_pwm+0xb84>
					HAL_TIM_Base_Stop_IT(&htim6);
 80016a4:	4811      	ldr	r0, [pc, #68]	@ (80016ec <read_pwm+0xb94>)
 80016a6:	f002 f8ab 	bl	8003800 <HAL_TIM_Base_Stop_IT>
					htim6.Instance -> CNT =0;
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <read_pwm+0xb94>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24
				break;
 80016b2:	e013      	b.n	80016dc <read_pwm+0xb84>
			case 15:
				if(HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)==0)
 80016b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016b8:	480b      	ldr	r0, [pc, #44]	@ (80016e8 <read_pwm+0xb90>)
 80016ba:	f001 fb41 	bl	8002d40 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <read_pwm+0xb74>
				{
					HAL_TIM_Base_Start_IT(&htim6);
 80016c4:	4809      	ldr	r0, [pc, #36]	@ (80016ec <read_pwm+0xb94>)
 80016c6:	f002 f83b 	bl	8003740 <HAL_TIM_Base_Start_IT>
				else
				{
					HAL_TIM_Base_Stop_IT(&htim6);
					htim6.Instance -> CNT =0;
				}
				break;
 80016ca:	e006      	b.n	80016da <read_pwm+0xb82>
					HAL_TIM_Base_Stop_IT(&htim6);
 80016cc:	4807      	ldr	r0, [pc, #28]	@ (80016ec <read_pwm+0xb94>)
 80016ce:	f002 f897 	bl	8003800 <HAL_TIM_Base_Stop_IT>
					htim6.Instance -> CNT =0;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <read_pwm+0xb94>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
				break;
 80016da:	bf00      	nop
		}
	}
 80016dc:	bf00      	nop
 80016de:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40011800 	.word	0x40011800
 80016ec:	20000104 	.word	0x20000104

080016f0 <convert>:

void convert(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af02      	add	r7, sp, #8
	//////// JOYSTIK GIUA
	if(read_1.out != 43200 && read_2.out != 43250)
 80016f6:	4b99      	ldr	r3, [pc, #612]	@ (800195c <convert+0x26c>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 80016fe:	4293      	cmp	r3, r2
 8001700:	d07c      	beq.n	80017fc <convert+0x10c>
 8001702:	4b97      	ldr	r3, [pc, #604]	@ (8001960 <convert+0x270>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 800170a:	4293      	cmp	r3, r2
 800170c:	d076      	beq.n	80017fc <convert+0x10c>
	{
		if((val ==4)&&(read_1.out>read_2.out)&&(read_1.out<55000))//(read_1.out > 43200)
 800170e:	4b95      	ldr	r3, [pc, #596]	@ (8001964 <convert+0x274>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b04      	cmp	r3, #4
 8001714:	d10f      	bne.n	8001736 <convert+0x46>
 8001716:	4b91      	ldr	r3, [pc, #580]	@ (800195c <convert+0x26c>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	4b91      	ldr	r3, [pc, #580]	@ (8001960 <convert+0x270>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d909      	bls.n	8001736 <convert+0x46>
 8001722:	4b8e      	ldr	r3, [pc, #568]	@ (800195c <convert+0x26c>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 800172a:	4293      	cmp	r3, r2
 800172c:	d803      	bhi.n	8001736 <convert+0x46>
				{
					val = 4;
 800172e:	4b8d      	ldr	r3, [pc, #564]	@ (8001964 <convert+0x274>)
 8001730:	2204      	movs	r2, #4
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e01f      	b.n	8001776 <convert+0x86>
				}
				else if((read_1.out < read_2.out)&&(read_1.out<10000))//(read_1.out < 43200)
 8001736:	4b89      	ldr	r3, [pc, #548]	@ (800195c <convert+0x26c>)
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	4b89      	ldr	r3, [pc, #548]	@ (8001960 <convert+0x270>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	429a      	cmp	r2, r3
 8001740:	d209      	bcs.n	8001756 <convert+0x66>
 8001742:	4b86      	ldr	r3, [pc, #536]	@ (800195c <convert+0x26c>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f242 720f 	movw	r2, #9999	@ 0x270f
 800174a:	4293      	cmp	r3, r2
 800174c:	d803      	bhi.n	8001756 <convert+0x66>
				{
					val = 2;
 800174e:	4b85      	ldr	r3, [pc, #532]	@ (8001964 <convert+0x274>)
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e00f      	b.n	8001776 <convert+0x86>
				}
				else if((read_1.out>read_2.out)&&(change = 1))//(read_1.out > 43200)
 8001756:	4b81      	ldr	r3, [pc, #516]	@ (800195c <convert+0x26c>)
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	4b81      	ldr	r3, [pc, #516]	@ (8001960 <convert+0x270>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	d906      	bls.n	8001770 <convert+0x80>
 8001762:	4b81      	ldr	r3, [pc, #516]	@ (8001968 <convert+0x278>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
				{
					val = 1;
 8001768:	4b7e      	ldr	r3, [pc, #504]	@ (8001964 <convert+0x274>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e002      	b.n	8001776 <convert+0x86>
				}
				else
				{
					val=  3;
 8001770:	4b7c      	ldr	r3, [pc, #496]	@ (8001964 <convert+0x274>)
 8001772:	2203      	movs	r2, #3
 8001774:	601a      	str	r2, [r3, #0]
				}
				if(read_1.out == 7000 && read_2.out == 7000)
 8001776:	4b79      	ldr	r3, [pc, #484]	@ (800195c <convert+0x26c>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800177e:	4293      	cmp	r3, r2
 8001780:	d109      	bne.n	8001796 <convert+0xa6>
 8001782:	4b77      	ldr	r3, [pc, #476]	@ (8001960 <convert+0x270>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800178a:	4293      	cmp	r3, r2
 800178c:	d103      	bne.n	8001796 <convert+0xa6>
				{
					val =5;
 800178e:	4b75      	ldr	r3, [pc, #468]	@ (8001964 <convert+0x274>)
 8001790:	2205      	movs	r2, #5
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e031      	b.n	80017fa <convert+0x10a>
				}
				else if(read_1.out == 61200 && read_2.out == 7000)
 8001796:	4b71      	ldr	r3, [pc, #452]	@ (800195c <convert+0x26c>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800179e:	4293      	cmp	r3, r2
 80017a0:	d109      	bne.n	80017b6 <convert+0xc6>
 80017a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <convert+0x270>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d103      	bne.n	80017b6 <convert+0xc6>
				{
					val = 6;
 80017ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001964 <convert+0x274>)
 80017b0:	2206      	movs	r2, #6
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e021      	b.n	80017fa <convert+0x10a>
				}
				else if (read_1.out == 7000 && read_2.out ==61200)
 80017b6:	4b69      	ldr	r3, [pc, #420]	@ (800195c <convert+0x26c>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80017be:	4293      	cmp	r3, r2
 80017c0:	d109      	bne.n	80017d6 <convert+0xe6>
 80017c2:	4b67      	ldr	r3, [pc, #412]	@ (8001960 <convert+0x270>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d103      	bne.n	80017d6 <convert+0xe6>
				{
					val = 7;
 80017ce:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <convert+0x274>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e011      	b.n	80017fa <convert+0x10a>
				}
				else if (read_1.out == 61200 && read_2.out ==61200)
 80017d6:	4b61      	ldr	r3, [pc, #388]	@ (800195c <convert+0x26c>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80017de:	4293      	cmp	r3, r2
 80017e0:	f040 808d 	bne.w	80018fe <convert+0x20e>
 80017e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001960 <convert+0x270>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f040 8086 	bne.w	80018fe <convert+0x20e>
				{
					val = 8;
 80017f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001964 <convert+0x274>)
 80017f4:	2208      	movs	r2, #8
 80017f6:	601a      	str	r2, [r3, #0]
				if(read_1.out == 7000 && read_2.out == 7000)
 80017f8:	e081      	b.n	80018fe <convert+0x20e>
 80017fa:	e080      	b.n	80018fe <convert+0x20e>
				}
	}
	else
	{
		// xoay phai
		if(read_1.out > 43200)
 80017fc:	4b57      	ldr	r3, [pc, #348]	@ (800195c <convert+0x26c>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8001804:	4293      	cmp	r3, r2
 8001806:	d917      	bls.n	8001838 <convert+0x148>
		{
			read1_out = map(read_1.out,43200,61200,28700,0);
 8001808:	4b54      	ldr	r3, [pc, #336]	@ (800195c <convert+0x26c>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	b298      	uxth	r0, r3
 800180e:	2300      	movs	r3, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001816:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800181a:	f64a 01c0 	movw	r1, #43200	@ 0xa8c0
 800181e:	f7ff f915 	bl	8000a4c <map>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4b51      	ldr	r3, [pc, #324]	@ (800196c <convert+0x27c>)
 8001828:	601a      	str	r2, [r3, #0]
			val = 1;
 800182a:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <convert+0x274>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
			change = 1;
 8001830:	4b4d      	ldr	r3, [pc, #308]	@ (8001968 <convert+0x278>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e021      	b.n	800187c <convert+0x18c>

		}
		//xoay trai
		else if(read_1.out < 43200)
 8001838:	4b48      	ldr	r3, [pc, #288]	@ (800195c <convert+0x26c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f64a 02bf 	movw	r2, #43199	@ 0xa8bf
 8001840:	4293      	cmp	r3, r2
 8001842:	d817      	bhi.n	8001874 <convert+0x184>
		{
			read1_out = map(read_1.out,7000,43200,0,28700);
 8001844:	4b45      	ldr	r3, [pc, #276]	@ (800195c <convert+0x26c>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	b298      	uxth	r0, r3
 800184a:	f247 031c 	movw	r3, #28700	@ 0x701c
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8001856:	f641 3158 	movw	r1, #7000	@ 0x1b58
 800185a:	f7ff f8f7 	bl	8000a4c <map>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b42      	ldr	r3, [pc, #264]	@ (800196c <convert+0x27c>)
 8001864:	601a      	str	r2, [r3, #0]
			val = 2;
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <convert+0x274>)
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
			change = 2;
 800186c:	4b3e      	ldr	r3, [pc, #248]	@ (8001968 <convert+0x278>)
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e003      	b.n	800187c <convert+0x18c>
		}
		else
		{
			read1_out = 28700;
 8001874:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <convert+0x27c>)
 8001876:	f247 021c 	movw	r2, #28700	@ 0x701c
 800187a:	601a      	str	r2, [r3, #0]
		}

		//ch2 tien lui banh
		if(read_2.out > 43250)
 800187c:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <convert+0x270>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8001884:	4293      	cmp	r3, r2
 8001886:	d917      	bls.n	80018b8 <convert+0x1c8>
		{
			read2_out = map(read_2.out,43250,61200,28700,0);
 8001888:	4b35      	ldr	r3, [pc, #212]	@ (8001960 <convert+0x270>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	b298      	uxth	r0, r3
 800188e:	2300      	movs	r3, #0
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001896:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800189a:	f64a 01f2 	movw	r1, #43250	@ 0xa8f2
 800189e:	f7ff f8d5 	bl	8000a4c <map>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <convert+0x280>)
 80018a8:	601a      	str	r2, [r3, #0]
			val = 3;
 80018aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <convert+0x274>)
 80018ac:	2203      	movs	r2, #3
 80018ae:	601a      	str	r2, [r3, #0]
			change = 3;
 80018b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <convert+0x278>)
 80018b2:	2203      	movs	r2, #3
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e023      	b.n	8001900 <convert+0x210>
		}
		else if((read_2.out < 43250))//||((read1_out>read2_out)&&(read_2.out < 43250))
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <convert+0x270>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f64a 02f1 	movw	r2, #43249	@ 0xa8f1
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d817      	bhi.n	80018f4 <convert+0x204>
		{
			read2_out = map(read_2.out,7000,43250,0,28700);
 80018c4:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <convert+0x270>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	b298      	uxth	r0, r3
 80018ca:	f247 031c 	movw	r3, #28700	@ 0x701c
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 80018d6:	f641 3158 	movw	r1, #7000	@ 0x1b58
 80018da:	f7ff f8b7 	bl	8000a4c <map>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <convert+0x280>)
 80018e4:	601a      	str	r2, [r3, #0]
			val = 4;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <convert+0x274>)
 80018e8:	2204      	movs	r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
			change = 4;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <convert+0x278>)
 80018ee:	2204      	movs	r2, #4
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e005      	b.n	8001900 <convert+0x210>
		}
		else
		{
			read2_out = 28700;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <convert+0x280>)
 80018f6:	f247 021c 	movw	r2, #28700	@ 0x701c
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e000      	b.n	8001900 <convert+0x210>
				if(read_1.out == 7000 && read_2.out == 7000)
 80018fe:	bf00      	nop
		}
	}
		//////////////////++++++end+++++/////////////////

	//ch5 volume speed choi
	read5_out = map(read_5.out,7200,61200,28700,0);
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <convert+0x284>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	b298      	uxth	r0, r3
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f247 031c 	movw	r3, #28700	@ 0x701c
 800190e:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001912:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8001916:	f7ff f899 	bl	8000a4c <map>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <convert+0x288>)
 8001920:	601a      	str	r2, [r3, #0]

	//save status joystick
	if(read_6.out > 7500)
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <convert+0x28c>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800192a:	4293      	cmp	r3, r2
 800192c:	d903      	bls.n	8001936 <convert+0x246>
	{
		save = 1;
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <convert+0x290>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e002      	b.n	800193c <convert+0x24c>
	}
	else
	{
		save = 0;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <convert+0x290>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
	}

	// ch7 disable sensor
	if(read_7.out>8000)
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <convert+0x294>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001944:	d903      	bls.n	800194e <convert+0x25e>
	{
		lock_ss = 1;
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <convert+0x298>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
	}
	else{
		lock_ss = 0;
	}

}
 800194c:	e002      	b.n	8001954 <convert+0x264>
		lock_ss = 0;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <convert+0x298>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000228 	.word	0x20000228
 8001960:	20000238 	.word	0x20000238
 8001964:	2000020c 	.word	0x2000020c
 8001968:	20000218 	.word	0x20000218
 800196c:	20000194 	.word	0x20000194
 8001970:	20000198 	.word	0x20000198
 8001974:	20000268 	.word	0x20000268
 8001978:	2000019c 	.word	0x2000019c
 800197c:	20000278 	.word	0x20000278
 8001980:	20000208 	.word	0x20000208
 8001984:	20000288 	.word	0x20000288
 8001988:	2000021c 	.word	0x2000021c

0800198c <direction>:
void direction(int running,uint32_t speed_CCR1,uint32_t speed_CCR2)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
	//tien
	if(running == 1)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d111      	bne.n	80019c2 <direction+0x36>
	{
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
 800199e:	4a2b      	ldr	r2, [pc, #172]	@ (8001a4c <direction+0xc0>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
 80019a4:	4a29      	ldr	r2, [pc, #164]	@ (8001a4c <direction+0xc0>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019b0:	4827      	ldr	r0, [pc, #156]	@ (8001a50 <direction+0xc4>)
 80019b2:	f001 f9dc 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
 80019b6:	2201      	movs	r2, #1
 80019b8:	2140      	movs	r1, #64	@ 0x40
 80019ba:	4825      	ldr	r0, [pc, #148]	@ (8001a50 <direction+0xc4>)
 80019bc:	f001 f9d7 	bl	8002d6e <HAL_GPIO_WritePin>
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
	}
}
 80019c0:	e03f      	b.n	8001a42 <direction+0xb6>
	else if(running == 2)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d113      	bne.n	80019f0 <direction+0x64>
			TIM3 -> CCR1 = speed_CCR1;
 80019c8:	4a20      	ldr	r2, [pc, #128]	@ (8001a4c <direction+0xc0>)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2+1000; // DC PHAI
 80019ce:	4a1f      	ldr	r2, [pc, #124]	@ (8001a4c <direction+0xc0>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019d6:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019de:	481c      	ldr	r0, [pc, #112]	@ (8001a50 <direction+0xc4>)
 80019e0:	f001 f9c5 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2140      	movs	r1, #64	@ 0x40
 80019e8:	4819      	ldr	r0, [pc, #100]	@ (8001a50 <direction+0xc4>)
 80019ea:	f001 f9c0 	bl	8002d6e <HAL_GPIO_WritePin>
}
 80019ee:	e028      	b.n	8001a42 <direction+0xb6>
	else if(running == 3)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d111      	bne.n	8001a1a <direction+0x8e>
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
 80019f6:	4a15      	ldr	r2, [pc, #84]	@ (8001a4c <direction+0xc0>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
 80019fc:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <direction+0xc0>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a08:	4811      	ldr	r0, [pc, #68]	@ (8001a50 <direction+0xc4>)
 8001a0a:	f001 f9b0 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2140      	movs	r1, #64	@ 0x40
 8001a12:	480f      	ldr	r0, [pc, #60]	@ (8001a50 <direction+0xc4>)
 8001a14:	f001 f9ab 	bl	8002d6e <HAL_GPIO_WritePin>
}
 8001a18:	e013      	b.n	8001a42 <direction+0xb6>
	else if(running == 4)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d110      	bne.n	8001a42 <direction+0xb6>
		TIM3 -> CCR1 = speed_CCR1; // DC TRAI
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <direction+0xc0>)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM3 -> CCR2 = speed_CCR2; // DC PHAI
 8001a26:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <direction+0xc0>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6393      	str	r3, [r2, #56]	@ 0x38
		HAL_GPIO_WritePin(F_R_1A_GPIO_Port, F_R_1A_Pin, SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a32:	4807      	ldr	r0, [pc, #28]	@ (8001a50 <direction+0xc4>)
 8001a34:	f001 f99b 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2140      	movs	r1, #64	@ 0x40
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <direction+0xc4>)
 8001a3e:	f001 f996 	bl	8002d6e <HAL_GPIO_WritePin>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40011000 	.word	0x40011000

08001a54 <Status_SS>:

void Status_SS(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
//	timer_delay = map(read2_out,28700,0,0,600);

	if(flag_tim6 ==1){
 8001a58:	4bb3      	ldr	r3, [pc, #716]	@ (8001d28 <Status_SS+0x2d4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	f040 81ff 	bne.w	8001e60 <Status_SS+0x40c>
		if((HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0) && run==1 && lock_ss ==0)
 8001a62:	2104      	movs	r1, #4
 8001a64:	48b1      	ldr	r0, [pc, #708]	@ (8001d2c <Status_SS+0x2d8>)
 8001a66:	f001 f96b 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d16d      	bne.n	8001b4c <Status_SS+0xf8>
 8001a70:	4baf      	ldr	r3, [pc, #700]	@ (8001d30 <Status_SS+0x2dc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d169      	bne.n	8001b4c <Status_SS+0xf8>
 8001a78:	4bae      	ldr	r3, [pc, #696]	@ (8001d34 <Status_SS+0x2e0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d165      	bne.n	8001b4c <Status_SS+0xf8>
		{
				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2180      	movs	r1, #128	@ 0x80
 8001a84:	48ac      	ldr	r0, [pc, #688]	@ (8001d38 <Status_SS+0x2e4>)
 8001a86:	f001 f972 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a90:	48aa      	ldr	r0, [pc, #680]	@ (8001d3c <Status_SS+0x2e8>)
 8001a92:	f001 f96c 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a9c:	48a7      	ldr	r0, [pc, #668]	@ (8001d3c <Status_SS+0x2e8>)
 8001a9e:	f001 f966 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aa8:	48a4      	ldr	r0, [pc, #656]	@ (8001d3c <Status_SS+0x2e8>)
 8001aaa:	f001 f960 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2180      	movs	r1, #128	@ 0x80
 8001ab2:	48a1      	ldr	r0, [pc, #644]	@ (8001d38 <Status_SS+0x2e4>)
 8001ab4:	f001 f95b 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001abe:	489f      	ldr	r0, [pc, #636]	@ (8001d3c <Status_SS+0x2e8>)
 8001ac0:	f001 f955 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001aca:	489c      	ldr	r0, [pc, #624]	@ (8001d3c <Status_SS+0x2e8>)
 8001acc:	f001 f94f 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad6:	4899      	ldr	r0, [pc, #612]	@ (8001d3c <Status_SS+0x2e8>)
 8001ad8:	f001 f949 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ae2:	4892      	ldr	r0, [pc, #584]	@ (8001d2c <Status_SS+0x2d8>)
 8001ae4:	f001 f943 	bl	8002d6e <HAL_GPIO_WritePin>

				direction(2,20000,15000);// ss1: lui nhe sang phai
 8001ae8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001aec:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7ff ff4b 	bl	800198c <direction>
				HAL_Delay(1000);
 8001af6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001afa:	f000 fe5b 	bl	80027b4 <HAL_Delay>
				direction(2,28700,28700);
 8001afe:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001b02:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001b06:	2002      	movs	r0, #2
 8001b08:	f7ff ff40 	bl	800198c <direction>

				if(HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0){
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4887      	ldr	r0, [pc, #540]	@ (8001d2c <Status_SS+0x2d8>)
 8001b10:	f001 f916 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <Status_SS+0xd6>
					direction(2,20000,15000);// ss1: lui nhe sang phai
 8001b1a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001b1e:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001b22:	2002      	movs	r0, #2
 8001b24:	f7ff ff32 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0){
 8001b28:	e193      	b.n	8001e52 <Status_SS+0x3fe>
				}
				else if(HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin) == 0){
 8001b2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b2e:	4884      	ldr	r0, [pc, #528]	@ (8001d40 <Status_SS+0x2ec>)
 8001b30:	f001 f906 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 818b 	bne.w	8001e52 <Status_SS+0x3fe>
					direction(2,15000,22000);// ss1: lui nhe sang phai
 8001b3c:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001b40:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001b44:	2002      	movs	r0, #2
 8001b46:	f7ff ff21 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0){
 8001b4a:	e182      	b.n	8001e52 <Status_SS+0x3fe>
				}

		}
		else if((HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0) && run ==1 && lock_ss ==0)
 8001b4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b50:	487b      	ldr	r0, [pc, #492]	@ (8001d40 <Status_SS+0x2ec>)
 8001b52:	f001 f8f5 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d16e      	bne.n	8001c3a <Status_SS+0x1e6>
 8001b5c:	4b74      	ldr	r3, [pc, #464]	@ (8001d30 <Status_SS+0x2dc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d16a      	bne.n	8001c3a <Status_SS+0x1e6>
 8001b64:	4b73      	ldr	r3, [pc, #460]	@ (8001d34 <Status_SS+0x2e0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d166      	bne.n	8001c3a <Status_SS+0x1e6>
		{
				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2180      	movs	r1, #128	@ 0x80
 8001b70:	4871      	ldr	r0, [pc, #452]	@ (8001d38 <Status_SS+0x2e4>)
 8001b72:	f001 f8fc 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b7c:	486f      	ldr	r0, [pc, #444]	@ (8001d3c <Status_SS+0x2e8>)
 8001b7e:	f001 f8f6 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b88:	486c      	ldr	r0, [pc, #432]	@ (8001d3c <Status_SS+0x2e8>)
 8001b8a:	f001 f8f0 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b94:	4869      	ldr	r0, [pc, #420]	@ (8001d3c <Status_SS+0x2e8>)
 8001b96:	f001 f8ea 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	4866      	ldr	r0, [pc, #408]	@ (8001d38 <Status_SS+0x2e4>)
 8001ba0:	f001 f8e5 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001baa:	4864      	ldr	r0, [pc, #400]	@ (8001d3c <Status_SS+0x2e8>)
 8001bac:	f001 f8df 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bb6:	4861      	ldr	r0, [pc, #388]	@ (8001d3c <Status_SS+0x2e8>)
 8001bb8:	f001 f8d9 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc2:	485e      	ldr	r0, [pc, #376]	@ (8001d3c <Status_SS+0x2e8>)
 8001bc4:	f001 f8d3 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, SET);// BUZZE KEU
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bce:	4857      	ldr	r0, [pc, #348]	@ (8001d2c <Status_SS+0x2d8>)
 8001bd0:	f001 f8cd 	bl	8002d6e <HAL_GPIO_WritePin>

				direction(1,20000,15000);// ss1: tien nhe sang trai lui +13000
 8001bd4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001bd8:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff fed5 	bl	800198c <direction>
				HAL_Delay(1000);
 8001be2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be6:	f000 fde5 	bl	80027b4 <HAL_Delay>
				direction(1,28700,28700);
 8001bea:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001bee:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff feca 	bl	800198c <direction>

				if(HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0){
 8001bf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bfc:	4850      	ldr	r0, [pc, #320]	@ (8001d40 <Status_SS+0x2ec>)
 8001bfe:	f001 f89f 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <Status_SS+0x1c4>
					direction(1,20000,15000);// ss1: tien nhe sang trai lui +13000
 8001c08:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001c0c:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff febb 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0){
 8001c16:	e11e      	b.n	8001e56 <Status_SS+0x402>
				}
				else if(HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)){
 8001c18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c1c:	4848      	ldr	r0, [pc, #288]	@ (8001d40 <Status_SS+0x2ec>)
 8001c1e:	f001 f88f 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8116 	beq.w	8001e56 <Status_SS+0x402>
					direction(1,15000,22000);// ss1: tiennhe sang trai
 8001c2a:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001c2e:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff feaa 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0){
 8001c38:	e10d      	b.n	8001e56 <Status_SS+0x402>
				}
		}
		else if((HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin)==0) && run == 1 && lock_ss ==0)
 8001c3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c3e:	4840      	ldr	r0, [pc, #256]	@ (8001d40 <Status_SS+0x2ec>)
 8001c40:	f001 f87e 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d17c      	bne.n	8001d44 <Status_SS+0x2f0>
 8001c4a:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <Status_SS+0x2dc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d178      	bne.n	8001d44 <Status_SS+0x2f0>
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <Status_SS+0x2e0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d174      	bne.n	8001d44 <Status_SS+0x2f0>
		{
				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2180      	movs	r1, #128	@ 0x80
 8001c5e:	4836      	ldr	r0, [pc, #216]	@ (8001d38 <Status_SS+0x2e4>)
 8001c60:	f001 f885 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c6a:	4834      	ldr	r0, [pc, #208]	@ (8001d3c <Status_SS+0x2e8>)
 8001c6c:	f001 f87f 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c76:	4831      	ldr	r0, [pc, #196]	@ (8001d3c <Status_SS+0x2e8>)
 8001c78:	f001 f879 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c82:	482e      	ldr	r0, [pc, #184]	@ (8001d3c <Status_SS+0x2e8>)
 8001c84:	f001 f873 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2180      	movs	r1, #128	@ 0x80
 8001c8c:	482a      	ldr	r0, [pc, #168]	@ (8001d38 <Status_SS+0x2e4>)
 8001c8e:	f001 f86e 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c98:	4828      	ldr	r0, [pc, #160]	@ (8001d3c <Status_SS+0x2e8>)
 8001c9a:	f001 f868 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ca4:	4825      	ldr	r0, [pc, #148]	@ (8001d3c <Status_SS+0x2e8>)
 8001ca6:	f001 f862 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cb0:	4822      	ldr	r0, [pc, #136]	@ (8001d3c <Status_SS+0x2e8>)
 8001cb2:	f001 f85c 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, SET);// BUZZE KEU
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cbc:	481b      	ldr	r0, [pc, #108]	@ (8001d2c <Status_SS+0x2d8>)
 8001cbe:	f001 f856 	bl	8002d6e <HAL_GPIO_WritePin>

				direction(2,15000,22000);// ss1: lui nhe sang phai
 8001cc2:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001cc6:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f7ff fe5e 	bl	800198c <direction>
				HAL_Delay(1000);
 8001cd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cd4:	f000 fd6e 	bl	80027b4 <HAL_Delay>
				direction(2,28700,28700);
 8001cd8:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001cdc:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f7ff fe53 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin) == 0){
 8001ce6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cea:	4815      	ldr	r0, [pc, #84]	@ (8001d40 <Status_SS+0x2ec>)
 8001cec:	f001 f828 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d107      	bne.n	8001d06 <Status_SS+0x2b2>
					direction(2,15000,22000);// ss1: lui nhe sang phai
 8001cf6:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001cfa:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001cfe:	2002      	movs	r0, #2
 8001d00:	f7ff fe44 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin) == 0){
 8001d04:	e0a9      	b.n	8001e5a <Status_SS+0x406>
				}
				else if(HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0){
 8001d06:	2104      	movs	r1, #4
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <Status_SS+0x2d8>)
 8001d0a:	f001 f819 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 80a2 	bne.w	8001e5a <Status_SS+0x406>
					direction(2,20000,15000);// ss1: lui nhe sang phai
 8001d16:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001d1a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001d1e:	2002      	movs	r0, #2
 8001d20:	f7ff fe34 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin) == 0){
 8001d24:	e099      	b.n	8001e5a <Status_SS+0x406>
 8001d26:	bf00      	nop
 8001d28:	200001f4 	.word	0x200001f4
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	20000214 	.word	0x20000214
 8001d34:	2000021c 	.word	0x2000021c
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	40011400 	.word	0x40011400
 8001d40:	40011800 	.word	0x40011800
				}
		}
		else if((HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)==0) && run ==1 && lock_ss ==0)
 8001d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d48:	4846      	ldr	r0, [pc, #280]	@ (8001e64 <Status_SS+0x410>)
 8001d4a:	f000 fff9 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d16d      	bne.n	8001e30 <Status_SS+0x3dc>
 8001d54:	4b44      	ldr	r3, [pc, #272]	@ (8001e68 <Status_SS+0x414>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d169      	bne.n	8001e30 <Status_SS+0x3dc>
 8001d5c:	4b43      	ldr	r3, [pc, #268]	@ (8001e6c <Status_SS+0x418>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d165      	bne.n	8001e30 <Status_SS+0x3dc>
		{
				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	4841      	ldr	r0, [pc, #260]	@ (8001e70 <Status_SS+0x41c>)
 8001d6a:	f001 f800 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d74:	483f      	ldr	r0, [pc, #252]	@ (8001e74 <Status_SS+0x420>)
 8001d76:	f000 fffa 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d80:	483c      	ldr	r0, [pc, #240]	@ (8001e74 <Status_SS+0x420>)
 8001d82:	f000 fff4 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d8c:	4839      	ldr	r0, [pc, #228]	@ (8001e74 <Status_SS+0x420>)
 8001d8e:	f000 ffee 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001d92:	2201      	movs	r2, #1
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	4836      	ldr	r0, [pc, #216]	@ (8001e70 <Status_SS+0x41c>)
 8001d98:	f000 ffe9 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001da2:	4834      	ldr	r0, [pc, #208]	@ (8001e74 <Status_SS+0x420>)
 8001da4:	f000 ffe3 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dae:	4831      	ldr	r0, [pc, #196]	@ (8001e74 <Status_SS+0x420>)
 8001db0:	f000 ffdd 	bl	8002d6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dba:	482e      	ldr	r0, [pc, #184]	@ (8001e74 <Status_SS+0x420>)
 8001dbc:	f000 ffd7 	bl	8002d6e <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, SET);// BUZZE KEU
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dc6:	482c      	ldr	r0, [pc, #176]	@ (8001e78 <Status_SS+0x424>)
 8001dc8:	f000 ffd1 	bl	8002d6e <HAL_GPIO_WritePin>

				direction(1,15000,22000);// ss1: tiennhe sang trai
 8001dcc:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001dd0:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff fdd9 	bl	800198c <direction>
				HAL_Delay(1000);
 8001dda:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dde:	f000 fce9 	bl	80027b4 <HAL_Delay>
				direction(1,28700,28700);
 8001de2:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001de6:	f247 011c 	movw	r1, #28700	@ 0x701c
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff fdce 	bl	800198c <direction>

				if(HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)){
 8001df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001df4:	481b      	ldr	r0, [pc, #108]	@ (8001e64 <Status_SS+0x410>)
 8001df6:	f000 ffa3 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <Status_SS+0x3bc>
					direction(1,15000,22000);// ss1: tiennhe sang trai
 8001e00:	f245 52f0 	movw	r2, #22000	@ 0x55f0
 8001e04:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff fdbf 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)){
 8001e0e:	e026      	b.n	8001e5e <Status_SS+0x40a>
				}
				else if(HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0){
 8001e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e14:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <Status_SS+0x410>)
 8001e16:	f000 ff93 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11e      	bne.n	8001e5e <Status_SS+0x40a>
					direction(1,20000,15000);// ss1: tien nhe sang trai lui +13000
 8001e20:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001e24:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff fdaf 	bl	800198c <direction>
				if(HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)){
 8001e2e:	e016      	b.n	8001e5e <Status_SS+0x40a>
				}
		}
		else{
				HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, SET);// BUZZE KEU
 8001e30:	2201      	movs	r2, #1
 8001e32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e36:	4810      	ldr	r0, [pc, #64]	@ (8001e78 <Status_SS+0x424>)
 8001e38:	f000 ff99 	bl	8002d6e <HAL_GPIO_WritePin>
				flag_tim6 =0;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <Status_SS+0x428>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim6);
 8001e42:	480f      	ldr	r0, [pc, #60]	@ (8001e80 <Status_SS+0x42c>)
 8001e44:	f001 fcdc 	bl	8003800 <HAL_TIM_Base_Stop_IT>
				htim6.Instance -> CNT =0;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <Status_SS+0x42c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
		}
	}

}
 8001e50:	e006      	b.n	8001e60 <Status_SS+0x40c>
				if(HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin)==0){
 8001e52:	bf00      	nop
 8001e54:	e004      	b.n	8001e60 <Status_SS+0x40c>
				if(HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin)==0){
 8001e56:	bf00      	nop
 8001e58:	e002      	b.n	8001e60 <Status_SS+0x40c>
				if(HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin) == 0){
 8001e5a:	bf00      	nop
 8001e5c:	e000      	b.n	8001e60 <Status_SS+0x40c>
				if(HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin)){
 8001e5e:	bf00      	nop
}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40011800 	.word	0x40011800
 8001e68:	20000214 	.word	0x20000214
 8001e6c:	2000021c 	.word	0x2000021c
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40011400 	.word	0x40011400
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	200001f4 	.word	0x200001f4
 8001e80:	20000104 	.word	0x20000104

08001e84 <control>:

void control(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	Read_ss1 = HAL_GPIO_ReadPin(SS1_GPIO_Port, SS1_Pin);
 8001e88:	2104      	movs	r1, #4
 8001e8a:	48a9      	ldr	r0, [pc, #676]	@ (8002130 <control+0x2ac>)
 8001e8c:	f000 ff58 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	4ba7      	ldr	r3, [pc, #668]	@ (8002134 <control+0x2b0>)
 8001e96:	601a      	str	r2, [r3, #0]
	Read_ss2 = HAL_GPIO_ReadPin(SS2_GPIO_Port, SS2_Pin);
 8001e98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e9c:	48a6      	ldr	r0, [pc, #664]	@ (8002138 <control+0x2b4>)
 8001e9e:	f000 ff4f 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4ba5      	ldr	r3, [pc, #660]	@ (800213c <control+0x2b8>)
 8001ea8:	601a      	str	r2, [r3, #0]
	Read_ss3 = HAL_GPIO_ReadPin(SS3_GPIO_Port, SS3_Pin);
 8001eaa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eae:	48a2      	ldr	r0, [pc, #648]	@ (8002138 <control+0x2b4>)
 8001eb0:	f000 ff46 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4ba1      	ldr	r3, [pc, #644]	@ (8002140 <control+0x2bc>)
 8001eba:	601a      	str	r2, [r3, #0]
	Read_ss4 = HAL_GPIO_ReadPin(SS4_GPIO_Port, SS4_Pin);
 8001ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ec0:	489d      	ldr	r0, [pc, #628]	@ (8002138 <control+0x2b4>)
 8001ec2:	f000 ff3d 	bl	8002d40 <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b9e      	ldr	r3, [pc, #632]	@ (8002144 <control+0x2c0>)
 8001ecc:	601a      	str	r2, [r3, #0]

	if((Read_ss1 ==0 && Read_ss2 ==0 && Read_ss3 ==0 && Read_ss4==0 && (lock_ss==0))||
 8001ece:	4b99      	ldr	r3, [pc, #612]	@ (8002134 <control+0x2b0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10f      	bne.n	8001ef6 <control+0x72>
 8001ed6:	4b99      	ldr	r3, [pc, #612]	@ (800213c <control+0x2b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <control+0x72>
 8001ede:	4b98      	ldr	r3, [pc, #608]	@ (8002140 <control+0x2bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d107      	bne.n	8001ef6 <control+0x72>
 8001ee6:	4b97      	ldr	r3, [pc, #604]	@ (8002144 <control+0x2c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <control+0x72>
 8001eee:	4b96      	ldr	r3, [pc, #600]	@ (8002148 <control+0x2c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d035      	beq.n	8001f62 <control+0xde>
		(Read_ss1 ==0 && Read_ss2 ==0 && (lock_ss==0))||(Read_ss3 ==0 && Read_ss4==0 && (lock_ss==0))||
 8001ef6:	4b8f      	ldr	r3, [pc, #572]	@ (8002134 <control+0x2b0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
	if((Read_ss1 ==0 && Read_ss2 ==0 && Read_ss3 ==0 && Read_ss4==0 && (lock_ss==0))||
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <control+0x8a>
		(Read_ss1 ==0 && Read_ss2 ==0 && (lock_ss==0))||(Read_ss3 ==0 && Read_ss4==0 && (lock_ss==0))||
 8001efe:	4b8f      	ldr	r3, [pc, #572]	@ (800213c <control+0x2b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <control+0x8a>
 8001f06:	4b90      	ldr	r3, [pc, #576]	@ (8002148 <control+0x2c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d029      	beq.n	8001f62 <control+0xde>
 8001f0e:	4b8c      	ldr	r3, [pc, #560]	@ (8002140 <control+0x2bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <control+0xa2>
 8001f16:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <control+0x2c0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <control+0xa2>
 8001f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002148 <control+0x2c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01d      	beq.n	8001f62 <control+0xde>
		(save !=0 && read1_out != 28700 && read2_out != 28700 && read5_out != 28700 &&(read_7.out == 0))||
 8001f26:	4b89      	ldr	r3, [pc, #548]	@ (800214c <control+0x2c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
		(Read_ss1 ==0 && Read_ss2 ==0 && (lock_ss==0))||(Read_ss3 ==0 && Read_ss4==0 && (lock_ss==0))||
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d015      	beq.n	8001f5a <control+0xd6>
		(save !=0 && read1_out != 28700 && read2_out != 28700 && read5_out != 28700 &&(read_7.out == 0))||
 8001f2e:	4b88      	ldr	r3, [pc, #544]	@ (8002150 <control+0x2cc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00f      	beq.n	8001f5a <control+0xd6>
 8001f3a:	4b86      	ldr	r3, [pc, #536]	@ (8002154 <control+0x2d0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d009      	beq.n	8001f5a <control+0xd6>
 8001f46:	4b84      	ldr	r3, [pc, #528]	@ (8002158 <control+0x2d4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f247 021c 	movw	r2, #28700	@ 0x701c
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d003      	beq.n	8001f5a <control+0xd6>
 8001f52:	4b82      	ldr	r3, [pc, #520]	@ (800215c <control+0x2d8>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <control+0xde>
		(read_7.out == 0))
 8001f5a:	4b80      	ldr	r3, [pc, #512]	@ (800215c <control+0x2d8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
		(save !=0 && read1_out != 28700 && read2_out != 28700 && read5_out != 28700 &&(read_7.out == 0))||
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d14f      	bne.n	8002002 <control+0x17e>
	{
		run =0;
 8001f62:	4b7f      	ldr	r3, [pc, #508]	@ (8002160 <control+0x2dc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	487d      	ldr	r0, [pc, #500]	@ (8002164 <control+0x2e0>)
 8001f6e:	f000 fefe 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f78:	487b      	ldr	r0, [pc, #492]	@ (8002168 <control+0x2e4>)
 8001f7a:	f000 fef8 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f84:	4878      	ldr	r0, [pc, #480]	@ (8002168 <control+0x2e4>)
 8001f86:	f000 fef2 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f90:	4875      	ldr	r0, [pc, #468]	@ (8002168 <control+0x2e4>)
 8001f92:	f000 feec 	bl	8002d6e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f9c:	4871      	ldr	r0, [pc, #452]	@ (8002164 <control+0x2e0>)
 8001f9e:	f000 fee6 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fa8:	486f      	ldr	r0, [pc, #444]	@ (8002168 <control+0x2e4>)
 8001faa:	f000 fee0 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fb4:	486c      	ldr	r0, [pc, #432]	@ (8002168 <control+0x2e4>)
 8001fb6:	f000 feda 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fc0:	4869      	ldr	r0, [pc, #420]	@ (8002168 <control+0x2e4>)
 8001fc2:	f000 fed4 	bl	8002d6e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2180      	movs	r1, #128	@ 0x80
 8001fca:	4866      	ldr	r0, [pc, #408]	@ (8002164 <control+0x2e0>)
 8001fcc:	f000 fecf 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fd6:	4864      	ldr	r0, [pc, #400]	@ (8002168 <control+0x2e4>)
 8001fd8:	f000 fec9 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fe2:	4861      	ldr	r0, [pc, #388]	@ (8002168 <control+0x2e4>)
 8001fe4:	f000 fec3 	bl	8002d6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fee:	485e      	ldr	r0, [pc, #376]	@ (8002168 <control+0x2e4>)
 8001ff0:	f000 febd 	bl	8002d6e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, SET);// BUZZE KEU
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ffa:	484d      	ldr	r0, [pc, #308]	@ (8002130 <control+0x2ac>)
 8001ffc:	f000 feb7 	bl	8002d6e <HAL_GPIO_WritePin>
			else{
				HAL_GPIO_WritePin(SLN_GPIO_Port, SLN_Pin, RESET);
			}

	}
}
 8002000:	e167      	b.n	80022d2 <control+0x44e>
			run =1;
 8002002:	4b57      	ldr	r3, [pc, #348]	@ (8002160 <control+0x2dc>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, SET);
 8002008:	2201      	movs	r2, #1
 800200a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800200e:	4855      	ldr	r0, [pc, #340]	@ (8002164 <control+0x2e0>)
 8002010:	f000 fead 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, SET);
 8002014:	2201      	movs	r2, #1
 8002016:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800201a:	4853      	ldr	r0, [pc, #332]	@ (8002168 <control+0x2e4>)
 800201c:	f000 fea7 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, SET);
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002026:	4850      	ldr	r0, [pc, #320]	@ (8002168 <control+0x2e4>)
 8002028:	f000 fea1 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002032:	484d      	ldr	r0, [pc, #308]	@ (8002168 <control+0x2e4>)
 8002034:	f000 fe9b 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	4849      	ldr	r0, [pc, #292]	@ (8002164 <control+0x2e0>)
 800203e:	f000 fe96 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002048:	4847      	ldr	r0, [pc, #284]	@ (8002168 <control+0x2e4>)
 800204a:	f000 fe90 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2A_GPIO_Port, BRK_2A_Pin, SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002054:	4844      	ldr	r0, [pc, #272]	@ (8002168 <control+0x2e4>)
 8002056:	f000 fe8a 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BRK_2B_GPIO_Port, BRK_2B_Pin, SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002060:	4841      	ldr	r0, [pc, #260]	@ (8002168 <control+0x2e4>)
 8002062:	f000 fe84 	bl	8002d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, RESET);// BUZZE KEU
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800206c:	4830      	ldr	r0, [pc, #192]	@ (8002130 <control+0x2ac>)
 800206e:	f000 fe7e 	bl	8002d6e <HAL_GPIO_WritePin>
			if(flag_tim6 == 0){
 8002072:	4b3e      	ldr	r3, [pc, #248]	@ (800216c <control+0x2e8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 80b7 	bne.w	80021ea <control+0x366>
				if(save ==1)
 800207c:	4b33      	ldr	r3, [pc, #204]	@ (800214c <control+0x2c8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d125      	bne.n	80020d0 <control+0x24c>
				  if(read2_out != read2_check)
 8002084:	4b33      	ldr	r3, [pc, #204]	@ (8002154 <control+0x2d0>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b39      	ldr	r3, [pc, #228]	@ (8002170 <control+0x2ec>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	f000 80ac 	beq.w	80021ea <control+0x366>
					  read2_out = read2_check;
 8002092:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <control+0x2ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2f      	ldr	r2, [pc, #188]	@ (8002154 <control+0x2d0>)
 8002098:	6013      	str	r3, [r2, #0]
					  if(DIR == 1)
 800209a:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <control+0x2f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <control+0x230>
						  direction(1,read2_check,read2_check);
 80020a2:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <control+0x2ec>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a32      	ldr	r2, [pc, #200]	@ (8002170 <control+0x2ec>)
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4619      	mov	r1, r3
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff fc6d 	bl	800198c <direction>
 80020b2:	e09a      	b.n	80021ea <control+0x366>
					  else if (DIR == 0){
 80020b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <control+0x2f0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 8096 	bne.w	80021ea <control+0x366>
						  direction(2,read2_check,read2_check);
 80020be:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <control+0x2ec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002170 <control+0x2ec>)
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7ff fc5f 	bl	800198c <direction>
 80020ce:	e08c      	b.n	80021ea <control+0x366>
				  read2_check = read2_out;
 80020d0:	4b20      	ldr	r3, [pc, #128]	@ (8002154 <control+0x2d0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <control+0x2ec>)
 80020d6:	6013      	str	r3, [r2, #0]
				  switch (val)
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <control+0x2f4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3b01      	subs	r3, #1
 80020de:	2b07      	cmp	r3, #7
 80020e0:	f200 8083 	bhi.w	80021ea <control+0x366>
 80020e4:	a201      	add	r2, pc, #4	@ (adr r2, 80020ec <control+0x268>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	0800210d 	.word	0x0800210d
 80020f0:	0800211f 	.word	0x0800211f
 80020f4:	0800217d 	.word	0x0800217d
 80020f8:	08002195 	.word	0x08002195
 80020fc:	080021ad 	.word	0x080021ad
 8002100:	080021bd 	.word	0x080021bd
 8002104:	080021cd 	.word	0x080021cd
 8002108:	080021db 	.word	0x080021db
							direction(4,read1_out,read1_out);
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <control+0x2cc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <control+0x2cc>)
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	2004      	movs	r0, #4
 8002118:	f7ff fc38 	bl	800198c <direction>
							break;
 800211c:	e065      	b.n	80021ea <control+0x366>
							direction(3,read1_out,read1_out);
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <control+0x2cc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <control+0x2cc>)
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	2003      	movs	r0, #3
 800212a:	f7ff fc2f 	bl	800198c <direction>
							break;
 800212e:	e05c      	b.n	80021ea <control+0x366>
 8002130:	40010c00 	.word	0x40010c00
 8002134:	200001f8 	.word	0x200001f8
 8002138:	40011800 	.word	0x40011800
 800213c:	200001fc 	.word	0x200001fc
 8002140:	20000200 	.word	0x20000200
 8002144:	20000204 	.word	0x20000204
 8002148:	2000021c 	.word	0x2000021c
 800214c:	20000208 	.word	0x20000208
 8002150:	20000194 	.word	0x20000194
 8002154:	20000198 	.word	0x20000198
 8002158:	2000019c 	.word	0x2000019c
 800215c:	20000288 	.word	0x20000288
 8002160:	20000214 	.word	0x20000214
 8002164:	40011000 	.word	0x40011000
 8002168:	40011400 	.word	0x40011400
 800216c:	200001f4 	.word	0x200001f4
 8002170:	200001f0 	.word	0x200001f0
 8002174:	20000210 	.word	0x20000210
 8002178:	2000020c 	.word	0x2000020c
							direction(2,read2_out,read2_out);
 800217c:	4b56      	ldr	r3, [pc, #344]	@ (80022d8 <control+0x454>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a55      	ldr	r2, [pc, #340]	@ (80022d8 <control+0x454>)
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	2002      	movs	r0, #2
 8002188:	f7ff fc00 	bl	800198c <direction>
							DIR =0;
 800218c:	4b53      	ldr	r3, [pc, #332]	@ (80022dc <control+0x458>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
							break;
 8002192:	e02a      	b.n	80021ea <control+0x366>
							direction(1,read2_out,read2_out);
 8002194:	4b50      	ldr	r3, [pc, #320]	@ (80022d8 <control+0x454>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4f      	ldr	r2, [pc, #316]	@ (80022d8 <control+0x454>)
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff fbf4 	bl	800198c <direction>
							DIR=1;
 80021a4:	4b4d      	ldr	r3, [pc, #308]	@ (80022dc <control+0x458>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
							break;
 80021aa:	e01e      	b.n	80021ea <control+0x366>
							direction(1,10000,23000);
 80021ac:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 80021b0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7ff fbe9 	bl	800198c <direction>
							break;
 80021ba:	e016      	b.n	80021ea <control+0x366>
							direction(1,23000,10000);
 80021bc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80021c0:	f645 11d8 	movw	r1, #23000	@ 0x59d8
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff fbe1 	bl	800198c <direction>
							break;
 80021ca:	e00e      	b.n	80021ea <control+0x366>
							direction(2,20000,0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80021d2:	2002      	movs	r0, #2
 80021d4:	f7ff fbda 	bl	800198c <direction>
							break;
 80021d8:	e007      	b.n	80021ea <control+0x366>
							direction(2,800,10000);
 80021da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80021de:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7ff fbd2 	bl	800198c <direction>
							break;
 80021e8:	bf00      	nop
			if(read_10.out > 43000){
 80021ea:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <control+0x45c>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f24a 72f8 	movw	r2, #43000	@ 0xa7f8
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d90a      	bls.n	800220c <control+0x388>
					TIM3 -> CCR3 = read5_out;
 80021f6:	4a3b      	ldr	r2, [pc, #236]	@ (80022e4 <control+0x460>)
 80021f8:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <control+0x464>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
					HAL_GPIO_WritePin(F_R_2B_GPIO_Port, F_R_2B_Pin, SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002204:	4839      	ldr	r0, [pc, #228]	@ (80022ec <control+0x468>)
 8002206:	f000 fdb2 	bl	8002d6e <HAL_GPIO_WritePin>
 800220a:	e016      	b.n	800223a <control+0x3b6>
			else if(read_10.out < 41000){
 800220c:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <control+0x45c>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f24a 0227 	movw	r2, #40999	@ 0xa027
 8002214:	4293      	cmp	r3, r2
 8002216:	d80a      	bhi.n	800222e <control+0x3aa>
					HAL_GPIO_WritePin(F_R_2B_GPIO_Port, F_R_2B_Pin, RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800221e:	4833      	ldr	r0, [pc, #204]	@ (80022ec <control+0x468>)
 8002220:	f000 fda5 	bl	8002d6e <HAL_GPIO_WritePin>
					TIM3 -> CCR3 = read5_out;
 8002224:	4a2f      	ldr	r2, [pc, #188]	@ (80022e4 <control+0x460>)
 8002226:	4b30      	ldr	r3, [pc, #192]	@ (80022e8 <control+0x464>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800222c:	e005      	b.n	800223a <control+0x3b6>
					HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002234:	482d      	ldr	r0, [pc, #180]	@ (80022ec <control+0x468>)
 8002236:	f000 fd9a 	bl	8002d6e <HAL_GPIO_WritePin>
			if(read_11.out > 43000){
 800223a:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <control+0x46c>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f24a 72f8 	movw	r2, #43000	@ 0xa7f8
 8002242:	4293      	cmp	r3, r2
 8002244:	d90a      	bls.n	800225c <control+0x3d8>
					HAL_GPIO_WritePin(F_R_2A_GPIO_Port, F_R_2A_Pin, SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800224c:	4827      	ldr	r0, [pc, #156]	@ (80022ec <control+0x468>)
 800224e:	f000 fd8e 	bl	8002d6e <HAL_GPIO_WritePin>
					TIM3 -> CCR3 = read5_out;
 8002252:	4a24      	ldr	r2, [pc, #144]	@ (80022e4 <control+0x460>)
 8002254:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <control+0x464>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800225a:	e016      	b.n	800228a <control+0x406>
			else if(read_11.out < 41000){
 800225c:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <control+0x46c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f24a 0227 	movw	r2, #40999	@ 0xa027
 8002264:	4293      	cmp	r3, r2
 8002266:	d80a      	bhi.n	800227e <control+0x3fa>
					HAL_GPIO_WritePin(F_R_2A_GPIO_Port, F_R_2A_Pin, RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800226e:	481f      	ldr	r0, [pc, #124]	@ (80022ec <control+0x468>)
 8002270:	f000 fd7d 	bl	8002d6e <HAL_GPIO_WritePin>
					TIM3 -> CCR3 = read5_out;
 8002274:	4a1b      	ldr	r2, [pc, #108]	@ (80022e4 <control+0x460>)
 8002276:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <control+0x464>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800227c:	e005      	b.n	800228a <control+0x406>
				HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002284:	4819      	ldr	r0, [pc, #100]	@ (80022ec <control+0x468>)
 8002286:	f000 fd72 	bl	8002d6e <HAL_GPIO_WritePin>
			if(read_8.out<8000){
 800228a:	4b1a      	ldr	r3, [pc, #104]	@ (80022f4 <control+0x470>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002292:	d206      	bcs.n	80022a2 <control+0x41e>
				HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, SET);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800229a:	4817      	ldr	r0, [pc, #92]	@ (80022f8 <control+0x474>)
 800229c:	f000 fd67 	bl	8002d6e <HAL_GPIO_WritePin>
 80022a0:	e005      	b.n	80022ae <control+0x42a>
				HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022a8:	4813      	ldr	r0, [pc, #76]	@ (80022f8 <control+0x474>)
 80022aa:	f000 fd60 	bl	8002d6e <HAL_GPIO_WritePin>
			if(read_9.out>8000){
 80022ae:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <control+0x478>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80022b6:	d906      	bls.n	80022c6 <control+0x442>
				HAL_GPIO_WritePin(SLN_GPIO_Port, SLN_Pin, SET);
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022be:	480e      	ldr	r0, [pc, #56]	@ (80022f8 <control+0x474>)
 80022c0:	f000 fd55 	bl	8002d6e <HAL_GPIO_WritePin>
}
 80022c4:	e005      	b.n	80022d2 <control+0x44e>
				HAL_GPIO_WritePin(SLN_GPIO_Port, SLN_Pin, RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022cc:	480a      	ldr	r0, [pc, #40]	@ (80022f8 <control+0x474>)
 80022ce:	f000 fd4e 	bl	8002d6e <HAL_GPIO_WritePin>
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000198 	.word	0x20000198
 80022dc:	20000210 	.word	0x20000210
 80022e0:	200002b8 	.word	0x200002b8
 80022e4:	40000400 	.word	0x40000400
 80022e8:	2000019c 	.word	0x2000019c
 80022ec:	40011400 	.word	0x40011400
 80022f0:	200002c8 	.word	0x200002c8
 80022f4:	20000298 	.word	0x20000298
 80022f8:	40010c00 	.word	0x40010c00
 80022fc:	200002a8 	.word	0x200002a8

08002300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <HAL_MspInit+0x5c>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4a14      	ldr	r2, [pc, #80]	@ (800235c <HAL_MspInit+0x5c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6193      	str	r3, [r2, #24]
 8002312:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_MspInit+0x5c>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_MspInit+0x5c>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a0e      	ldr	r2, [pc, #56]	@ (800235c <HAL_MspInit+0x5c>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <HAL_MspInit+0x5c>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_MspInit+0x60>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	4a04      	ldr	r2, [pc, #16]	@ (8002360 <HAL_MspInit+0x60>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000

08002364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a28      	ldr	r2, [pc, #160]	@ (8002414 <HAL_TIM_Base_MspInit+0xb0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10c      	bne.n	8002390 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002376:	4b28      	ldr	r3, [pc, #160]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a27      	ldr	r2, [pc, #156]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 800237c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002380:	6193      	str	r3, [r2, #24]
 8002382:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800238e:	e03c      	b.n	800240a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002398:	d10c      	bne.n	80023b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800239a:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a1e      	ldr	r2, [pc, #120]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
}
 80023b2:	e02a      	b.n	800240a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_TIM_Base_MspInit+0xb8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10c      	bne.n	80023d8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a15      	ldr	r2, [pc, #84]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	e018      	b.n	800240a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_TIM_Base_MspInit+0xbc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d113      	bne.n	800240a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023e8:	f043 0310 	orr.w	r3, r3, #16
 80023ec:	61d3      	str	r3, [r2, #28]
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_TIM_Base_MspInit+0xb4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	2036      	movs	r0, #54	@ 0x36
 8002400:	f000 fad3 	bl	80029aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002404:	2036      	movs	r0, #54	@ 0x36
 8002406:	f000 faec 	bl	80029e2 <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40021000 	.word	0x40021000
 800241c:	40000400 	.word	0x40000400
 8002420:	40001000 	.word	0x40001000

08002424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002442:	d118      	bne.n	8002476 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002444:	4b28      	ldr	r3, [pc, #160]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a27      	ldr	r2, [pc, #156]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800245c:	230e      	movs	r3, #14
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2302      	movs	r3, #2
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0318 	add.w	r3, r7, #24
 800246c:	4619      	mov	r1, r3
 800246e:	481f      	ldr	r0, [pc, #124]	@ (80024ec <HAL_TIM_MspPostInit+0xc8>)
 8002470:	f000 fad2 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002474:	e034      	b.n	80024e0 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1d      	ldr	r2, [pc, #116]	@ (80024f0 <HAL_TIM_MspPostInit+0xcc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d12f      	bne.n	80024e0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a12      	ldr	r2, [pc, #72]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_TIM_MspPostInit+0xc4>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b0:	23c0      	movs	r3, #192	@ 0xc0
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	2302      	movs	r3, #2
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	4619      	mov	r1, r3
 80024c2:	480a      	ldr	r0, [pc, #40]	@ (80024ec <HAL_TIM_MspPostInit+0xc8>)
 80024c4:	f000 faa8 	bl	8002a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2302      	movs	r3, #2
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	f107 0318 	add.w	r3, r7, #24
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	@ (80024f4 <HAL_TIM_MspPostInit+0xd0>)
 80024dc:	f000 fa9c 	bl	8002a18 <HAL_GPIO_Init>
}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	@ 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010800 	.word	0x40010800
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40010c00 	.word	0x40010c00

080024f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1c      	ldr	r2, [pc, #112]	@ (8002584 <HAL_UART_MspInit+0x8c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d131      	bne.n	800257c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_UART_MspInit+0x90>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a1a      	ldr	r2, [pc, #104]	@ (8002588 <HAL_UART_MspInit+0x90>)
 800251e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_UART_MspInit+0x90>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_UART_MspInit+0x90>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <HAL_UART_MspInit+0x90>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_UART_MspInit+0x90>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800254c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4619      	mov	r1, r3
 800255c:	480b      	ldr	r0, [pc, #44]	@ (800258c <HAL_UART_MspInit+0x94>)
 800255e:	f000 fa5b 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	4619      	mov	r1, r3
 8002576:	4805      	ldr	r0, [pc, #20]	@ (800258c <HAL_UART_MspInit+0x94>)
 8002578:	f000 fa4e 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800257c:	bf00      	nop
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40013800 	.word	0x40013800
 8002588:	40021000 	.word	0x40021000
 800258c:	40010800 	.word	0x40010800

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <NMI_Handler+0x4>

08002598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <HardFault_Handler+0x4>

080025a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <MemManage_Handler+0x4>

080025a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <BusFault_Handler+0x4>

080025b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <UsageFault_Handler+0x4>

080025b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e0:	f000 f8cc 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 80025ec:	2001      	movs	r0, #1
 80025ee:	f000 fbd7 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SS1_Pin);
 80025fa:	2004      	movs	r0, #4
 80025fc:	f000 fbd0 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH5_Pin);
 8002608:	2008      	movs	r0, #8
 800260a:	f000 fbc9 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}

08002612 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH6_Pin);
 8002616:	2010      	movs	r0, #16
 8002618:	f000 fbc2 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH7_Pin);
 8002624:	2020      	movs	r0, #32
 8002626:	f000 fbbb 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH8_Pin);
 800262a:	2040      	movs	r0, #64	@ 0x40
 800262c:	f000 fbb8 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH9_Pin);
 8002630:	2080      	movs	r0, #128	@ 0x80
 8002632:	f000 fbb5 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH10_Pin);
 8002636:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800263a:	f000 fbb1 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH11_Pin);
 800263e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002642:	f000 fbad 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}

0800264a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 800264e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002652:	f000 fba5 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8002656:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800265a:	f000 fba1 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 800265e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002662:	f000 fb9d 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS2_Pin);
 8002666:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800266a:	f000 fb99 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS3_Pin);
 800266e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002672:	f000 fb95 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS4_Pin);
 8002676:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800267a:	f000 fb91 	bl	8002da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <TIM6_IRQHandler+0x10>)
 800268a:	f001 f9f9 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000104 	.word	0x20000104

08002698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a4:	f7ff fff8 	bl	8002698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026aa:	490c      	ldr	r1, [pc, #48]	@ (80026dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026ac:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026c0:	4c09      	ldr	r4, [pc, #36]	@ (80026e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ce:	f002 f8c5 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026d2:	f7fd fe23 	bl	800031c <main>
  bx lr
 80026d6:	4770      	bx	lr
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80026e0:	080048f0 	.word	0x080048f0
  ldr r2, =_sbss
 80026e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80026e8:	200002dc 	.word	0x200002dc

080026ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC1_2_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <HAL_Init+0x28>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <HAL_Init+0x28>)
 80026fa:	f043 0310 	orr.w	r3, r3, #16
 80026fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 f947 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002706:	200f      	movs	r0, #15
 8002708:	f000 f808 	bl	800271c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800270c:	f7ff fdf8 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_InitTick+0x54>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_InitTick+0x58>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002732:	fbb3 f3f1 	udiv	r3, r3, r1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f95f 	bl	80029fe <HAL_SYSTICK_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00e      	b.n	8002768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d80a      	bhi.n	8002766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f000 f927 	bl	80029aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800275c:	4a06      	ldr	r2, [pc, #24]	@ (8002778 <HAL_InitTick+0x5c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000004 	.word	0x20000004
 8002774:	2000000c 	.word	0x2000000c
 8002778:	20000008 	.word	0x20000008

0800277c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_IncTick+0x1c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_IncTick+0x20>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a03      	ldr	r2, [pc, #12]	@ (800279c <HAL_IncTick+0x20>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	2000000c 	.word	0x2000000c
 800279c:	200002d8 	.word	0x200002d8

080027a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b02      	ldr	r3, [pc, #8]	@ (80027b0 <HAL_GetTick+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	200002d8 	.word	0x200002d8

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffe0 	bl	80027a0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000000c 	.word	0x2000000c

080027fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002818:	4013      	ands	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800282c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282e:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <__NVIC_SetPriorityGrouping+0x44>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	60d3      	str	r3, [r2, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002848:	4b04      	ldr	r3, [pc, #16]	@ (800285c <__NVIC_GetPriorityGrouping+0x18>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0307 	and.w	r3, r3, #7
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	2b00      	cmp	r3, #0
 8002870:	db0b      	blt.n	800288a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	4906      	ldr	r1, [pc, #24]	@ (8002894 <__NVIC_EnableIRQ+0x34>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2001      	movs	r0, #1
 8002882:	fa00 f202 	lsl.w	r2, r0, r2
 8002886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	@ (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	@ (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff90 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff2d 	bl	80027fc <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029bc:	f7ff ff42 	bl	8002844 <__NVIC_GetPriorityGrouping>
 80029c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f7ff ff90 	bl	80028ec <NVIC_EncodePriority>
 80029cc:	4602      	mov	r2, r0
 80029ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff5f 	bl	8002898 <__NVIC_SetPriority>
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff35 	bl	8002860 <__NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ffa2 	bl	8002950 <SysTick_Config>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b08b      	sub	sp, #44	@ 0x2c
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	e179      	b.n	8002d20 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8168 	bne.w	8002d1a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4a96      	ldr	r2, [pc, #600]	@ (8002ca8 <HAL_GPIO_Init+0x290>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d05e      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a54:	4a94      	ldr	r2, [pc, #592]	@ (8002ca8 <HAL_GPIO_Init+0x290>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d875      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a5a:	4a94      	ldr	r2, [pc, #592]	@ (8002cac <HAL_GPIO_Init+0x294>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d058      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a60:	4a92      	ldr	r2, [pc, #584]	@ (8002cac <HAL_GPIO_Init+0x294>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d86f      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a66:	4a92      	ldr	r2, [pc, #584]	@ (8002cb0 <HAL_GPIO_Init+0x298>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d052      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a6c:	4a90      	ldr	r2, [pc, #576]	@ (8002cb0 <HAL_GPIO_Init+0x298>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d869      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a72:	4a90      	ldr	r2, [pc, #576]	@ (8002cb4 <HAL_GPIO_Init+0x29c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d04c      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a78:	4a8e      	ldr	r2, [pc, #568]	@ (8002cb4 <HAL_GPIO_Init+0x29c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d863      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a7e:	4a8e      	ldr	r2, [pc, #568]	@ (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d046      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
 8002a84:	4a8c      	ldr	r2, [pc, #560]	@ (8002cb8 <HAL_GPIO_Init+0x2a0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d85d      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d82a      	bhi.n	8002ae4 <HAL_GPIO_Init+0xcc>
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d859      	bhi.n	8002b46 <HAL_GPIO_Init+0x12e>
 8002a92:	a201      	add	r2, pc, #4	@ (adr r2, 8002a98 <HAL_GPIO_Init+0x80>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002b13 	.word	0x08002b13
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002aff 	.word	0x08002aff
 8002aa4:	08002b41 	.word	0x08002b41
 8002aa8:	08002b47 	.word	0x08002b47
 8002aac:	08002b47 	.word	0x08002b47
 8002ab0:	08002b47 	.word	0x08002b47
 8002ab4:	08002b47 	.word	0x08002b47
 8002ab8:	08002b47 	.word	0x08002b47
 8002abc:	08002b47 	.word	0x08002b47
 8002ac0:	08002b47 	.word	0x08002b47
 8002ac4:	08002b47 	.word	0x08002b47
 8002ac8:	08002b47 	.word	0x08002b47
 8002acc:	08002b47 	.word	0x08002b47
 8002ad0:	08002b47 	.word	0x08002b47
 8002ad4:	08002b47 	.word	0x08002b47
 8002ad8:	08002b47 	.word	0x08002b47
 8002adc:	08002af5 	.word	0x08002af5
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	4a75      	ldr	r2, [pc, #468]	@ (8002cbc <HAL_GPIO_Init+0x2a4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aea:	e02c      	b.n	8002b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e029      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	3304      	adds	r3, #4
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	e024      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	3308      	adds	r3, #8
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e01f      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e01a      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b1a:	2304      	movs	r3, #4
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e013      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	611a      	str	r2, [r3, #16]
          break;
 8002b32:	e009      	b.n	8002b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	615a      	str	r2, [r3, #20]
          break;
 8002b3e:	e003      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x130>
          break;
 8002b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2bff      	cmp	r3, #255	@ 0xff
 8002b4c:	d801      	bhi.n	8002b52 <HAL_GPIO_Init+0x13a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_Init+0x13e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2bff      	cmp	r3, #255	@ 0xff
 8002b5c:	d802      	bhi.n	8002b64 <HAL_GPIO_Init+0x14c>
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x152>
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	3b08      	subs	r3, #8
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	210f      	movs	r1, #15
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80c1 	beq.w	8002d1a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b98:	4b49      	ldr	r3, [pc, #292]	@ (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a48      	ldr	r2, [pc, #288]	@ (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b46      	ldr	r3, [pc, #280]	@ (8002cc0 <HAL_GPIO_Init+0x2a8>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bb0:	4a44      	ldr	r2, [pc, #272]	@ (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8002cc8 <HAL_GPIO_Init+0x2b0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01f      	beq.n	8002c1c <HAL_GPIO_Init+0x204>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a3b      	ldr	r2, [pc, #236]	@ (8002ccc <HAL_GPIO_Init+0x2b4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d019      	beq.n	8002c18 <HAL_GPIO_Init+0x200>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd0 <HAL_GPIO_Init+0x2b8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1fc>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a39      	ldr	r2, [pc, #228]	@ (8002cd4 <HAL_GPIO_Init+0x2bc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a38      	ldr	r2, [pc, #224]	@ (8002cd8 <HAL_GPIO_Init+0x2c0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1f4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a37      	ldr	r2, [pc, #220]	@ (8002cdc <HAL_GPIO_Init+0x2c4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1f0>
 8002c04:	2305      	movs	r3, #5
 8002c06:	e00a      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c08:	2306      	movs	r3, #6
 8002c0a:	e008      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e004      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_GPIO_Init+0x206>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c20:	f002 0203 	and.w	r2, r2, #3
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	4093      	lsls	r3, r2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2e:	4925      	ldr	r1, [pc, #148]	@ (8002cc4 <HAL_GPIO_Init+0x2ac>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c48:	4b25      	ldr	r3, [pc, #148]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4924      	ldr	r1, [pc, #144]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c56:	4b22      	ldr	r3, [pc, #136]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4920      	ldr	r1, [pc, #128]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	491a      	ldr	r1, [pc, #104]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4916      	ldr	r1, [pc, #88]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d025      	beq.n	8002ce4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4910      	ldr	r1, [pc, #64]	@ (8002ce0 <HAL_GPIO_Init+0x2c8>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
 8002ca4:	e025      	b.n	8002cf2 <HAL_GPIO_Init+0x2da>
 8002ca6:	bf00      	nop
 8002ca8:	10320000 	.word	0x10320000
 8002cac:	10310000 	.word	0x10310000
 8002cb0:	10220000 	.word	0x10220000
 8002cb4:	10210000 	.word	0x10210000
 8002cb8:	10120000 	.word	0x10120000
 8002cbc:	10110000 	.word	0x10110000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40010c00 	.word	0x40010c00
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	40011800 	.word	0x40011800
 8002cdc:	40011c00 	.word	0x40011c00
 8002ce0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ce4:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	4913      	ldr	r1, [pc, #76]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	490e      	ldr	r1, [pc, #56]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
 8002d0a:	e006      	b.n	8002d1a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	4909      	ldr	r1, [pc, #36]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f ae7e 	bne.w	8002a2c <HAL_GPIO_Init+0x14>
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	372c      	adds	r7, #44	@ 0x2c
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e001      	b.n	8002d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	807b      	strh	r3, [r7, #2]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7e:	787b      	ldrb	r3, [r7, #1]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d84:	887a      	ldrh	r2, [r7, #2]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	041a      	lsls	r2, r3, #16
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	611a      	str	r2, [r3, #16]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002db6:	4a05      	ldr	r2, [pc, #20]	@ (8002dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa30 	bl	8000224 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e272      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df0:	4b92      	ldr	r3, [pc, #584]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d112      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
 8002e08:	4b8c      	ldr	r3, [pc, #560]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e14:	d10b      	bne.n	8002e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	4b89      	ldr	r3, [pc, #548]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d06c      	beq.n	8002efc <HAL_RCC_OscConfig+0x12c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d168      	bne.n	8002efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e24c      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x76>
 8002e38:	4b80      	ldr	r3, [pc, #512]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	e02e      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x98>
 8002e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7a      	ldr	r2, [pc, #488]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b78      	ldr	r3, [pc, #480]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a77      	ldr	r2, [pc, #476]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0xbc>
 8002e72:	4b72      	ldr	r3, [pc, #456]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a71      	ldr	r2, [pc, #452]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6e      	ldr	r2, [pc, #440]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xd4>
 8002e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6a      	ldr	r2, [pc, #424]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b68      	ldr	r3, [pc, #416]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a67      	ldr	r2, [pc, #412]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff fc78 	bl	80027a0 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7ff fc74 	bl	80027a0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	@ 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e200      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe4>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff fc64 	bl	80027a0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7ff fc60 	bl	80027a0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1ec      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b53      	ldr	r3, [pc, #332]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x10c>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f16:	4b49      	ldr	r3, [pc, #292]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
 8002f22:	4b46      	ldr	r3, [pc, #280]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b43      	ldr	r3, [pc, #268]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1c0      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3d      	ldr	r3, [pc, #244]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4939      	ldr	r1, [pc, #228]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b36      	ldr	r3, [pc, #216]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7ff fc19 	bl	80027a0 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f72:	f7ff fc15 	bl	80027a0 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1a1      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b2a      	ldr	r3, [pc, #168]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4927      	ldr	r1, [pc, #156]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b26      	ldr	r3, [pc, #152]	@ (8003040 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff fbf8 	bl	80027a0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7ff fbf4 	bl	80027a0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e180      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d03a      	beq.n	8003054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d019      	beq.n	800301a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7ff fbd8 	bl	80027a0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7ff fbd4 	bl	80027a0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e160      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <HAL_RCC_OscConfig+0x26c>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003012:	2001      	movs	r0, #1
 8003014:	f000 face 	bl	80035b4 <RCC_Delay>
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301a:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_RCC_OscConfig+0x274>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7ff fbbe 	bl	80027a0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003026:	e00f      	b.n	8003048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003028:	f7ff fbba 	bl	80027a0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d908      	bls.n	8003048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e146      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	42420000 	.word	0x42420000
 8003044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	4b92      	ldr	r3, [pc, #584]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e9      	bne.n	8003028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a6 	beq.w	80031ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b8b      	ldr	r3, [pc, #556]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10d      	bne.n	800308e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a87      	ldr	r2, [pc, #540]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]
 800307e:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b82      	ldr	r3, [pc, #520]	@ (8003298 <HAL_RCC_OscConfig+0x4c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b7f      	ldr	r3, [pc, #508]	@ (8003298 <HAL_RCC_OscConfig+0x4c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7e      	ldr	r2, [pc, #504]	@ (8003298 <HAL_RCC_OscConfig+0x4c8>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7ff fb7b 	bl	80027a0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7ff fb77 	bl	80027a0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b64      	cmp	r3, #100	@ 0x64
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e103      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b75      	ldr	r3, [pc, #468]	@ (8003298 <HAL_RCC_OscConfig+0x4c8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x312>
 80030d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	e02d      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x334>
 80030ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a69      	ldr	r2, [pc, #420]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	4b67      	ldr	r3, [pc, #412]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a66      	ldr	r2, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	e01c      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b05      	cmp	r3, #5
 800310a:	d10c      	bne.n	8003126 <HAL_RCC_OscConfig+0x356>
 800310c:	4b61      	ldr	r3, [pc, #388]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a60      	ldr	r2, [pc, #384]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	4b5e      	ldr	r3, [pc, #376]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a5d      	ldr	r2, [pc, #372]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	e00b      	b.n	800313e <HAL_RCC_OscConfig+0x36e>
 8003126:	4b5b      	ldr	r3, [pc, #364]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a5a      	ldr	r2, [pc, #360]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	4b58      	ldr	r3, [pc, #352]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a57      	ldr	r2, [pc, #348]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d015      	beq.n	8003172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7ff fb2b 	bl	80027a0 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314e:	f7ff fb27 	bl	80027a0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0b1      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	4b4b      	ldr	r3, [pc, #300]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ee      	beq.n	800314e <HAL_RCC_OscConfig+0x37e>
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7ff fb15 	bl	80027a0 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7ff fb11 	bl	80027a0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e09b      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003190:	4b40      	ldr	r3, [pc, #256]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ee      	bne.n	800317a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8087 	beq.w	80032c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b8:	4b36      	ldr	r3, [pc, #216]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d061      	beq.n	8003288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d146      	bne.n	800325a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031cc:	4b33      	ldr	r3, [pc, #204]	@ (800329c <HAL_RCC_OscConfig+0x4cc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7ff fae5 	bl	80027a0 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7ff fae1 	bl	80027a0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e06d      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ec:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f0      	bne.n	80031da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003200:	d108      	bne.n	8003214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4921      	ldr	r1, [pc, #132]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003214:	4b1f      	ldr	r3, [pc, #124]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a19      	ldr	r1, [r3, #32]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	430b      	orrs	r3, r1
 8003226:	491b      	ldr	r1, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x4cc>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7ff fab5 	bl	80027a0 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7ff fab1 	bl	80027a0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e03d      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x46a>
 8003258:	e035      	b.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_RCC_OscConfig+0x4cc>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff fa9e 	bl	80027a0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7ff fa9a 	bl	80027a0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e026      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x498>
 8003286:	e01e      	b.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e019      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
 800329c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <HAL_RCC_OscConfig+0x500>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000

080032d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0d0      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d910      	bls.n	8003318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b67      	ldr	r3, [pc, #412]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4965      	ldr	r1, [pc, #404]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b63      	ldr	r3, [pc, #396]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0b8      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003330:	4b59      	ldr	r3, [pc, #356]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4a58      	ldr	r2, [pc, #352]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800333a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003348:	4b53      	ldr	r3, [pc, #332]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a52      	ldr	r2, [pc, #328]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b50      	ldr	r3, [pc, #320]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	494d      	ldr	r1, [pc, #308]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d040      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d115      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07f      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003392:	4b41      	ldr	r3, [pc, #260]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e073      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06b      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	4b39      	ldr	r3, [pc, #228]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f023 0203 	bic.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4936      	ldr	r1, [pc, #216]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c4:	f7ff f9ec 	bl	80027a0 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7ff f9e8 	bl	80027a0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e053      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 020c 	and.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d1eb      	bne.n	80033cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f4:	4b27      	ldr	r3, [pc, #156]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d210      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003402:	4b24      	ldr	r3, [pc, #144]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 0207 	bic.w	r2, r3, #7
 800340a:	4922      	ldr	r1, [pc, #136]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e032      	b.n	800348a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4916      	ldr	r1, [pc, #88]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	490e      	ldr	r1, [pc, #56]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003462:	f000 f821 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490a      	ldr	r1, [pc, #40]	@ (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a09      	ldr	r2, [pc, #36]	@ (80034a0 <HAL_RCC_ClockConfig+0x1cc>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff f94a 	bl	800271c <HAL_InitTick>

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40022000 	.word	0x40022000
 8003498:	40021000 	.word	0x40021000
 800349c:	080048bc 	.word	0x080048bc
 80034a0:	20000004 	.word	0x20000004
 80034a4:	20000008 	.word	0x20000008

080034a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <HAL_RCC_GetSysClockFreq+0x94>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x30>
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x36>
 80034d6:	e027      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d8:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 80034da:	613b      	str	r3, [r7, #16]
      break;
 80034dc:	e027      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	0c9b      	lsrs	r3, r3, #18
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	4a17      	ldr	r2, [pc, #92]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e8:	5cd3      	ldrb	r3, [r2, r3]
 80034ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034f6:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_GetSysClockFreq+0x94>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0c5b      	lsrs	r3, r3, #17
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a0d      	ldr	r2, [pc, #52]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 800350a:	fb03 f202 	mul.w	r2, r3, r2
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e004      	b.n	8003522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	@ (800354c <HAL_RCC_GetSysClockFreq+0xa4>)
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	613b      	str	r3, [r7, #16]
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x98>)
 800352a:	613b      	str	r3, [r7, #16]
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	693b      	ldr	r3, [r7, #16]
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	007a1200 	.word	0x007a1200
 8003544:	080048d4 	.word	0x080048d4
 8003548:	080048e4 	.word	0x080048e4
 800354c:	003d0900 	.word	0x003d0900

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b02      	ldr	r3, [pc, #8]	@ (8003560 <HAL_RCC_GetHCLKFreq+0x10>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003568:	f7ff fff2 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	@ (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	080048cc 	.word	0x080048cc

0800358c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003590:	f7ff ffde 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0adb      	lsrs	r3, r3, #11
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	080048cc 	.word	0x080048cc

080035b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035bc:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <RCC_Delay+0x34>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <RCC_Delay+0x38>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d0:	bf00      	nop
  }
  while (Delay --);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	60fa      	str	r2, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <RCC_Delay+0x1c>
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000004 	.word	0x20000004
 80035ec:	10624dd3 	.word	0x10624dd3

080035f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e041      	b.n	8003686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fea4 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f000 fcc4 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d001      	beq.n	80036a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e03c      	b.n	8003722 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	@ (800372c <HAL_TIM_Base_Start+0x9c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_TIM_Base_Start+0x5c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <HAL_TIM_Base_Start+0xa0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_TIM_Base_Start+0x5c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036cc:	d00e      	beq.n	80036ec <HAL_TIM_Base_Start+0x5c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a18      	ldr	r2, [pc, #96]	@ (8003734 <HAL_TIM_Base_Start+0xa4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_TIM_Base_Start+0x5c>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a16      	ldr	r2, [pc, #88]	@ (8003738 <HAL_TIM_Base_Start+0xa8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_TIM_Base_Start+0x5c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a15      	ldr	r2, [pc, #84]	@ (800373c <HAL_TIM_Base_Start+0xac>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d111      	bne.n	8003710 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d010      	beq.n	8003720 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370e:	e007      	b.n	8003720 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40013400 	.word	0x40013400
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00

08003740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d001      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e044      	b.n	80037e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1d      	ldr	r2, [pc, #116]	@ (80037ec <HAL_TIM_Base_Start_IT+0xac>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x6c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1c      	ldr	r2, [pc, #112]	@ (80037f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x6c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378c:	d00e      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x6c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a18      	ldr	r2, [pc, #96]	@ (80037f4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x6c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a16      	ldr	r2, [pc, #88]	@ (80037f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x6c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a15      	ldr	r2, [pc, #84]	@ (80037fc <HAL_TIM_Base_Start_IT+0xbc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d111      	bne.n	80037d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d010      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	e007      	b.n	80037e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40013400 	.word	0x40013400
 80037f4:	40000400 	.word	0x40000400
 80037f8:	40000800 	.word	0x40000800
 80037fc:	40000c00 	.word	0x40000c00

08003800 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a1a      	ldr	r2, [r3, #32]
 800381e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10f      	bne.n	8003848 <HAL_TIM_Base_Stop_IT+0x48>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_TIM_Base_Stop_IT+0x48>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e041      	b.n	80038f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f839 	bl	80038fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fb8e 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_TIM_PWM_Start+0x24>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf14      	ite	ne
 8003928:	2301      	movne	r3, #1
 800392a:	2300      	moveq	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e022      	b.n	8003976 <HAL_TIM_PWM_Start+0x6a>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d109      	bne.n	800394a <HAL_TIM_PWM_Start+0x3e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	bf14      	ite	ne
 8003942:	2301      	movne	r3, #1
 8003944:	2300      	moveq	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e015      	b.n	8003976 <HAL_TIM_PWM_Start+0x6a>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d109      	bne.n	8003964 <HAL_TIM_PWM_Start+0x58>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e008      	b.n	8003976 <HAL_TIM_PWM_Start+0x6a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e072      	b.n	8003a64 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <HAL_TIM_PWM_Start+0x82>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800398c:	e013      	b.n	80039b6 <HAL_TIM_PWM_Start+0xaa>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start+0x92>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800399c:	e00b      	b.n	80039b6 <HAL_TIM_PWM_Start+0xaa>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start+0xa2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ac:	e003      	b.n	80039b6 <HAL_TIM_PWM_Start+0xaa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2201      	movs	r2, #1
 80039bc:	6839      	ldr	r1, [r7, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fdc4 	bl	800454c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a28      	ldr	r2, [pc, #160]	@ (8003a6c <HAL_TIM_PWM_Start+0x160>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_TIM_PWM_Start+0xcc>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a27      	ldr	r2, [pc, #156]	@ (8003a70 <HAL_TIM_PWM_Start+0x164>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_TIM_PWM_Start+0xd0>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_TIM_PWM_Start+0xd2>
 80039dc:	2300      	movs	r3, #0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <HAL_TIM_PWM_Start+0x160>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x122>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <HAL_TIM_PWM_Start+0x164>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x122>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x122>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a17      	ldr	r2, [pc, #92]	@ (8003a74 <HAL_TIM_PWM_Start+0x168>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x122>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <HAL_TIM_PWM_Start+0x16c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x122>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a14      	ldr	r2, [pc, #80]	@ (8003a7c <HAL_TIM_PWM_Start+0x170>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d111      	bne.n	8003a52 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d010      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	e007      	b.n	8003a62 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40013400 	.word	0x40013400
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00

08003a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d020      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01b      	beq.n	8003ae4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0202 	mvn.w	r2, #2
 8003ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa5a 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fa4d 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fa5c 	bl	8003f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d020      	beq.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01b      	beq.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0204 	mvn.w	r2, #4
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa34 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa27 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fa36 	bl	8003f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d020      	beq.n	8003b7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01b      	beq.n	8003b7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0208 	mvn.w	r2, #8
 8003b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2204      	movs	r2, #4
 8003b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa0e 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003b68:	e005      	b.n	8003b76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa01 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fa10 	bl	8003f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01b      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0210 	mvn.w	r2, #16
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9e8 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f9db 	bl	8003f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f9ea 	bl	8003f96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0201 	mvn.w	r2, #1
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fc ff14 	bl	8000a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fd37 	bl	800467e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f9ba 	bl	8003fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00c      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0220 	mvn.w	r2, #32
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fd0a 	bl	800466c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e0ae      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b0c      	cmp	r3, #12
 8003c8a:	f200 809f 	bhi.w	8003dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003dcd 	.word	0x08003dcd
 8003c9c:	08003dcd 	.word	0x08003dcd
 8003ca0:	08003dcd 	.word	0x08003dcd
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003dcd 	.word	0x08003dcd
 8003cac:	08003dcd 	.word	0x08003dcd
 8003cb0:	08003dcd 	.word	0x08003dcd
 8003cb4:	08003d4b 	.word	0x08003d4b
 8003cb8:	08003dcd 	.word	0x08003dcd
 8003cbc:	08003dcd 	.word	0x08003dcd
 8003cc0:	08003dcd 	.word	0x08003dcd
 8003cc4:	08003d8b 	.word	0x08003d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f9fa 	bl	80040c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0208 	orr.w	r2, r2, #8
 8003ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0204 	bic.w	r2, r2, #4
 8003cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6999      	ldr	r1, [r3, #24]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	619a      	str	r2, [r3, #24]
      break;
 8003d06:	e064      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fa4a 	bl	80041a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6999      	ldr	r1, [r3, #24]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	619a      	str	r2, [r3, #24]
      break;
 8003d48:	e043      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fa9d 	bl	8004290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0208 	orr.w	r2, r2, #8
 8003d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0204 	bic.w	r2, r2, #4
 8003d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69d9      	ldr	r1, [r3, #28]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	61da      	str	r2, [r3, #28]
      break;
 8003d88:	e023      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 faf1 	bl	8004378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69d9      	ldr	r1, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	021a      	lsls	r2, r3, #8
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	61da      	str	r2, [r3, #28]
      break;
 8003dca:	e002      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIM_ConfigClockSource+0x1c>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0b4      	b.n	8003f6a <HAL_TIM_ConfigClockSource+0x186>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e38:	d03e      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e3e:	f200 8087 	bhi.w	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e46:	f000 8086 	beq.w	8003f56 <HAL_TIM_ConfigClockSource+0x172>
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4e:	d87f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b70      	cmp	r3, #112	@ 0x70
 8003e52:	d01a      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0xa6>
 8003e54:	2b70      	cmp	r3, #112	@ 0x70
 8003e56:	d87b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b60      	cmp	r3, #96	@ 0x60
 8003e5a:	d050      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x11a>
 8003e5c:	2b60      	cmp	r3, #96	@ 0x60
 8003e5e:	d877      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b50      	cmp	r3, #80	@ 0x50
 8003e62:	d03c      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xfa>
 8003e64:	2b50      	cmp	r3, #80	@ 0x50
 8003e66:	d873      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b40      	cmp	r3, #64	@ 0x40
 8003e6a:	d058      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x13a>
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d86f      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b30      	cmp	r3, #48	@ 0x30
 8003e72:	d064      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e74:	2b30      	cmp	r3, #48	@ 0x30
 8003e76:	d86b      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	d060      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d867      	bhi.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d05c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d05a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	e062      	b.n	8003f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e9a:	f000 fb38 	bl	800450e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	609a      	str	r2, [r3, #8]
      break;
 8003eb6:	e04f      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ec8:	f000 fb21 	bl	800450e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eda:	609a      	str	r2, [r3, #8]
      break;
 8003edc:	e03c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 fa98 	bl	8004420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2150      	movs	r1, #80	@ 0x50
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 faef 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 8003efc:	e02c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fab6 	bl	800447c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2160      	movs	r1, #96	@ 0x60
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fadf 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e01c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fa78 	bl	8004420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2140      	movs	r1, #64	@ 0x40
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 facf 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f000 fac6 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr
	...

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a39      	ldr	r2, [pc, #228]	@ (80040b4 <TIM_Base_SetConfig+0xf8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a38      	ldr	r2, [pc, #224]	@ (80040b8 <TIM_Base_SetConfig+0xfc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00f      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe2:	d00b      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a35      	ldr	r2, [pc, #212]	@ (80040bc <TIM_Base_SetConfig+0x100>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a34      	ldr	r2, [pc, #208]	@ (80040c0 <TIM_Base_SetConfig+0x104>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a33      	ldr	r2, [pc, #204]	@ (80040c4 <TIM_Base_SetConfig+0x108>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d108      	bne.n	800400e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a28      	ldr	r2, [pc, #160]	@ (80040b4 <TIM_Base_SetConfig+0xf8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a27      	ldr	r2, [pc, #156]	@ (80040b8 <TIM_Base_SetConfig+0xfc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004024:	d00b      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a24      	ldr	r2, [pc, #144]	@ (80040bc <TIM_Base_SetConfig+0x100>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a23      	ldr	r2, [pc, #140]	@ (80040c0 <TIM_Base_SetConfig+0x104>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a22      	ldr	r2, [pc, #136]	@ (80040c4 <TIM_Base_SetConfig+0x108>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d108      	bne.n	8004050 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0f      	ldr	r2, [pc, #60]	@ (80040b4 <TIM_Base_SetConfig+0xf8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_Base_SetConfig+0xc8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a0e      	ldr	r2, [pc, #56]	@ (80040b8 <TIM_Base_SetConfig+0xfc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f023 0201 	bic.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	611a      	str	r2, [r3, #16]
  }
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40013400 	.word	0x40013400
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00

080040c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f023 0201 	bic.w	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f023 0302 	bic.w	r3, r3, #2
 8004110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a20      	ldr	r2, [pc, #128]	@ (80041a0 <TIM_OC1_SetConfig+0xd8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC1_SetConfig+0x64>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <TIM_OC1_SetConfig+0xdc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d10c      	bne.n	8004146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0308 	bic.w	r3, r3, #8
 8004132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f023 0304 	bic.w	r3, r3, #4
 8004144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <TIM_OC1_SetConfig+0xd8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_OC1_SetConfig+0x8e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <TIM_OC1_SetConfig+0xdc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d111      	bne.n	800417a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800415c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40013400 	.word	0x40013400

080041a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 0210 	bic.w	r2, r3, #16
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 0320 	bic.w	r3, r3, #32
 80041f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a21      	ldr	r2, [pc, #132]	@ (8004288 <TIM_OC2_SetConfig+0xe0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC2_SetConfig+0x68>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a20      	ldr	r2, [pc, #128]	@ (800428c <TIM_OC2_SetConfig+0xe4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10d      	bne.n	800422c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800422a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <TIM_OC2_SetConfig+0xe0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC2_SetConfig+0x94>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a15      	ldr	r2, [pc, #84]	@ (800428c <TIM_OC2_SetConfig+0xe4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d113      	bne.n	8004264 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a21      	ldr	r2, [pc, #132]	@ (8004370 <TIM_OC3_SetConfig+0xe0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_OC3_SetConfig+0x66>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a20      	ldr	r2, [pc, #128]	@ (8004374 <TIM_OC3_SetConfig+0xe4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <TIM_OC3_SetConfig+0xe0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_OC3_SetConfig+0x92>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a15      	ldr	r2, [pc, #84]	@ (8004374 <TIM_OC3_SetConfig+0xe4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d113      	bne.n	800434a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40013400 	.word	0x40013400

08004378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a11      	ldr	r2, [pc, #68]	@ (8004418 <TIM_OC4_SetConfig+0xa0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC4_SetConfig+0x68>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a10      	ldr	r2, [pc, #64]	@ (800441c <TIM_OC4_SetConfig+0xa4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d109      	bne.n	80043f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40013400 	.word	0x40013400

08004420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800444a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 030a 	bic.w	r3, r3, #10
 800445c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0210 	bic.w	r2, r3, #16
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	031b      	lsls	r3, r3, #12
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f043 0307 	orr.w	r3, r3, #7
 80044fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	021a      	lsls	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	431a      	orrs	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	609a      	str	r2, [r3, #8]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2201      	movs	r2, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1a      	ldr	r2, [r3, #32]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a1a      	ldr	r2, [r3, #32]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e050      	b.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004602:	d00e      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a12      	ldr	r2, [pc, #72]	@ (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10c      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	4313      	orrs	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40013400 	.word	0x40013400
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800
 8004668:	40000c00 	.word	0x40000c00

0800466c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e042      	b.n	8004728 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd ff1e 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	@ 0x24
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f82b 	bl	8004730 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800476a:	f023 030c 	bic.w	r3, r3, #12
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	68b9      	ldr	r1, [r7, #8]
 8004774:	430b      	orrs	r3, r1
 8004776:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2c      	ldr	r2, [pc, #176]	@ (8004844 <UART_SetConfig+0x114>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d103      	bne.n	80047a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004798:	f7fe fef8 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	e002      	b.n	80047a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fe fee0 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 80047a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009a      	lsls	r2, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	4a22      	ldr	r2, [pc, #136]	@ (8004848 <UART_SetConfig+0x118>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	0119      	lsls	r1, r3, #4
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009a      	lsls	r2, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004848 <UART_SetConfig+0x118>)
 80047de:	fba3 0302 	umull	r0, r3, r3, r2
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2064      	movs	r0, #100	@ 0x64
 80047e6:	fb00 f303 	mul.w	r3, r0, r3
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	3332      	adds	r3, #50	@ 0x32
 80047f0:	4a15      	ldr	r2, [pc, #84]	@ (8004848 <UART_SetConfig+0x118>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047fc:	4419      	add	r1, r3
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	009a      	lsls	r2, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	fbb2 f2f3 	udiv	r2, r2, r3
 8004814:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <UART_SetConfig+0x118>)
 8004816:	fba3 0302 	umull	r0, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2064      	movs	r0, #100	@ 0x64
 800481e:	fb00 f303 	mul.w	r3, r0, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	@ 0x32
 8004828:	4a07      	ldr	r2, [pc, #28]	@ (8004848 <UART_SetConfig+0x118>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	440a      	add	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40013800 	.word	0x40013800
 8004848:	51eb851f 	.word	0x51eb851f

0800484c <memset>:
 800484c:	4603      	mov	r3, r0
 800484e:	4402      	add	r2, r0
 8004850:	4293      	cmp	r3, r2
 8004852:	d100      	bne.n	8004856 <memset+0xa>
 8004854:	4770      	bx	lr
 8004856:	f803 1b01 	strb.w	r1, [r3], #1
 800485a:	e7f9      	b.n	8004850 <memset+0x4>

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	2600      	movs	r6, #0
 8004860:	4d0c      	ldr	r5, [pc, #48]	@ (8004894 <__libc_init_array+0x38>)
 8004862:	4c0d      	ldr	r4, [pc, #52]	@ (8004898 <__libc_init_array+0x3c>)
 8004864:	1b64      	subs	r4, r4, r5
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	f000 f81a 	bl	80048a4 <_init>
 8004870:	2600      	movs	r6, #0
 8004872:	4d0a      	ldr	r5, [pc, #40]	@ (800489c <__libc_init_array+0x40>)
 8004874:	4c0a      	ldr	r4, [pc, #40]	@ (80048a0 <__libc_init_array+0x44>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	080048e8 	.word	0x080048e8
 8004898:	080048e8 	.word	0x080048e8
 800489c:	080048e8 	.word	0x080048e8
 80048a0:	080048ec 	.word	0x080048ec

080048a4 <_init>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	bf00      	nop
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr

080048b0 <_fini>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr
