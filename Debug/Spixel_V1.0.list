
Spixel_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003864  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a48  08003a48  00004a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a74  08003a74  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a74  08003a74  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a74  08003a74  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a74  08003a74  00004a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a78  08003a78  00004a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000000c  08003a88  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003a88  0000520c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcb1  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b32  00000000  00000000  00010ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00012818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000949  00000000  00000000  000133e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc7  00000000  00000000  00013d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db60  00000000  00000000  0002d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099151  00000000  00000000  0003b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d46a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003140  00000000  00000000  000d46ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000d782c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003a30 	.word	0x08003a30

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003a30 	.word	0x08003a30

08000224 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == CH1_Pin )//|| limit_value !=2
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000234:	d103      	bne.n	800023e <HAL_GPIO_EXTI_Callback+0x1a>
	{
		read_pwm(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fb98 	bl	800096c <read_pwm>
 800023c:	e048      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>
	}
	else if(GPIO_Pin == CH2_Pin )//|| limit_value!=1
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	2b80      	cmp	r3, #128	@ 0x80
 8000242:	d103      	bne.n	800024c <HAL_GPIO_EXTI_Callback+0x28>
	{
		read_pwm(2);
 8000244:	2002      	movs	r0, #2
 8000246:	f000 fb91 	bl	800096c <read_pwm>
 800024a:	e041      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>
	}
	else if(GPIO_Pin == CH3_Pin)
 800024c:	88fb      	ldrh	r3, [r7, #6]
 800024e:	2b40      	cmp	r3, #64	@ 0x40
 8000250:	d103      	bne.n	800025a <HAL_GPIO_EXTI_Callback+0x36>
	{
		read_pwm(3);
 8000252:	2003      	movs	r0, #3
 8000254:	f000 fb8a 	bl	800096c <read_pwm>
 8000258:	e03a      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH4_Pin)
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	2b20      	cmp	r3, #32
 800025e:	d103      	bne.n	8000268 <HAL_GPIO_EXTI_Callback+0x44>
	{
		read_pwm(4);
 8000260:	2004      	movs	r0, #4
 8000262:	f000 fb83 	bl	800096c <read_pwm>
 8000266:	e033      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH5_Pin)
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	2b10      	cmp	r3, #16
 800026c:	d103      	bne.n	8000276 <HAL_GPIO_EXTI_Callback+0x52>
	{
		read_pwm(5);
 800026e:	2005      	movs	r0, #5
 8000270:	f000 fb7c 	bl	800096c <read_pwm>
 8000274:	e02c      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH6_Pin)
 8000276:	88fb      	ldrh	r3, [r7, #6]
 8000278:	2b08      	cmp	r3, #8
 800027a:	d103      	bne.n	8000284 <HAL_GPIO_EXTI_Callback+0x60>
	{
		read_pwm(6);
 800027c:	2006      	movs	r0, #6
 800027e:	f000 fb75 	bl	800096c <read_pwm>
 8000282:	e025      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH7_Pin)
 8000284:	88fb      	ldrh	r3, [r7, #6]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d103      	bne.n	8000292 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		read_pwm(7);
 800028a:	2007      	movs	r0, #7
 800028c:	f000 fb6e 	bl	800096c <read_pwm>
 8000290:	e01e      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH8_Pin)
 8000292:	88fb      	ldrh	r3, [r7, #6]
 8000294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000298:	d103      	bne.n	80002a2 <HAL_GPIO_EXTI_Callback+0x7e>
	{
		read_pwm(8);
 800029a:	2008      	movs	r0, #8
 800029c:	f000 fb66 	bl	800096c <read_pwm>
 80002a0:	e016      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH9_Pin)
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80002a8:	d103      	bne.n	80002b2 <HAL_GPIO_EXTI_Callback+0x8e>
	{
		read_pwm(9);
 80002aa:	2009      	movs	r0, #9
 80002ac:	f000 fb5e 	bl	800096c <read_pwm>
 80002b0:	e00e      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH10_Pin)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80002b8:	d103      	bne.n	80002c2 <HAL_GPIO_EXTI_Callback+0x9e>
	{
		read_pwm(10);
 80002ba:	200a      	movs	r0, #10
 80002bc:	f000 fb56 	bl	800096c <read_pwm>
 80002c0:	e006      	b.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>

	}
	else if(GPIO_Pin == CH11_Pin)
 80002c2:	88fb      	ldrh	r3, [r7, #6]
 80002c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002c8:	d102      	bne.n	80002d0 <HAL_GPIO_EXTI_Callback+0xac>
	{
		read_pwm(11);
 80002ca:	200b      	movs	r0, #11
 80002cc:	f000 fb4e 	bl	800096c <read_pwm>
//		HAL_GPIO_WritePin(BRK_1A_GPIO_Port, BRK_1A_Pin, RESET);
//		HAL_GPIO_WritePin(BRK_1B_GPIO_Port, BRK_1B_Pin, RESET);
//		direction(2,100,100);
//	}

	convert();
 80002d0:	f001 f87a 	bl	80013c8 <convert>
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f001 fca4 	bl	8001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f82e 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 fa04 	bl	80006f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80002ec:	f000 f870 	bl	80003d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002f0:	f000 f8be 	bl	8000470 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002f4:	f000 f948 	bl	8000588 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80002f8:	f000 f9d2 	bl	80006a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // TIM2 BROOM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80002fc:	2104      	movs	r1, #4
 80002fe:	480e      	ldr	r0, [pc, #56]	@ (8000338 <main+0x5c>)
 8000300:	f002 fcf0 	bl	8002ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000304:	2108      	movs	r1, #8
 8000306:	480c      	ldr	r0, [pc, #48]	@ (8000338 <main+0x5c>)
 8000308:	f002 fcec 	bl	8002ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800030c:	210c      	movs	r1, #12
 800030e:	480a      	ldr	r0, [pc, #40]	@ (8000338 <main+0x5c>)
 8000310:	f002 fce8 	bl	8002ce4 <HAL_TIM_PWM_Start>

  //TIM3 WHEEL
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4809      	ldr	r0, [pc, #36]	@ (800033c <main+0x60>)
 8000318:	f002 fce4 	bl	8002ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800031c:	2104      	movs	r1, #4
 800031e:	4807      	ldr	r0, [pc, #28]	@ (800033c <main+0x60>)
 8000320:	f002 fce0 	bl	8002ce4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000324:	2108      	movs	r1, #8
 8000326:	4805      	ldr	r0, [pc, #20]	@ (800033c <main+0x60>)
 8000328:	f002 fcdc 	bl	8002ce4 <HAL_TIM_PWM_Start>


  HAL_TIM_Base_Start(&htim1);
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <main+0x64>)
 800032e:	f002 fc29 	bl	8002b84 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  control();
 8000332:	f001 fa7f 	bl	8001834 <control>
 8000336:	e7fc      	b.n	8000332 <main+0x56>
 8000338:	20000070 	.word	0x20000070
 800033c:	200000b8 	.word	0x200000b8
 8000340:	20000028 	.word	0x20000028

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	@ 0x40
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2228      	movs	r2, #40	@ 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fb40 	bl	80039d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800036e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000374:	2301      	movs	r3, #1
 8000376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000380:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000382:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	f107 0318 	add.w	r3, r7, #24
 800038c:	4618      	mov	r0, r3
 800038e:	f001 ff99 	bl	80022c4 <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000398:	f000 fabc 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039c:	230f      	movs	r3, #15
 800039e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	2302      	movs	r3, #2
 80003a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2102      	movs	r1, #2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fa06 	bl	80027c8 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003c2:	f000 faa7 	bl	8000914 <Error_Handler>
  }
}
 80003c6:	bf00      	nop
 80003c8:	3740      	adds	r7, #64	@ 0x40
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000468 <MX_TIM1_Init+0x98>)
 80003ee:	4a1f      	ldr	r2, [pc, #124]	@ (800046c <MX_TIM1_Init+0x9c>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000468 <MX_TIM1_Init+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000468 <MX_TIM1_Init+0x98>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <MX_TIM1_Init+0x98>)
 8000400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000404:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000406:	4b18      	ldr	r3, [pc, #96]	@ (8000468 <MX_TIM1_Init+0x98>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040c:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <MX_TIM1_Init+0x98>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000412:	4b15      	ldr	r3, [pc, #84]	@ (8000468 <MX_TIM1_Init+0x98>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000418:	4813      	ldr	r0, [pc, #76]	@ (8000468 <MX_TIM1_Init+0x98>)
 800041a:	f002 fb63 	bl	8002ae4 <HAL_TIM_Base_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000424:	f000 fa76 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800042c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800042e:	f107 0308 	add.w	r3, r7, #8
 8000432:	4619      	mov	r1, r3
 8000434:	480c      	ldr	r0, [pc, #48]	@ (8000468 <MX_TIM1_Init+0x98>)
 8000436:	f002 fdd1 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000440:	f000 fa68 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000444:	2300      	movs	r3, #0
 8000446:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	4619      	mov	r1, r3
 8000450:	4805      	ldr	r0, [pc, #20]	@ (8000468 <MX_TIM1_Init+0x98>)
 8000452:	f003 f977 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800045c:	f000 fa5a 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000028 	.word	0x20000028
 800046c:	40012c00 	.word	0x40012c00

08000470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08e      	sub	sp, #56	@ 0x38
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000484:	f107 0320 	add.w	r3, r7, #32
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]
 800049e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004a0:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80004a8:	4b36      	ldr	r3, [pc, #216]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004aa:	2263      	movs	r2, #99	@ 0x63
 80004ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14400-1;
 80004b4:	4b33      	ldr	r3, [pc, #204]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004b6:	f643 023f 	movw	r2, #14399	@ 0x383f
 80004ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004bc:	4b31      	ldr	r3, [pc, #196]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c2:	4b30      	ldr	r3, [pc, #192]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c8:	482e      	ldr	r0, [pc, #184]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004ca:	f002 fb0b 	bl	8002ae4 <HAL_TIM_Base_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80004d4:	f000 fa1e 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004e2:	4619      	mov	r1, r3
 80004e4:	4827      	ldr	r0, [pc, #156]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004e6:	f002 fd79 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004f0:	f000 fa10 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004f4:	4823      	ldr	r0, [pc, #140]	@ (8000584 <MX_TIM2_Init+0x114>)
 80004f6:	f002 fb9d 	bl	8002c34 <HAL_TIM_PWM_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000500:	f000 fa08 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800050c:	f107 0320 	add.w	r3, r7, #32
 8000510:	4619      	mov	r1, r3
 8000512:	481c      	ldr	r0, [pc, #112]	@ (8000584 <MX_TIM2_Init+0x114>)
 8000514:	f003 f916 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800051e:	f000 f9f9 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000522:	2360      	movs	r3, #96	@ 0x60
 8000524:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2204      	movs	r2, #4
 8000536:	4619      	mov	r1, r3
 8000538:	4812      	ldr	r0, [pc, #72]	@ (8000584 <MX_TIM2_Init+0x114>)
 800053a:	f002 fc8d 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000544:	f000 f9e6 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2208      	movs	r2, #8
 800054c:	4619      	mov	r1, r3
 800054e:	480d      	ldr	r0, [pc, #52]	@ (8000584 <MX_TIM2_Init+0x114>)
 8000550:	f002 fc82 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800055a:	f000 f9db 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	220c      	movs	r2, #12
 8000562:	4619      	mov	r1, r3
 8000564:	4807      	ldr	r0, [pc, #28]	@ (8000584 <MX_TIM2_Init+0x114>)
 8000566:	f002 fc77 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000570:	f000 f9d0 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <MX_TIM2_Init+0x114>)
 8000576:	f001 fa05 	bl	8001984 <HAL_TIM_MspPostInit>

}
 800057a:	bf00      	nop
 800057c:	3738      	adds	r7, #56	@ 0x38
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000070 	.word	0x20000070

08000588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08e      	sub	sp, #56	@ 0x38
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]
 80005b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b8:	4b37      	ldr	r3, [pc, #220]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005ba:	4a38      	ldr	r2, [pc, #224]	@ (800069c <MX_TIM3_Init+0x114>)
 80005bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 80005be:	4b36      	ldr	r3, [pc, #216]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005c0:	2231      	movs	r2, #49	@ 0x31
 80005c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b34      	ldr	r3, [pc, #208]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 28800-1;
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005cc:	f247 027f 	movw	r2, #28799	@ 0x707f
 80005d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d2:	4b31      	ldr	r3, [pc, #196]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005de:	482e      	ldr	r0, [pc, #184]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005e0:	f002 fa80 	bl	8002ae4 <HAL_TIM_Base_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80005ea:	f000 f993 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f8:	4619      	mov	r1, r3
 80005fa:	4827      	ldr	r0, [pc, #156]	@ (8000698 <MX_TIM3_Init+0x110>)
 80005fc:	f002 fcee 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000606:	f000 f985 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800060a:	4823      	ldr	r0, [pc, #140]	@ (8000698 <MX_TIM3_Init+0x110>)
 800060c:	f002 fb12 	bl	8002c34 <HAL_TIM_PWM_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000616:	f000 f97d 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061a:	2300      	movs	r3, #0
 800061c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4619      	mov	r1, r3
 8000628:	481b      	ldr	r0, [pc, #108]	@ (8000698 <MX_TIM3_Init+0x110>)
 800062a:	f003 f88b 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000634:	f000 f96e 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000638:	2360      	movs	r3, #96	@ 0x60
 800063a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	4812      	ldr	r0, [pc, #72]	@ (8000698 <MX_TIM3_Init+0x110>)
 8000650:	f002 fc02 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800065a:	f000 f95b 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2204      	movs	r2, #4
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <MX_TIM3_Init+0x110>)
 8000666:	f002 fbf7 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000670:	f000 f950 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2208      	movs	r2, #8
 8000678:	4619      	mov	r1, r3
 800067a:	4807      	ldr	r0, [pc, #28]	@ (8000698 <MX_TIM3_Init+0x110>)
 800067c:	f002 fbec 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000686:	f000 f945 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800068a:	4803      	ldr	r0, [pc, #12]	@ (8000698 <MX_TIM3_Init+0x110>)
 800068c:	f001 f97a 	bl	8001984 <HAL_TIM_MspPostInit>

}
 8000690:	bf00      	nop
 8000692:	3738      	adds	r7, #56	@ 0x38
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000b8 	.word	0x200000b8
 800069c:	40000400 	.word	0x40000400

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART1_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART1_UART_Init+0x4c>)
 80006d8:	f003 f8a0 	bl	800381c <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f917 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000100 	.word	0x20000100
 80006f0:	40013800 	.word	0x40013800

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b7c      	ldr	r3, [pc, #496]	@ (80008fc <MX_GPIO_Init+0x208>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a7b      	ldr	r2, [pc, #492]	@ (80008fc <MX_GPIO_Init+0x208>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b79      	ldr	r3, [pc, #484]	@ (80008fc <MX_GPIO_Init+0x208>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b76      	ldr	r3, [pc, #472]	@ (80008fc <MX_GPIO_Init+0x208>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a75      	ldr	r2, [pc, #468]	@ (80008fc <MX_GPIO_Init+0x208>)
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b73      	ldr	r3, [pc, #460]	@ (80008fc <MX_GPIO_Init+0x208>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000738:	4b70      	ldr	r3, [pc, #448]	@ (80008fc <MX_GPIO_Init+0x208>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a6f      	ldr	r2, [pc, #444]	@ (80008fc <MX_GPIO_Init+0x208>)
 800073e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b6d      	ldr	r3, [pc, #436]	@ (80008fc <MX_GPIO_Init+0x208>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000750:	4b6a      	ldr	r3, [pc, #424]	@ (80008fc <MX_GPIO_Init+0x208>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a69      	ldr	r2, [pc, #420]	@ (80008fc <MX_GPIO_Init+0x208>)
 8000756:	f043 0320 	orr.w	r3, r3, #32
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b67      	ldr	r3, [pc, #412]	@ (80008fc <MX_GPIO_Init+0x208>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0320 	and.w	r3, r3, #32
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	4b64      	ldr	r3, [pc, #400]	@ (80008fc <MX_GPIO_Init+0x208>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a63      	ldr	r2, [pc, #396]	@ (80008fc <MX_GPIO_Init+0x208>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b61      	ldr	r3, [pc, #388]	@ (80008fc <MX_GPIO_Init+0x208>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000786:	485e      	ldr	r0, [pc, #376]	@ (8000900 <MX_GPIO_Init+0x20c>)
 8000788:	f001 fd6b 	bl	8002262 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000792:	485c      	ldr	r0, [pc, #368]	@ (8000904 <MX_GPIO_Init+0x210>)
 8000794:	f001 fd65 	bl	8002262 <HAL_GPIO_WritePin>
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin|F_R_1A_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800079e:	485a      	ldr	r0, [pc, #360]	@ (8000908 <MX_GPIO_Init+0x214>)
 80007a0:	f001 fd5f 	bl	8002262 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2101      	movs	r1, #1
 80007a8:	4858      	ldr	r0, [pc, #352]	@ (800090c <MX_GPIO_Init+0x218>)
 80007aa:	f001 fd5a 	bl	8002262 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SS1_Pin CH6_Pin CH5_Pin CH4_Pin
                           CH3_Pin CH2_Pin CH1_Pin CH11_Pin */
  GPIO_InitStruct.Pin = SS1_Pin|CH6_Pin|CH5_Pin|CH4_Pin
 80007ae:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 80007b2:	61bb      	str	r3, [r7, #24]
                          |CH3_Pin|CH2_Pin|CH1_Pin|CH11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b4:	4b56      	ldr	r3, [pc, #344]	@ (8000910 <MX_GPIO_Init+0x21c>)
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4619      	mov	r1, r3
 80007c2:	484f      	ldr	r0, [pc, #316]	@ (8000900 <MX_GPIO_Init+0x20c>)
 80007c4:	f001 fba2 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS5_Pin SS6_Pin SS7_Pin SS8_Pin */
  GPIO_InitStruct.Pin = SS5_Pin|SS6_Pin|SS7_Pin|SS8_Pin;
 80007c8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	4619      	mov	r1, r3
 80007dc:	484b      	ldr	r0, [pc, #300]	@ (800090c <MX_GPIO_Init+0x218>)
 80007de:	f001 fb95 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS2_Pin SS3_Pin SS4_Pin */
  GPIO_InitStruct.Pin = SS2_Pin|SS3_Pin|SS4_Pin;
 80007e2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e8:	4b49      	ldr	r3, [pc, #292]	@ (8000910 <MX_GPIO_Init+0x21c>)
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4619      	mov	r1, r3
 80007f6:	4845      	ldr	r0, [pc, #276]	@ (800090c <MX_GPIO_Init+0x218>)
 80007f8:	f001 fb88 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_Pin LIGHT_Pin SLN_Pin OUT_Pin */
  GPIO_InitStruct.Pin = CAM_Pin|LIGHT_Pin|SLN_Pin|OUT_Pin;
 80007fc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2302      	movs	r3, #2
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	4619      	mov	r1, r3
 8000814:	483a      	ldr	r0, [pc, #232]	@ (8000900 <MX_GPIO_Init+0x20c>)
 8000816:	f001 fb79 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : BRK_2B_Pin EN_2B_Pin F_R_2B_Pin BRK_2A_Pin
                           EN_2A_Pin F_R_2A_Pin BRK_1B_Pin EN_1B_Pin */
  GPIO_InitStruct.Pin = BRK_2B_Pin|EN_2B_Pin|F_R_2B_Pin|BRK_2A_Pin
 800081a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800081e:	61bb      	str	r3, [r7, #24]
                          |EN_2A_Pin|F_R_2A_Pin|BRK_1B_Pin|EN_1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2302      	movs	r3, #2
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4619      	mov	r1, r3
 8000832:	4834      	ldr	r0, [pc, #208]	@ (8000904 <MX_GPIO_Init+0x210>)
 8000834:	f001 fb6a 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : F_R_1B_Pin BRK_1A_Pin EN_1A_Pin F_R_1A_Pin */
  GPIO_InitStruct.Pin = F_R_1B_Pin|BRK_1A_Pin|EN_1A_Pin|F_R_1A_Pin;
 8000838:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2302      	movs	r3, #2
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	4619      	mov	r1, r3
 8000850:	482d      	ldr	r0, [pc, #180]	@ (8000908 <MX_GPIO_Init+0x214>)
 8000852:	f001 fb5b 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH10_Pin CH9_Pin CH8_Pin */
  GPIO_InitStruct.Pin = CH10_Pin|CH9_Pin|CH8_Pin;
 8000856:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085c:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <MX_GPIO_Init+0x21c>)
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000864:	f107 0318 	add.w	r3, r7, #24
 8000868:	4619      	mov	r1, r3
 800086a:	4827      	ldr	r0, [pc, #156]	@ (8000908 <MX_GPIO_Init+0x214>)
 800086c:	f001 fb4e 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CH7_Pin */
  GPIO_InitStruct.Pin = CH7_Pin;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_GPIO_Init+0x21c>)
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	4619      	mov	r1, r3
 8000882:	4820      	ldr	r0, [pc, #128]	@ (8000904 <MX_GPIO_Init+0x210>)
 8000884:	f001 fb42 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2302      	movs	r3, #2
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	@ (800090c <MX_GPIO_Init+0x218>)
 80008a0:	f001 fb34 	bl	8001f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2006      	movs	r0, #6
 80008aa:	f001 faf8 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ae:	2006      	movs	r0, #6
 80008b0:	f001 fb11 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2009      	movs	r0, #9
 80008ba:	f001 faf0 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008be:	2009      	movs	r0, #9
 80008c0:	f001 fb09 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	200a      	movs	r0, #10
 80008ca:	f001 fae8 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 fb01 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2017      	movs	r0, #23
 80008da:	f001 fae0 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008de:	2017      	movs	r0, #23
 80008e0:	f001 faf9 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	2028      	movs	r0, #40	@ 0x28
 80008ea:	f001 fad8 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008ee:	2028      	movs	r0, #40	@ 0x28
 80008f0:	f001 faf1 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010c00 	.word	0x40010c00
 8000904:	40011400 	.word	0x40011400
 8000908:	40011000 	.word	0x40011000
 800090c:	40011800 	.word	0x40011800
 8000910:	10110000 	.word	0x10110000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <map>:

int first_filter = 0;
float alpha = 0.5;

uint16_t map(uint16_t x,uint16_t In_Max,uint16_t In_Min,uint16_t Out_Max,uint16_t Out_Min )
{
 8000920:	b490      	push	{r4, r7}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4604      	mov	r4, r0
 8000928:	4608      	mov	r0, r1
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	4623      	mov	r3, r4
 8000930:	80fb      	strh	r3, [r7, #6]
 8000932:	4603      	mov	r3, r0
 8000934:	80bb      	strh	r3, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	807b      	strh	r3, [r7, #2]
 800093a:	4613      	mov	r3, r2
 800093c:	803b      	strh	r3, [r7, #0]
	return(((x-In_Min)*(Out_Max-Out_Min)/(In_Max-In_Min))+Out_Min);
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	887b      	ldrh	r3, [r7, #2]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	8839      	ldrh	r1, [r7, #0]
 8000946:	8a3a      	ldrh	r2, [r7, #16]
 8000948:	1a8a      	subs	r2, r1, r2
 800094a:	fb03 f202 	mul.w	r2, r3, r2
 800094e:	88b9      	ldrh	r1, [r7, #4]
 8000950:	887b      	ldrh	r3, [r7, #2]
 8000952:	1acb      	subs	r3, r1, r3
 8000954:	fb92 f3f3 	sdiv	r3, r2, r3
 8000958:	b29a      	uxth	r2, r3
 800095a:	8a3b      	ldrh	r3, [r7, #16]
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bc90      	pop	{r4, r7}
 8000968:	4770      	bx	lr
	...

0800096c <read_pwm>:
	uint32_t out = alpha*first_filter+(1-alpha)*in;
	first_filter = out;
	return out;
}
void read_pwm(int val_ch)
	{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0da      	sub	sp, #360	@ 0x168
 8000970:	af00      	add	r7, sp, #0
 8000972:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000976:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800097a:	6018      	str	r0, [r3, #0]
		switch(val_ch)
 800097c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000980:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	2b0a      	cmp	r3, #10
 800098a:	f200 8509 	bhi.w	80013a0 <read_pwm+0xa34>
 800098e:	a201      	add	r2, pc, #4	@ (adr r2, 8000994 <read_pwm+0x28>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009c1 	.word	0x080009c1
 8000998:	08000aa9 	.word	0x08000aa9
 800099c:	08000b8b 	.word	0x08000b8b
 80009a0:	08000c85 	.word	0x08000c85
 80009a4:	08000d63 	.word	0x08000d63
 80009a8:	08000e1f 	.word	0x08000e1f
 80009ac:	08000efd 	.word	0x08000efd
 80009b0:	08000fb9 	.word	0x08000fb9
 80009b4:	08001089 	.word	0x08001089
 80009b8:	08001191 	.word	0x08001191
 80009bc:	08001299 	.word	0x08001299
		{
			case 1:
					if(HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin)==1)
 80009c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c4:	4898      	ldr	r0, [pc, #608]	@ (8000c28 <read_pwm+0x2bc>)
 80009c6:	f001 fc35 	bl	8002234 <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d116      	bne.n	80009fe <read_pwm+0x92>
					{
						read_1.start = htim1.Instance->CNT;
 80009d0:	4b96      	ldr	r3, [pc, #600]	@ (8000c2c <read_pwm+0x2c0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d6:	4a96      	ldr	r2, [pc, #600]	@ (8000c30 <read_pwm+0x2c4>)
 80009d8:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH1_Pin;
 80009da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009de:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e2:	4b94      	ldr	r3, [pc, #592]	@ (8000c34 <read_pwm+0x2c8>)
 80009e4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80009f2:	4619      	mov	r1, r3
 80009f4:	488c      	ldr	r0, [pc, #560]	@ (8000c28 <read_pwm+0x2bc>)
 80009f6:	f001 fa89 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH1_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 80009fa:	f000 bcd1 	b.w	80013a0 <read_pwm+0xa34>
						read_1.end = htim1.Instance->CNT;
 80009fe:	4b8b      	ldr	r3, [pc, #556]	@ (8000c2c <read_pwm+0x2c0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a04:	4a8a      	ldr	r2, [pc, #552]	@ (8000c30 <read_pwm+0x2c4>)
 8000a06:	6053      	str	r3, [r2, #4]
						if(read_1.start > read_1.end)
 8000a08:	4b89      	ldr	r3, [pc, #548]	@ (8000c30 <read_pwm+0x2c4>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b88      	ldr	r3, [pc, #544]	@ (8000c30 <read_pwm+0x2c4>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d90a      	bls.n	8000a2a <read_pwm+0xbe>
							read_1.out = 65535 - read_1.start + read_1.end;
 8000a14:	4b86      	ldr	r3, [pc, #536]	@ (8000c30 <read_pwm+0x2c4>)
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	4b85      	ldr	r3, [pc, #532]	@ (8000c30 <read_pwm+0x2c4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a22:	33ff      	adds	r3, #255	@ 0xff
 8000a24:	4a82      	ldr	r2, [pc, #520]	@ (8000c30 <read_pwm+0x2c4>)
 8000a26:	6093      	str	r3, [r2, #8]
 8000a28:	e006      	b.n	8000a38 <read_pwm+0xcc>
							read_1.out = read_1.end - read_1.start;
 8000a2a:	4b81      	ldr	r3, [pc, #516]	@ (8000c30 <read_pwm+0x2c4>)
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4b80      	ldr	r3, [pc, #512]	@ (8000c30 <read_pwm+0x2c4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	4a7e      	ldr	r2, [pc, #504]	@ (8000c30 <read_pwm+0x2c4>)
 8000a36:	6093      	str	r3, [r2, #8]
						if(read_1.out > 61200)
 8000a38:	4b7d      	ldr	r3, [pc, #500]	@ (8000c30 <read_pwm+0x2c4>)
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d904      	bls.n	8000a4e <read_pwm+0xe2>
							read_1.out = 61200;
 8000a44:	4b7a      	ldr	r3, [pc, #488]	@ (8000c30 <read_pwm+0x2c4>)
 8000a46:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	e01a      	b.n	8000a84 <read_pwm+0x118>
						else if(read_1.out < 7000)
 8000a4e:	4b78      	ldr	r3, [pc, #480]	@ (8000c30 <read_pwm+0x2c4>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d804      	bhi.n	8000a64 <read_pwm+0xf8>
							read_1.out = 7000;
 8000a5a:	4b75      	ldr	r3, [pc, #468]	@ (8000c30 <read_pwm+0x2c4>)
 8000a5c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	e00f      	b.n	8000a84 <read_pwm+0x118>
						else if(40000 <= read_1.out && read_1.out <= 45000)
 8000a64:	4b72      	ldr	r3, [pc, #456]	@ (8000c30 <read_pwm+0x2c4>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d909      	bls.n	8000a84 <read_pwm+0x118>
 8000a70:	4b6f      	ldr	r3, [pc, #444]	@ (8000c30 <read_pwm+0x2c4>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d803      	bhi.n	8000a84 <read_pwm+0x118>
							read_1.out = 43200;
 8000a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8000c30 <read_pwm+0x2c4>)
 8000a7e:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8000a82:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH1_Pin;
 8000a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a88:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8000c38 <read_pwm+0x2cc>)
 8000a8e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
						HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4862      	ldr	r0, [pc, #392]	@ (8000c28 <read_pwm+0x2bc>)
 8000aa0:	f001 fa34 	bl	8001f0c <HAL_GPIO_Init>
			break;
 8000aa4:	f000 bc7c 	b.w	80013a0 <read_pwm+0xa34>
			case 2:
					if(HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin)==1)
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	485f      	ldr	r0, [pc, #380]	@ (8000c28 <read_pwm+0x2bc>)
 8000aac:	f001 fbc2 	bl	8002234 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d115      	bne.n	8000ae2 <read_pwm+0x176>
					{
						read_2.start = htim1.Instance->CNT;
 8000ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8000c2c <read_pwm+0x2c0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000abc:	4a5f      	ldr	r2, [pc, #380]	@ (8000c3c <read_pwm+0x2d0>)
 8000abe:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH2_Pin;
 8000ac0:	2380      	movs	r3, #128	@ 0x80
 8000ac2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8000c34 <read_pwm+0x2c8>)
 8000ac8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4853      	ldr	r0, [pc, #332]	@ (8000c28 <read_pwm+0x2bc>)
 8000ada:	f001 fa17 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH2_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000ade:	f000 bc5f 	b.w	80013a0 <read_pwm+0xa34>
						read_2.end = htim1.Instance->CNT;
 8000ae2:	4b52      	ldr	r3, [pc, #328]	@ (8000c2c <read_pwm+0x2c0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae8:	4a54      	ldr	r2, [pc, #336]	@ (8000c3c <read_pwm+0x2d0>)
 8000aea:	6053      	str	r3, [r2, #4]
						if(read_2.start > read_2.end)
 8000aec:	4b53      	ldr	r3, [pc, #332]	@ (8000c3c <read_pwm+0x2d0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b52      	ldr	r3, [pc, #328]	@ (8000c3c <read_pwm+0x2d0>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d90a      	bls.n	8000b0e <read_pwm+0x1a2>
							read_2.out = 65535 - read_2.start + read_2.end;
 8000af8:	4b50      	ldr	r3, [pc, #320]	@ (8000c3c <read_pwm+0x2d0>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	4b4f      	ldr	r3, [pc, #316]	@ (8000c3c <read_pwm+0x2d0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000b06:	33ff      	adds	r3, #255	@ 0xff
 8000b08:	4a4c      	ldr	r2, [pc, #304]	@ (8000c3c <read_pwm+0x2d0>)
 8000b0a:	6093      	str	r3, [r2, #8]
 8000b0c:	e006      	b.n	8000b1c <read_pwm+0x1b0>
							read_2.out = read_2.end - read_2.start;
 8000b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c3c <read_pwm+0x2d0>)
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	4b4a      	ldr	r3, [pc, #296]	@ (8000c3c <read_pwm+0x2d0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	4a48      	ldr	r2, [pc, #288]	@ (8000c3c <read_pwm+0x2d0>)
 8000b1a:	6093      	str	r3, [r2, #8]
						if(read_2.out >= 61200)
 8000b1c:	4b47      	ldr	r3, [pc, #284]	@ (8000c3c <read_pwm+0x2d0>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d904      	bls.n	8000b32 <read_pwm+0x1c6>
							read_2.out = 61200;
 8000b28:	4b44      	ldr	r3, [pc, #272]	@ (8000c3c <read_pwm+0x2d0>)
 8000b2a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	e01a      	b.n	8000b68 <read_pwm+0x1fc>
						else if(read_2.out <= 7000)
 8000b32:	4b42      	ldr	r3, [pc, #264]	@ (8000c3c <read_pwm+0x2d0>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d804      	bhi.n	8000b48 <read_pwm+0x1dc>
							read_2.out = 7000;
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c3c <read_pwm+0x2d0>)
 8000b40:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	e00f      	b.n	8000b68 <read_pwm+0x1fc>
						else if(40000 < read_2.out && read_2.out < 45000)
 8000b48:	4b3c      	ldr	r3, [pc, #240]	@ (8000c3c <read_pwm+0x2d0>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d909      	bls.n	8000b68 <read_pwm+0x1fc>
 8000b54:	4b39      	ldr	r3, [pc, #228]	@ (8000c3c <read_pwm+0x2d0>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f64a 72c7 	movw	r2, #44999	@ 0xafc7
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d803      	bhi.n	8000b68 <read_pwm+0x1fc>
							read_2.out = 43250;
 8000b60:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <read_pwm+0x2d0>)
 8000b62:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8000b66:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH2_Pin;
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6e:	4b32      	ldr	r3, [pc, #200]	@ (8000c38 <read_pwm+0x2cc>)
 8000b70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
						HAL_GPIO_Init(CH2_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4829      	ldr	r0, [pc, #164]	@ (8000c28 <read_pwm+0x2bc>)
 8000b82:	f001 f9c3 	bl	8001f0c <HAL_GPIO_Init>
			break;
 8000b86:	f000 bc0b 	b.w	80013a0 <read_pwm+0xa34>
			case 3:
				if(HAL_GPIO_ReadPin(CH3_GPIO_Port, CH3_Pin)==1)
 8000b8a:	2140      	movs	r1, #64	@ 0x40
 8000b8c:	4826      	ldr	r0, [pc, #152]	@ (8000c28 <read_pwm+0x2bc>)
 8000b8e:	f001 fb51 	bl	8002234 <HAL_GPIO_ReadPin>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d114      	bne.n	8000bc2 <read_pwm+0x256>
					{
						read_3.start = htim1.Instance->CNT;
 8000b98:	4b24      	ldr	r3, [pc, #144]	@ (8000c2c <read_pwm+0x2c0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b9e:	4a28      	ldr	r2, [pc, #160]	@ (8000c40 <read_pwm+0x2d4>)
 8000ba0:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH3_Pin;
 8000ba2:	2340      	movs	r3, #64	@ 0x40
 8000ba4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <read_pwm+0x2c8>)
 8000baa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481b      	ldr	r0, [pc, #108]	@ (8000c28 <read_pwm+0x2bc>)
 8000bbc:	f001 f9a6 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH3_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
					}
			break;
 8000bc0:	e3ee      	b.n	80013a0 <read_pwm+0xa34>
						read_3.end = htim1.Instance->CNT;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <read_pwm+0x2c0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c40 <read_pwm+0x2d4>)
 8000bca:	6053      	str	r3, [r2, #4]
						if(read_3.start > read_3.end)
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <read_pwm+0x2d4>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <read_pwm+0x2d4>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d90a      	bls.n	8000bee <read_pwm+0x282>
							read_3.out = 65535 - read_3.start + read_3.end;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <read_pwm+0x2d4>)
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <read_pwm+0x2d4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000be6:	33ff      	adds	r3, #255	@ 0xff
 8000be8:	4a15      	ldr	r2, [pc, #84]	@ (8000c40 <read_pwm+0x2d4>)
 8000bea:	6093      	str	r3, [r2, #8]
 8000bec:	e006      	b.n	8000bfc <read_pwm+0x290>
							read_3.out = read_3.end - read_3.start;
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <read_pwm+0x2d4>)
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <read_pwm+0x2d4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	4a11      	ldr	r2, [pc, #68]	@ (8000c40 <read_pwm+0x2d4>)
 8000bfa:	6093      	str	r3, [r2, #8]
						if(read_3.out >= 61200)
 8000bfc:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <read_pwm+0x2d4>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d904      	bls.n	8000c12 <read_pwm+0x2a6>
							read_3.out = 61200;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <read_pwm+0x2d4>)
 8000c0a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	e028      	b.n	8000c64 <read_pwm+0x2f8>
						else if(read_3.out <= 7000)
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <read_pwm+0x2d4>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d812      	bhi.n	8000c44 <read_pwm+0x2d8>
							read_3.out = 7000;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <read_pwm+0x2d4>)
 8000c20:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	e01d      	b.n	8000c64 <read_pwm+0x2f8>
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	20000028 	.word	0x20000028
 8000c30:	20000184 	.word	0x20000184
 8000c34:	10210000 	.word	0x10210000
 8000c38:	10110000 	.word	0x10110000
 8000c3c:	20000190 	.word	0x20000190
 8000c40:	2000019c 	.word	0x2000019c
						else if(40000 <= read_3.out && read_3.out <= 45000)
 8000c44:	4ba5      	ldr	r3, [pc, #660]	@ (8000edc <read_pwm+0x570>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d909      	bls.n	8000c64 <read_pwm+0x2f8>
 8000c50:	4ba2      	ldr	r3, [pc, #648]	@ (8000edc <read_pwm+0x570>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d803      	bhi.n	8000c64 <read_pwm+0x2f8>
							read_3.out = 41300;
 8000c5c:	4b9f      	ldr	r3, [pc, #636]	@ (8000edc <read_pwm+0x570>)
 8000c5e:	f24a 1254 	movw	r2, #41300	@ 0xa154
 8000c62:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH3_Pin;
 8000c64:	2340      	movs	r3, #64	@ 0x40
 8000c66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	4b9d      	ldr	r3, [pc, #628]	@ (8000ee0 <read_pwm+0x574>)
 8000c6c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
						HAL_GPIO_Init(CH3_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4899      	ldr	r0, [pc, #612]	@ (8000ee4 <read_pwm+0x578>)
 8000c7e:	f001 f945 	bl	8001f0c <HAL_GPIO_Init>
			break;
 8000c82:	e38d      	b.n	80013a0 <read_pwm+0xa34>
			case 4:
				if(HAL_GPIO_ReadPin(CH4_GPIO_Port, CH4_Pin)==1)
 8000c84:	2120      	movs	r1, #32
 8000c86:	4897      	ldr	r0, [pc, #604]	@ (8000ee4 <read_pwm+0x578>)
 8000c88:	f001 fad4 	bl	8002234 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d114      	bne.n	8000cbc <read_pwm+0x350>
					{
						read_4.start = htim1.Instance->CNT;
 8000c92:	4b95      	ldr	r3, [pc, #596]	@ (8000ee8 <read_pwm+0x57c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c98:	4a94      	ldr	r2, [pc, #592]	@ (8000eec <read_pwm+0x580>)
 8000c9a:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH4_Pin;
 8000c9c:	2320      	movs	r3, #32
 8000c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca2:	4b93      	ldr	r3, [pc, #588]	@ (8000ef0 <read_pwm+0x584>)
 8000ca4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	488b      	ldr	r0, [pc, #556]	@ (8000ee4 <read_pwm+0x578>)
 8000cb6:	f001 f929 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH4_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000cba:	e371      	b.n	80013a0 <read_pwm+0xa34>
						read_4.end = htim1.Instance->CNT;
 8000cbc:	4b8a      	ldr	r3, [pc, #552]	@ (8000ee8 <read_pwm+0x57c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc2:	4a8a      	ldr	r2, [pc, #552]	@ (8000eec <read_pwm+0x580>)
 8000cc4:	6053      	str	r3, [r2, #4]
						if(read_4.start > read_4.end)
 8000cc6:	4b89      	ldr	r3, [pc, #548]	@ (8000eec <read_pwm+0x580>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b88      	ldr	r3, [pc, #544]	@ (8000eec <read_pwm+0x580>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d90a      	bls.n	8000ce8 <read_pwm+0x37c>
							read_4.out = 65535 - read_4.start + read_4.end;
 8000cd2:	4b86      	ldr	r3, [pc, #536]	@ (8000eec <read_pwm+0x580>)
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	4b85      	ldr	r3, [pc, #532]	@ (8000eec <read_pwm+0x580>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000ce0:	33ff      	adds	r3, #255	@ 0xff
 8000ce2:	4a82      	ldr	r2, [pc, #520]	@ (8000eec <read_pwm+0x580>)
 8000ce4:	6093      	str	r3, [r2, #8]
 8000ce6:	e006      	b.n	8000cf6 <read_pwm+0x38a>
							read_4.out = read_4.end - read_4.start;
 8000ce8:	4b80      	ldr	r3, [pc, #512]	@ (8000eec <read_pwm+0x580>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4b7f      	ldr	r3, [pc, #508]	@ (8000eec <read_pwm+0x580>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8000eec <read_pwm+0x580>)
 8000cf4:	6093      	str	r3, [r2, #8]
						if(read_4.out > 61200)
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8000eec <read_pwm+0x580>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d904      	bls.n	8000d0c <read_pwm+0x3a0>
							read_4.out = 61200;
 8000d02:	4b7a      	ldr	r3, [pc, #488]	@ (8000eec <read_pwm+0x580>)
 8000d04:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	e01a      	b.n	8000d42 <read_pwm+0x3d6>
						else if(read_4.out < 25000)
 8000d0c:	4b77      	ldr	r3, [pc, #476]	@ (8000eec <read_pwm+0x580>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d804      	bhi.n	8000d22 <read_pwm+0x3b6>
							read_4.out = 25000;
 8000d18:	4b74      	ldr	r3, [pc, #464]	@ (8000eec <read_pwm+0x580>)
 8000d1a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	e00f      	b.n	8000d42 <read_pwm+0x3d6>
						else if(40000 <= read_4.out && read_4.out <= 45000)
 8000d22:	4b72      	ldr	r3, [pc, #456]	@ (8000eec <read_pwm+0x580>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d909      	bls.n	8000d42 <read_pwm+0x3d6>
 8000d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8000eec <read_pwm+0x580>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d803      	bhi.n	8000d42 <read_pwm+0x3d6>
							read_4.out = 42900;
 8000d3a:	4b6c      	ldr	r3, [pc, #432]	@ (8000eec <read_pwm+0x580>)
 8000d3c:	f24a 7294 	movw	r2, #42900	@ 0xa794
 8000d40:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH4_Pin;
 8000d42:	2320      	movs	r3, #32
 8000d44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d48:	4b65      	ldr	r3, [pc, #404]	@ (8000ee0 <read_pwm+0x574>)
 8000d4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
						HAL_GPIO_Init(CH4_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4862      	ldr	r0, [pc, #392]	@ (8000ee4 <read_pwm+0x578>)
 8000d5c:	f001 f8d6 	bl	8001f0c <HAL_GPIO_Init>
					break;
 8000d60:	e31e      	b.n	80013a0 <read_pwm+0xa34>
			case 5:
				if(HAL_GPIO_ReadPin(CH5_GPIO_Port, CH5_Pin)==1)
 8000d62:	2110      	movs	r1, #16
 8000d64:	485f      	ldr	r0, [pc, #380]	@ (8000ee4 <read_pwm+0x578>)
 8000d66:	f001 fa65 	bl	8002234 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d114      	bne.n	8000d9a <read_pwm+0x42e>
					{
						read_5.start = htim1.Instance->CNT;
 8000d70:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee8 <read_pwm+0x57c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d76:	4a5f      	ldr	r2, [pc, #380]	@ (8000ef4 <read_pwm+0x588>)
 8000d78:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH5_Pin;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d80:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef0 <read_pwm+0x584>)
 8000d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000d90:	4619      	mov	r1, r3
 8000d92:	4854      	ldr	r0, [pc, #336]	@ (8000ee4 <read_pwm+0x578>)
 8000d94:	f001 f8ba 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH5_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000d98:	e302      	b.n	80013a0 <read_pwm+0xa34>
						read_5.end = htim1.Instance->CNT;
 8000d9a:	4b53      	ldr	r3, [pc, #332]	@ (8000ee8 <read_pwm+0x57c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da0:	4a54      	ldr	r2, [pc, #336]	@ (8000ef4 <read_pwm+0x588>)
 8000da2:	6053      	str	r3, [r2, #4]
						if(read_5.start > read_5.end)
 8000da4:	4b53      	ldr	r3, [pc, #332]	@ (8000ef4 <read_pwm+0x588>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b52      	ldr	r3, [pc, #328]	@ (8000ef4 <read_pwm+0x588>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d90a      	bls.n	8000dc6 <read_pwm+0x45a>
							read_5.out = 65535 - read_5.start + read_5.end;
 8000db0:	4b50      	ldr	r3, [pc, #320]	@ (8000ef4 <read_pwm+0x588>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ef4 <read_pwm+0x588>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000dbe:	33ff      	adds	r3, #255	@ 0xff
 8000dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef4 <read_pwm+0x588>)
 8000dc2:	6093      	str	r3, [r2, #8]
 8000dc4:	e006      	b.n	8000dd4 <read_pwm+0x468>
							read_5.out = read_5.end - read_5.start;
 8000dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef4 <read_pwm+0x588>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef4 <read_pwm+0x588>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	4a48      	ldr	r2, [pc, #288]	@ (8000ef4 <read_pwm+0x588>)
 8000dd2:	6093      	str	r3, [r2, #8]
						if(read_5.out > 61200)
 8000dd4:	4b47      	ldr	r3, [pc, #284]	@ (8000ef4 <read_pwm+0x588>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d904      	bls.n	8000dea <read_pwm+0x47e>
							read_5.out = 61200;
 8000de0:	4b44      	ldr	r3, [pc, #272]	@ (8000ef4 <read_pwm+0x588>)
 8000de2:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	e009      	b.n	8000dfe <read_pwm+0x492>
						else if(read_5.out < 7000)
 8000dea:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <read_pwm+0x588>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d803      	bhi.n	8000dfe <read_pwm+0x492>
							read_5.out = 7000;
 8000df6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef4 <read_pwm+0x588>)
 8000df8:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000dfc:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH5_Pin;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e04:	4b36      	ldr	r3, [pc, #216]	@ (8000ee0 <read_pwm+0x574>)
 8000e06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
						HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000e14:	4619      	mov	r1, r3
 8000e16:	4833      	ldr	r0, [pc, #204]	@ (8000ee4 <read_pwm+0x578>)
 8000e18:	f001 f878 	bl	8001f0c <HAL_GPIO_Init>
					break;
 8000e1c:	e2c0      	b.n	80013a0 <read_pwm+0xa34>
			case 6:
				if(HAL_GPIO_ReadPin(CH6_GPIO_Port, CH6_Pin)==1)
 8000e1e:	2108      	movs	r1, #8
 8000e20:	4830      	ldr	r0, [pc, #192]	@ (8000ee4 <read_pwm+0x578>)
 8000e22:	f001 fa07 	bl	8002234 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d114      	bne.n	8000e56 <read_pwm+0x4ea>
					{
						read_6.start = htim1.Instance->CNT;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee8 <read_pwm+0x57c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e32:	4a31      	ldr	r2, [pc, #196]	@ (8000ef8 <read_pwm+0x58c>)
 8000e34:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH6_Pin;
 8000e36:	2308      	movs	r3, #8
 8000e38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <read_pwm+0x584>)
 8000e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4825      	ldr	r0, [pc, #148]	@ (8000ee4 <read_pwm+0x578>)
 8000e50:	f001 f85c 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH6_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000e54:	e2a4      	b.n	80013a0 <read_pwm+0xa34>
						read_6.end = htim1.Instance->CNT;
 8000e56:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <read_pwm+0x57c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	4a26      	ldr	r2, [pc, #152]	@ (8000ef8 <read_pwm+0x58c>)
 8000e5e:	6053      	str	r3, [r2, #4]
						if(read_6.start > read_6.end)
 8000e60:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <read_pwm+0x58c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <read_pwm+0x58c>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d90a      	bls.n	8000e82 <read_pwm+0x516>
							read_6.out = 65535 - read_6.start + read_6.end;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <read_pwm+0x58c>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <read_pwm+0x58c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e7a:	33ff      	adds	r3, #255	@ 0xff
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <read_pwm+0x58c>)
 8000e7e:	6093      	str	r3, [r2, #8]
 8000e80:	e006      	b.n	8000e90 <read_pwm+0x524>
							read_6.out = read_6.end - read_6.start;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <read_pwm+0x58c>)
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <read_pwm+0x58c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef8 <read_pwm+0x58c>)
 8000e8e:	6093      	str	r3, [r2, #8]
						if(read_6.out > 13700)
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <read_pwm+0x58c>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f243 5284 	movw	r2, #13700	@ 0x3584
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d904      	bls.n	8000ea6 <read_pwm+0x53a>
							read_6.out = 13700;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <read_pwm+0x58c>)
 8000e9e:	f243 5284 	movw	r2, #13700	@ 0x3584
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	e009      	b.n	8000eba <read_pwm+0x54e>
						else if(read_6.out < 6900)
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <read_pwm+0x58c>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f641 22f3 	movw	r2, #6899	@ 0x1af3
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d803      	bhi.n	8000eba <read_pwm+0x54e>
							read_6.out = 6900;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <read_pwm+0x58c>)
 8000eb4:	f641 22f4 	movw	r2, #6900	@ 0x1af4
 8000eb8:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH6_Pin;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <read_pwm+0x574>)
 8000ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
						HAL_GPIO_Init(CH6_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <read_pwm+0x578>)
 8000ed4:	f001 f81a 	bl	8001f0c <HAL_GPIO_Init>
					break;
 8000ed8:	e262      	b.n	80013a0 <read_pwm+0xa34>
 8000eda:	bf00      	nop
 8000edc:	2000019c 	.word	0x2000019c
 8000ee0:	10110000 	.word	0x10110000
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	20000028 	.word	0x20000028
 8000eec:	200001a8 	.word	0x200001a8
 8000ef0:	10210000 	.word	0x10210000
 8000ef4:	200001b4 	.word	0x200001b4
 8000ef8:	200001c0 	.word	0x200001c0
			case 7:
					if(HAL_GPIO_ReadPin(CH7_GPIO_Port, CH7_Pin)==1)
 8000efc:	2101      	movs	r1, #1
 8000efe:	489c      	ldr	r0, [pc, #624]	@ (8001170 <read_pwm+0x804>)
 8000f00:	f001 f998 	bl	8002234 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d114      	bne.n	8000f34 <read_pwm+0x5c8>
					{
						read_7.start = htim1.Instance->CNT;
 8000f0a:	4b9a      	ldr	r3, [pc, #616]	@ (8001174 <read_pwm+0x808>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f10:	4a99      	ldr	r2, [pc, #612]	@ (8001178 <read_pwm+0x80c>)
 8000f12:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH7_Pin;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f1a:	4b98      	ldr	r3, [pc, #608]	@ (800117c <read_pwm+0x810>)
 8000f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4890      	ldr	r0, [pc, #576]	@ (8001170 <read_pwm+0x804>)
 8000f2e:	f000 ffed 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH7_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000f32:	e235      	b.n	80013a0 <read_pwm+0xa34>
						read_7.end = htim1.Instance->CNT;
 8000f34:	4b8f      	ldr	r3, [pc, #572]	@ (8001174 <read_pwm+0x808>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3a:	4a8f      	ldr	r2, [pc, #572]	@ (8001178 <read_pwm+0x80c>)
 8000f3c:	6053      	str	r3, [r2, #4]
						if( read_7.start > read_7.end)
 8000f3e:	4b8e      	ldr	r3, [pc, #568]	@ (8001178 <read_pwm+0x80c>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b8d      	ldr	r3, [pc, #564]	@ (8001178 <read_pwm+0x80c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d90a      	bls.n	8000f60 <read_pwm+0x5f4>
							read_7.out = 65535 - read_7.start + read_7.end;
 8000f4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001178 <read_pwm+0x80c>)
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4b8a      	ldr	r3, [pc, #552]	@ (8001178 <read_pwm+0x80c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f58:	33ff      	adds	r3, #255	@ 0xff
 8000f5a:	4a87      	ldr	r2, [pc, #540]	@ (8001178 <read_pwm+0x80c>)
 8000f5c:	6093      	str	r3, [r2, #8]
 8000f5e:	e006      	b.n	8000f6e <read_pwm+0x602>
							read_7.out = read_7.end - read_7.start;
 8000f60:	4b85      	ldr	r3, [pc, #532]	@ (8001178 <read_pwm+0x80c>)
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	4b84      	ldr	r3, [pc, #528]	@ (8001178 <read_pwm+0x80c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4a83      	ldr	r2, [pc, #524]	@ (8001178 <read_pwm+0x80c>)
 8000f6c:	6093      	str	r3, [r2, #8]
						if(read_7.out > 13500)
 8000f6e:	4b82      	ldr	r3, [pc, #520]	@ (8001178 <read_pwm+0x80c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d904      	bls.n	8000f84 <read_pwm+0x618>
							read_7.out = 13500;
 8000f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001178 <read_pwm+0x80c>)
 8000f7c:	f243 42bc 	movw	r2, #13500	@ 0x34bc
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	e009      	b.n	8000f98 <read_pwm+0x62c>
						else if(read_7.out < 7140)
 8000f84:	4b7c      	ldr	r3, [pc, #496]	@ (8001178 <read_pwm+0x80c>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f641 32e3 	movw	r2, #7139	@ 0x1be3
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d803      	bhi.n	8000f98 <read_pwm+0x62c>
							read_7.out = 7140;
 8000f90:	4b79      	ldr	r3, [pc, #484]	@ (8001178 <read_pwm+0x80c>)
 8000f92:	f641 32e4 	movw	r2, #7140	@ 0x1be4
 8000f96:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH7_Pin;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9e:	4b78      	ldr	r3, [pc, #480]	@ (8001180 <read_pwm+0x814>)
 8000fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						HAL_GPIO_Init(CH7_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000fae:	4619      	mov	r1, r3
 8000fb0:	486f      	ldr	r0, [pc, #444]	@ (8001170 <read_pwm+0x804>)
 8000fb2:	f000 ffab 	bl	8001f0c <HAL_GPIO_Init>
					break;
 8000fb6:	e1f3      	b.n	80013a0 <read_pwm+0xa34>
			case 8:
					if(HAL_GPIO_ReadPin(CH8_GPIO_Port, CH8_Pin)==1)
 8000fb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fbc:	4871      	ldr	r0, [pc, #452]	@ (8001184 <read_pwm+0x818>)
 8000fbe:	f001 f939 	bl	8002234 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d113      	bne.n	8000ff0 <read_pwm+0x684>
					{
						read_8.start = htim1.Instance->CNT;
 8000fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001174 <read_pwm+0x808>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	4a6e      	ldr	r2, [pc, #440]	@ (8001188 <read_pwm+0x81c>)
 8000fd0:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH8_Pin;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd8:	4b68      	ldr	r3, [pc, #416]	@ (800117c <read_pwm+0x810>)
 8000fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4866      	ldr	r0, [pc, #408]	@ (8001184 <read_pwm+0x818>)
 8000fea:	f000 ff8f 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH8_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 8000fee:	e1d7      	b.n	80013a0 <read_pwm+0xa34>
						read_8.end = htim1.Instance->CNT;
 8000ff0:	4b60      	ldr	r3, [pc, #384]	@ (8001174 <read_pwm+0x808>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	4a64      	ldr	r2, [pc, #400]	@ (8001188 <read_pwm+0x81c>)
 8000ff8:	6053      	str	r3, [r2, #4]
						if( read_8.start > read_8.end)
 8000ffa:	4b63      	ldr	r3, [pc, #396]	@ (8001188 <read_pwm+0x81c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b62      	ldr	r3, [pc, #392]	@ (8001188 <read_pwm+0x81c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d90a      	bls.n	800101c <read_pwm+0x6b0>
							read_8.out = 65535 - read_8.start + read_8.end;
 8001006:	4b60      	ldr	r3, [pc, #384]	@ (8001188 <read_pwm+0x81c>)
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4b5f      	ldr	r3, [pc, #380]	@ (8001188 <read_pwm+0x81c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001014:	33ff      	adds	r3, #255	@ 0xff
 8001016:	4a5c      	ldr	r2, [pc, #368]	@ (8001188 <read_pwm+0x81c>)
 8001018:	6093      	str	r3, [r2, #8]
 800101a:	e006      	b.n	800102a <read_pwm+0x6be>
							read_8.out = read_8.end - read_8.start;
 800101c:	4b5a      	ldr	r3, [pc, #360]	@ (8001188 <read_pwm+0x81c>)
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4b59      	ldr	r3, [pc, #356]	@ (8001188 <read_pwm+0x81c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	4a58      	ldr	r2, [pc, #352]	@ (8001188 <read_pwm+0x81c>)
 8001028:	6093      	str	r3, [r2, #8]
						if(read_8.out > 12500)
 800102a:	4b57      	ldr	r3, [pc, #348]	@ (8001188 <read_pwm+0x81c>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001032:	4293      	cmp	r3, r2
 8001034:	d904      	bls.n	8001040 <read_pwm+0x6d4>
							read_8.out = 12500;
 8001036:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <read_pwm+0x81c>)
 8001038:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	e009      	b.n	8001054 <read_pwm+0x6e8>
						else if(read_8.out < 6160)
 8001040:	4b51      	ldr	r3, [pc, #324]	@ (8001188 <read_pwm+0x81c>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f641 020f 	movw	r2, #6159	@ 0x180f
 8001048:	4293      	cmp	r3, r2
 800104a:	d803      	bhi.n	8001054 <read_pwm+0x6e8>
							read_8.out = 6160;
 800104c:	4b4e      	ldr	r3, [pc, #312]	@ (8001188 <read_pwm+0x81c>)
 800104e:	f641 0210 	movw	r2, #6160	@ 0x1810
 8001052:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH8_Pin;
 8001054:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001058:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800105c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001060:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001062:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001066:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800106a:	4a45      	ldr	r2, [pc, #276]	@ (8001180 <read_pwm+0x814>)
 800106c:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001072:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH8_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800107e:	4619      	mov	r1, r3
 8001080:	4840      	ldr	r0, [pc, #256]	@ (8001184 <read_pwm+0x818>)
 8001082:	f000 ff43 	bl	8001f0c <HAL_GPIO_Init>
					break;
 8001086:	e18b      	b.n	80013a0 <read_pwm+0xa34>
			case 9:
					if(HAL_GPIO_ReadPin(CH9_GPIO_Port, CH9_Pin)==1)
 8001088:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800108c:	483d      	ldr	r0, [pc, #244]	@ (8001184 <read_pwm+0x818>)
 800108e:	f001 f8d1 	bl	8002234 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d11e      	bne.n	80010d6 <read_pwm+0x76a>
					{
						read_9.start = htim1.Instance->CNT;
 8001098:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <read_pwm+0x808>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	4a3b      	ldr	r2, [pc, #236]	@ (800118c <read_pwm+0x820>)
 80010a0:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH9_Pin;
 80010a2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80010a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010ae:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80010b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010b8:	4a30      	ldr	r2, [pc, #192]	@ (800117c <read_pwm+0x810>)
 80010ba:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80010c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010cc:	4619      	mov	r1, r3
 80010ce:	482d      	ldr	r0, [pc, #180]	@ (8001184 <read_pwm+0x818>)
 80010d0:	f000 ff1c 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH9_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80010d4:	e164      	b.n	80013a0 <read_pwm+0xa34>
						read_9.end = htim1.Instance->CNT;
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <read_pwm+0x808>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010dc:	4a2b      	ldr	r2, [pc, #172]	@ (800118c <read_pwm+0x820>)
 80010de:	6053      	str	r3, [r2, #4]
						if( read_9.start > read_9.end)
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <read_pwm+0x820>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <read_pwm+0x820>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d90a      	bls.n	8001102 <read_pwm+0x796>
							read_9.out = 65535 - read_9.start + read_9.end;
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <read_pwm+0x820>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <read_pwm+0x820>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80010fa:	33ff      	adds	r3, #255	@ 0xff
 80010fc:	4a23      	ldr	r2, [pc, #140]	@ (800118c <read_pwm+0x820>)
 80010fe:	6093      	str	r3, [r2, #8]
 8001100:	e006      	b.n	8001110 <read_pwm+0x7a4>
							read_9.out = read_9.end - read_9.start;
 8001102:	4b22      	ldr	r3, [pc, #136]	@ (800118c <read_pwm+0x820>)
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <read_pwm+0x820>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <read_pwm+0x820>)
 800110e:	6093      	str	r3, [r2, #8]
						if(read_9.out > 12500)
 8001110:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <read_pwm+0x820>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001118:	4293      	cmp	r3, r2
 800111a:	d904      	bls.n	8001126 <read_pwm+0x7ba>
							read_9.out = 12500;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <read_pwm+0x820>)
 800111e:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	e009      	b.n	800113a <read_pwm+0x7ce>
						else if(read_9.out < 6200)
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <read_pwm+0x820>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f641 0237 	movw	r2, #6199	@ 0x1837
 800112e:	4293      	cmp	r3, r2
 8001130:	d803      	bhi.n	800113a <read_pwm+0x7ce>
							read_9.out = 26500;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <read_pwm+0x820>)
 8001134:	f246 7284 	movw	r2, #26500	@ 0x6784
 8001138:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH9_Pin;
 800113a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800113e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001146:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001148:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800114c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <read_pwm+0x814>)
 8001152:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001158:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH9_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001164:	4619      	mov	r1, r3
 8001166:	4807      	ldr	r0, [pc, #28]	@ (8001184 <read_pwm+0x818>)
 8001168:	f000 fed0 	bl	8001f0c <HAL_GPIO_Init>
					break;
 800116c:	e118      	b.n	80013a0 <read_pwm+0xa34>
 800116e:	bf00      	nop
 8001170:	40011400 	.word	0x40011400
 8001174:	20000028 	.word	0x20000028
 8001178:	200001cc 	.word	0x200001cc
 800117c:	10210000 	.word	0x10210000
 8001180:	10110000 	.word	0x10110000
 8001184:	40011000 	.word	0x40011000
 8001188:	200001d8 	.word	0x200001d8
 800118c:	200001e4 	.word	0x200001e4
			case 10:
					if(HAL_GPIO_ReadPin(CH10_GPIO_Port, CH10_Pin)==1)
 8001190:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001194:	4885      	ldr	r0, [pc, #532]	@ (80013ac <read_pwm+0xa40>)
 8001196:	f001 f84d 	bl	8002234 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	2b01      	cmp	r3, #1
 800119e:	d11e      	bne.n	80011de <read_pwm+0x872>
					{
						read_10.start = htim1.Instance->CNT;
 80011a0:	4b83      	ldr	r3, [pc, #524]	@ (80013b0 <read_pwm+0xa44>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a6:	4a83      	ldr	r2, [pc, #524]	@ (80013b4 <read_pwm+0xa48>)
 80011a8:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH10_Pin;
 80011aa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80011ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b6:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80011bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011c0:	4a7d      	ldr	r2, [pc, #500]	@ (80013b8 <read_pwm+0xa4c>)
 80011c2:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80011c8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d4:	4619      	mov	r1, r3
 80011d6:	4875      	ldr	r0, [pc, #468]	@ (80013ac <read_pwm+0xa40>)
 80011d8:	f000 fe98 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH10_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80011dc:	e0e0      	b.n	80013a0 <read_pwm+0xa34>
						read_10.end = htim1.Instance->CNT;
 80011de:	4b74      	ldr	r3, [pc, #464]	@ (80013b0 <read_pwm+0xa44>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e4:	4a73      	ldr	r2, [pc, #460]	@ (80013b4 <read_pwm+0xa48>)
 80011e6:	6053      	str	r3, [r2, #4]
						if( read_10.start > read_10.end)
 80011e8:	4b72      	ldr	r3, [pc, #456]	@ (80013b4 <read_pwm+0xa48>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b71      	ldr	r3, [pc, #452]	@ (80013b4 <read_pwm+0xa48>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d90a      	bls.n	800120a <read_pwm+0x89e>
							read_10.out = 65535 - read_10.start + read_10.end;
 80011f4:	4b6f      	ldr	r3, [pc, #444]	@ (80013b4 <read_pwm+0xa48>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4b6e      	ldr	r3, [pc, #440]	@ (80013b4 <read_pwm+0xa48>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001202:	33ff      	adds	r3, #255	@ 0xff
 8001204:	4a6b      	ldr	r2, [pc, #428]	@ (80013b4 <read_pwm+0xa48>)
 8001206:	6093      	str	r3, [r2, #8]
 8001208:	e006      	b.n	8001218 <read_pwm+0x8ac>
							read_10.out = read_10.end - read_10.start;
 800120a:	4b6a      	ldr	r3, [pc, #424]	@ (80013b4 <read_pwm+0xa48>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4b69      	ldr	r3, [pc, #420]	@ (80013b4 <read_pwm+0xa48>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a67      	ldr	r2, [pc, #412]	@ (80013b4 <read_pwm+0xa48>)
 8001216:	6093      	str	r3, [r2, #8]
						if(read_10.out > 60000)
 8001218:	4b66      	ldr	r3, [pc, #408]	@ (80013b4 <read_pwm+0xa48>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001220:	4293      	cmp	r3, r2
 8001222:	d904      	bls.n	800122e <read_pwm+0x8c2>
							read_10.out = 60000;
 8001224:	4b63      	ldr	r3, [pc, #396]	@ (80013b4 <read_pwm+0xa48>)
 8001226:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	e01a      	b.n	8001264 <read_pwm+0x8f8>
						else if(read_10.out < 6200)
 800122e:	4b61      	ldr	r3, [pc, #388]	@ (80013b4 <read_pwm+0xa48>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f641 0237 	movw	r2, #6199	@ 0x1837
 8001236:	4293      	cmp	r3, r2
 8001238:	d804      	bhi.n	8001244 <read_pwm+0x8d8>
							read_10.out = 6200;
 800123a:	4b5e      	ldr	r3, [pc, #376]	@ (80013b4 <read_pwm+0xa48>)
 800123c:	f641 0238 	movw	r2, #6200	@ 0x1838
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	e00f      	b.n	8001264 <read_pwm+0x8f8>
						else if(41000 <= read_10.out && read_10.out <= 42000)
 8001244:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <read_pwm+0xa48>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f24a 0227 	movw	r2, #40999	@ 0xa027
 800124c:	4293      	cmp	r3, r2
 800124e:	d909      	bls.n	8001264 <read_pwm+0x8f8>
 8001250:	4b58      	ldr	r3, [pc, #352]	@ (80013b4 <read_pwm+0xa48>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001258:	4293      	cmp	r3, r2
 800125a:	d803      	bhi.n	8001264 <read_pwm+0x8f8>
							read_10.out = 42100;
 800125c:	4b55      	ldr	r3, [pc, #340]	@ (80013b4 <read_pwm+0xa48>)
 800125e:	f24a 4274 	movw	r2, #42100	@ 0xa474
 8001262:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH10_Pin;
 8001264:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001268:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800126c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001270:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001272:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001276:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800127a:	4a50      	ldr	r2, [pc, #320]	@ (80013bc <read_pwm+0xa50>)
 800127c:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001282:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH10_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800128e:	4619      	mov	r1, r3
 8001290:	4846      	ldr	r0, [pc, #280]	@ (80013ac <read_pwm+0xa40>)
 8001292:	f000 fe3b 	bl	8001f0c <HAL_GPIO_Init>
					break;
 8001296:	e083      	b.n	80013a0 <read_pwm+0xa34>
			case 11:
					if(HAL_GPIO_ReadPin(CH11_GPIO_Port, CH11_Pin)==1)
 8001298:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800129c:	4848      	ldr	r0, [pc, #288]	@ (80013c0 <read_pwm+0xa54>)
 800129e:	f000 ffc9 	bl	8002234 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d11e      	bne.n	80012e6 <read_pwm+0x97a>
					{
						read_11.start = htim1.Instance->CNT;
 80012a8:	4b41      	ldr	r3, [pc, #260]	@ (80013b0 <read_pwm+0xa44>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	4a45      	ldr	r2, [pc, #276]	@ (80013c4 <read_pwm+0xa58>)
 80012b0:	6013      	str	r3, [r2, #0]
						GPIO_InitTypeDef GPIO_InitStruct;
						GPIO_InitStruct.Pin = CH11_Pin;
 80012b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012b6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012be:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012c8:	4a3b      	ldr	r2, [pc, #236]	@ (80013b8 <read_pwm+0xa4c>)
 80012ca:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80012d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4619      	mov	r1, r3
 80012de:	4838      	ldr	r0, [pc, #224]	@ (80013c0 <read_pwm+0xa54>)
 80012e0:	f000 fe14 	bl	8001f0c <HAL_GPIO_Init>
						GPIO_InitStruct.Pin = CH11_Pin;
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
						GPIO_InitStruct.Pull = GPIO_NOPULL;
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
					}
					break;
 80012e4:	e05b      	b.n	800139e <read_pwm+0xa32>
						read_11.end = htim1.Instance->CNT;
 80012e6:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <read_pwm+0xa44>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	4a35      	ldr	r2, [pc, #212]	@ (80013c4 <read_pwm+0xa58>)
 80012ee:	6053      	str	r3, [r2, #4]
						if( read_11.start > read_11.end)
 80012f0:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <read_pwm+0xa58>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <read_pwm+0xa58>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d90a      	bls.n	8001312 <read_pwm+0x9a6>
							read_11.out = 65535 - read_11.start + read_11.end;
 80012fc:	4b31      	ldr	r3, [pc, #196]	@ (80013c4 <read_pwm+0xa58>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <read_pwm+0xa58>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800130a:	33ff      	adds	r3, #255	@ 0xff
 800130c:	4a2d      	ldr	r2, [pc, #180]	@ (80013c4 <read_pwm+0xa58>)
 800130e:	6093      	str	r3, [r2, #8]
 8001310:	e006      	b.n	8001320 <read_pwm+0x9b4>
							read_11.out = read_11.end - read_11.start;
 8001312:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <read_pwm+0xa58>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <read_pwm+0xa58>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <read_pwm+0xa58>)
 800131e:	6093      	str	r3, [r2, #8]
						if(read_11.out > 60000)
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <read_pwm+0xa58>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001328:	4293      	cmp	r3, r2
 800132a:	d904      	bls.n	8001336 <read_pwm+0x9ca>
							read_11.out = 60000;
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <read_pwm+0xa58>)
 800132e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e01a      	b.n	800136c <read_pwm+0xa00>
						else if(read_11.out < 6100)
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <read_pwm+0xa58>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f241 72d3 	movw	r2, #6099	@ 0x17d3
 800133e:	4293      	cmp	r3, r2
 8001340:	d804      	bhi.n	800134c <read_pwm+0x9e0>
							read_11.out = 6100;
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <read_pwm+0xa58>)
 8001344:	f241 72d4 	movw	r2, #6100	@ 0x17d4
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	e00f      	b.n	800136c <read_pwm+0xa00>
						else if(41000 <= read_11.out && read_11.out <= 42000)
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <read_pwm+0xa58>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f24a 0227 	movw	r2, #40999	@ 0xa027
 8001354:	4293      	cmp	r3, r2
 8001356:	d909      	bls.n	800136c <read_pwm+0xa00>
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <read_pwm+0xa58>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f24a 4210 	movw	r2, #42000	@ 0xa410
 8001360:	4293      	cmp	r3, r2
 8001362:	d803      	bhi.n	800136c <read_pwm+0xa00>
							read_11.out = 42100;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <read_pwm+0xa58>)
 8001366:	f24a 4274 	movw	r2, #42100	@ 0xa474
 800136a:	609a      	str	r2, [r3, #8]
						GPIO_InitStruct.Pin = CH11_Pin;
 800136c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001370:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001378:	601a      	str	r2, [r3, #0]
						GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800137e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <read_pwm+0xa50>)
 8001384:	605a      	str	r2, [r3, #4]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800138a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
						HAL_GPIO_Init(CH11_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	4809      	ldr	r0, [pc, #36]	@ (80013c0 <read_pwm+0xa54>)
 800139a:	f000 fdb7 	bl	8001f0c <HAL_GPIO_Init>
					break;
 800139e:	bf00      	nop
		}
	}
 80013a0:	bf00      	nop
 80013a2:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40011000 	.word	0x40011000
 80013b0:	20000028 	.word	0x20000028
 80013b4:	200001f0 	.word	0x200001f0
 80013b8:	10210000 	.word	0x10210000
 80013bc:	10110000 	.word	0x10110000
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	200001fc 	.word	0x200001fc

080013c8 <convert>:

void convert(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af02      	add	r7, sp, #8
		read2_out = 0;
	}
*/
//////// khi joystick lệch thì chạy theo hướng lệch ít +++++ start +++++++++///////////////
	//ch1 trai phai banh
	if(read_1.out >= 43200)
 80013ce:	4b9e      	ldr	r3, [pc, #632]	@ (8001648 <convert+0x280>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f64a 02bf 	movw	r2, #43199	@ 0xa8bf
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d914      	bls.n	8001404 <convert+0x3c>
	{
		read1_out = map(read_1.out,43200,61200,0,28700);
 80013da:	4b9b      	ldr	r3, [pc, #620]	@ (8001648 <convert+0x280>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	b298      	uxth	r0, r3
 80013e0:	f247 031c 	movw	r3, #28700	@ 0x701c
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80013ec:	f64a 01c0 	movw	r1, #43200	@ 0xa8c0
 80013f0:	f7ff fa96 	bl	8000920 <map>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b94      	ldr	r3, [pc, #592]	@ (800164c <convert+0x284>)
 80013fa:	601a      	str	r2, [r3, #0]
		val = 1;
 80013fc:	4b94      	ldr	r3, [pc, #592]	@ (8001650 <convert+0x288>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e01d      	b.n	8001440 <convert+0x78>
	}
	else if(read_1.out <= 43200)
 8001404:	4b90      	ldr	r3, [pc, #576]	@ (8001648 <convert+0x280>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 800140c:	4293      	cmp	r3, r2
 800140e:	d814      	bhi.n	800143a <convert+0x72>
	{
		read1_out = map(read_1.out,7000,43200,28700,0);
 8001410:	4b8d      	ldr	r3, [pc, #564]	@ (8001648 <convert+0x280>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	b298      	uxth	r0, r3
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	f247 031c 	movw	r3, #28700	@ 0x701c
 800141e:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8001422:	f641 3158 	movw	r1, #7000	@ 0x1b58
 8001426:	f7ff fa7b 	bl	8000920 <map>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b87      	ldr	r3, [pc, #540]	@ (800164c <convert+0x284>)
 8001430:	601a      	str	r2, [r3, #0]
		val = 2;
 8001432:	4b87      	ldr	r3, [pc, #540]	@ (8001650 <convert+0x288>)
 8001434:	2202      	movs	r2, #2
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e002      	b.n	8001440 <convert+0x78>
	}
	else
	{
		read1_out = 0;
 800143a:	4b84      	ldr	r3, [pc, #528]	@ (800164c <convert+0x284>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
	}

	//ch2 tien lui banh
	if(read_2.out >= 43250)
 8001440:	4b84      	ldr	r3, [pc, #528]	@ (8001654 <convert+0x28c>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f64a 02f1 	movw	r2, #43249	@ 0xa8f1
 8001448:	4293      	cmp	r3, r2
 800144a:	d914      	bls.n	8001476 <convert+0xae>
	{
		read2_out = map(read_2.out,43250,61200,0,28700);
 800144c:	4b81      	ldr	r3, [pc, #516]	@ (8001654 <convert+0x28c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	b298      	uxth	r0, r3
 8001452:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800145e:	f64a 01f2 	movw	r1, #43250	@ 0xa8f2
 8001462:	f7ff fa5d 	bl	8000920 <map>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b7b      	ldr	r3, [pc, #492]	@ (8001658 <convert+0x290>)
 800146c:	601a      	str	r2, [r3, #0]
		val = 3;
 800146e:	4b78      	ldr	r3, [pc, #480]	@ (8001650 <convert+0x288>)
 8001470:	2203      	movs	r2, #3
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e01d      	b.n	80014b2 <convert+0xea>
	}
	else if(read_2.out <= 43250)
 8001476:	4b77      	ldr	r3, [pc, #476]	@ (8001654 <convert+0x28c>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 800147e:	4293      	cmp	r3, r2
 8001480:	d814      	bhi.n	80014ac <convert+0xe4>
	{
		read2_out = map(read_2.out,7000,43250,28700,0);
 8001482:	4b74      	ldr	r3, [pc, #464]	@ (8001654 <convert+0x28c>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	b298      	uxth	r0, r3
 8001488:	2300      	movs	r3, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	f247 031c 	movw	r3, #28700	@ 0x701c
 8001490:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 8001494:	f641 3158 	movw	r1, #7000	@ 0x1b58
 8001498:	f7ff fa42 	bl	8000920 <map>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <convert+0x290>)
 80014a2:	601a      	str	r2, [r3, #0]
		val = 4;
 80014a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001650 <convert+0x288>)
 80014a6:	2204      	movs	r2, #4
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e002      	b.n	80014b2 <convert+0xea>
	}
	else
	{
		read2_out = 0;
 80014ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001658 <convert+0x290>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
	}
	if(read_1.out != 43200 && read_2.out != 43250)
 80014b2:	4b65      	ldr	r3, [pc, #404]	@ (8001648 <convert+0x280>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d009      	beq.n	80014d2 <convert+0x10a>
 80014be:	4b65      	ldr	r3, [pc, #404]	@ (8001654 <convert+0x28c>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f64a 02f2 	movw	r2, #43250	@ 0xa8f2
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d003      	beq.n	80014d2 <convert+0x10a>
	{
		limit_value = 1;
 80014ca:	4b64      	ldr	r3, [pc, #400]	@ (800165c <convert+0x294>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e002      	b.n	80014d8 <convert+0x110>
	}
	else
	{
		limit_value = 0;
 80014d2:	4b62      	ldr	r3, [pc, #392]	@ (800165c <convert+0x294>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
	}
	//||((read_1.out>read_2.out)&&(val == 2)&&(val == 4))||
//	((read1_out<read2_out)&&(val == 2)&&(val == 3))||((read1_out<read2_out)&&(val == 1)&&(val == 3))
	if(limit_value == 1)
 80014d8:	4b60      	ldr	r3, [pc, #384]	@ (800165c <convert+0x294>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	f040 8083 	bne.w	80015e8 <convert+0x220>
	{
		if(((val ==4)&&(read_1.out>read_2.out)&&(read_1.out<61200)) ||((val ==3)&&(read_1.out<read_2.out)&&(read_1.out>7000)))
 80014e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001650 <convert+0x288>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d10b      	bne.n	8001502 <convert+0x13a>
 80014ea:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <convert+0x280>)
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b59      	ldr	r3, [pc, #356]	@ (8001654 <convert+0x28c>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d905      	bls.n	8001502 <convert+0x13a>
 80014f6:	4b54      	ldr	r3, [pc, #336]	@ (8001648 <convert+0x280>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f64e 720f 	movw	r2, #61199	@ 0xef0f
 80014fe:	4293      	cmp	r3, r2
 8001500:	d90f      	bls.n	8001522 <convert+0x15a>
 8001502:	4b53      	ldr	r3, [pc, #332]	@ (8001650 <convert+0x288>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d10f      	bne.n	800152a <convert+0x162>
 800150a:	4b4f      	ldr	r3, [pc, #316]	@ (8001648 <convert+0x280>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	4b51      	ldr	r3, [pc, #324]	@ (8001654 <convert+0x28c>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	429a      	cmp	r2, r3
 8001514:	d209      	bcs.n	800152a <convert+0x162>
 8001516:	4b4c      	ldr	r3, [pc, #304]	@ (8001648 <convert+0x280>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800151e:	4293      	cmp	r3, r2
 8001520:	d903      	bls.n	800152a <convert+0x162>
		{
			read1_out = 0;
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <convert+0x284>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e05e      	b.n	80015e8 <convert+0x220>
		}
		else if(read1_out!=0)
 800152a:	4b48      	ldr	r3, [pc, #288]	@ (800164c <convert+0x284>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <convert+0x172>
		{
			read2_out = 0;
 8001532:	4b49      	ldr	r3, [pc, #292]	@ (8001658 <convert+0x290>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e056      	b.n	80015e8 <convert+0x220>
		}
		else if(read_1.out == 7000 && read_2.out==7000)
 800153a:	4b43      	ldr	r3, [pc, #268]	@ (8001648 <convert+0x280>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001542:	4293      	cmp	r3, r2
 8001544:	d10f      	bne.n	8001566 <convert+0x19e>
 8001546:	4b43      	ldr	r3, [pc, #268]	@ (8001654 <convert+0x28c>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800154e:	4293      	cmp	r3, r2
 8001550:	d109      	bne.n	8001566 <convert+0x19e>
		{
			read1_out = 0;
 8001552:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <convert+0x284>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
			read2_out = 0;
 8001558:	4b3f      	ldr	r3, [pc, #252]	@ (8001658 <convert+0x290>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
			val =17;
 800155e:	4b3c      	ldr	r3, [pc, #240]	@ (8001650 <convert+0x288>)
 8001560:	2211      	movs	r2, #17
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e040      	b.n	80015e8 <convert+0x220>
		}
		else if(read_1.out == 61200 && read_2.out == 7000)
 8001566:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <convert+0x280>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800156e:	4293      	cmp	r3, r2
 8001570:	d10f      	bne.n	8001592 <convert+0x1ca>
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <convert+0x28c>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800157a:	4293      	cmp	r3, r2
 800157c:	d109      	bne.n	8001592 <convert+0x1ca>
		{
			read1_out = 0;
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <convert+0x284>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
			read2_out = 0;
 8001584:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <convert+0x290>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
			val = 18;
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <convert+0x288>)
 800158c:	2212      	movs	r2, #18
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e02a      	b.n	80015e8 <convert+0x220>
		}
		else if (read_1.out == 7000 && read_2.out ==61200)
 8001592:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <convert+0x280>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800159a:	4293      	cmp	r3, r2
 800159c:	d10f      	bne.n	80015be <convert+0x1f6>
 800159e:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <convert+0x28c>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d109      	bne.n	80015be <convert+0x1f6>
		{
			read1_out = 0;
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <convert+0x284>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
			read2_out = 0;
 80015b0:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <convert+0x290>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
			val = 19;
 80015b6:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <convert+0x288>)
 80015b8:	2213      	movs	r2, #19
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e014      	b.n	80015e8 <convert+0x220>
		}
		else if (read_1.out == 61200 && read_2.out ==61200)
 80015be:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <convert+0x280>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10e      	bne.n	80015e8 <convert+0x220>
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <convert+0x28c>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d108      	bne.n	80015e8 <convert+0x220>
		{
			read1_out = 0;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <convert+0x284>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
			read2_out = 0;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <convert+0x290>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
			val = 20;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <convert+0x288>)
 80015e4:	2214      	movs	r2, #20
 80015e6:	601a      	str	r2, [r3, #0]
		}
	}

	//////////////////++++++end+++++/////////////////
	//ch3 gimbal
	if(read_3.out >= 41300)
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <convert+0x298>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f24a 1253 	movw	r2, #41299	@ 0xa153
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d911      	bls.n	8001618 <convert+0x250>
	{
		read3_out = map(read_3.out,41300,61200,0,14300);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <convert+0x298>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	b298      	uxth	r0, r3
 80015fa:	f243 73dc 	movw	r3, #14300	@ 0x37dc
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	f64e 7210 	movw	r2, #61200	@ 0xef10
 8001606:	f24a 1154 	movw	r1, #41300	@ 0xa154
 800160a:	f7ff f989 	bl	8000920 <map>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <convert+0x29c>)
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e02a      	b.n	800166e <convert+0x2a6>

	}
	else if(read_3.out <= 41300)
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <convert+0x298>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f24a 1254 	movw	r2, #41300	@ 0xa154
 8001620:	4293      	cmp	r3, r2
 8001622:	d821      	bhi.n	8001668 <convert+0x2a0>
	{
		read3_out = map(read_3.out,21600,41300,14300,0);
 8001624:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <convert+0x298>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	b298      	uxth	r0, r3
 800162a:	2300      	movs	r3, #0
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	f243 73dc 	movw	r3, #14300	@ 0x37dc
 8001632:	f24a 1254 	movw	r2, #41300	@ 0xa154
 8001636:	f245 4160 	movw	r1, #21600	@ 0x5460
 800163a:	f7ff f971 	bl	8000920 <map>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <convert+0x29c>)
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e012      	b.n	800166e <convert+0x2a6>
 8001648:	20000184 	.word	0x20000184
 800164c:	20000148 	.word	0x20000148
 8001650:	2000017c 	.word	0x2000017c
 8001654:	20000190 	.word	0x20000190
 8001658:	2000014c 	.word	0x2000014c
 800165c:	20000180 	.word	0x20000180
 8001660:	2000019c 	.word	0x2000019c
 8001664:	20000150 	.word	0x20000150

	}
	else
	{
		read3_out = 0;
 8001668:	4b5f      	ldr	r3, [pc, #380]	@ (80017e8 <convert+0x420>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
	}

	//ch4 gimbal
	if(read_4.out >= 42900)
 800166e:	4b5f      	ldr	r3, [pc, #380]	@ (80017ec <convert+0x424>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f24a 7293 	movw	r2, #42899	@ 0xa793
 8001676:	4293      	cmp	r3, r2
 8001678:	d911      	bls.n	800169e <convert+0x2d6>
	{
		read4_out = map(read_4.out,42900,61200,0,14300);
 800167a:	4b5c      	ldr	r3, [pc, #368]	@ (80017ec <convert+0x424>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	b298      	uxth	r0, r3
 8001680:	f243 73dc 	movw	r3, #14300	@ 0x37dc
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2300      	movs	r3, #0
 8001688:	f64e 7210 	movw	r2, #61200	@ 0xef10
 800168c:	f24a 7194 	movw	r1, #42900	@ 0xa794
 8001690:	f7ff f946 	bl	8000920 <map>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b55      	ldr	r3, [pc, #340]	@ (80017f0 <convert+0x428>)
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e01a      	b.n	80016d4 <convert+0x30c>

	}
	else if(read_4.out <= 42900)
 800169e:	4b53      	ldr	r3, [pc, #332]	@ (80017ec <convert+0x424>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f24a 7294 	movw	r2, #42900	@ 0xa794
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d811      	bhi.n	80016ce <convert+0x306>
	{
		read4_out = map(read_4.out,25000,42900,14300,0);
 80016aa:	4b50      	ldr	r3, [pc, #320]	@ (80017ec <convert+0x424>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	b298      	uxth	r0, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	f243 73dc 	movw	r3, #14300	@ 0x37dc
 80016b8:	f24a 7294 	movw	r2, #42900	@ 0xa794
 80016bc:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80016c0:	f7ff f92e 	bl	8000920 <map>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <convert+0x428>)
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e002      	b.n	80016d4 <convert+0x30c>

	}
	else
	{
		read4_out = 0;
 80016ce:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <convert+0x428>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
	}

	//ch5 volume toc do choi
	read5_out = map(read_5.out,7000,61200,0,14300);
 80016d4:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <convert+0x42c>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	b298      	uxth	r0, r3
 80016da:	f243 73dc 	movw	r3, #14300	@ 0x37dc
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	f64e 7210 	movw	r2, #61200	@ 0xef10
 80016e6:	f641 3158 	movw	r1, #7000	@ 0x1b58
 80016ea:	f7ff f919 	bl	8000920 <map>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b41      	ldr	r3, [pc, #260]	@ (80017f8 <convert+0x430>)
 80016f4:	601a      	str	r2, [r3, #0]

	 //ch6 switch luu vi tri
	read6_out = read_6.out;
 80016f6:	4b41      	ldr	r3, [pc, #260]	@ (80017fc <convert+0x434>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4a41      	ldr	r2, [pc, #260]	@ (8001800 <convert+0x438>)
 80016fc:	6013      	str	r3, [r2, #0]
	if(read6_out > 7500)
 80016fe:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <convert+0x438>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001706:	4293      	cmp	r3, r2
 8001708:	d903      	bls.n	8001712 <convert+0x34a>
	{
		save = 1;
 800170a:	4b3e      	ldr	r3, [pc, #248]	@ (8001804 <convert+0x43c>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e002      	b.n	8001718 <convert+0x350>
	}
	else
	{
		save = 0;
 8001712:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <convert+0x43c>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
	}

	//ch7 ngat che do an toan
	read7_out = read_7.out;
 8001718:	4b3b      	ldr	r3, [pc, #236]	@ (8001808 <convert+0x440>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <convert+0x444>)
 800171e:	6013      	str	r3, [r2, #0]
	if(read7_out > 7500)
 8001720:	4b3a      	ldr	r3, [pc, #232]	@ (800180c <convert+0x444>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001728:	4293      	cmp	r3, r2
 800172a:	d902      	bls.n	8001732 <convert+0x36a>
	{
		val = 5;
 800172c:	4b38      	ldr	r3, [pc, #224]	@ (8001810 <convert+0x448>)
 800172e:	2205      	movs	r2, #5
 8001730:	601a      	str	r2, [r3, #0]
//		val = 6;
//	}

	//ch8 den

 	read8_out = read_8.out;
 8001732:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <convert+0x44c>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4a38      	ldr	r2, [pc, #224]	@ (8001818 <convert+0x450>)
 8001738:	6013      	str	r3, [r2, #0]
	if(read8_out < 7500)
 800173a:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <convert+0x450>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 8001742:	4293      	cmp	r3, r2
 8001744:	d803      	bhi.n	800174e <convert+0x386>
	{
		val = 7;
 8001746:	4b32      	ldr	r3, [pc, #200]	@ (8001810 <convert+0x448>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e002      	b.n	8001754 <convert+0x38c>
	}
	else
	{
		val = 8;
 800174e:	4b30      	ldr	r3, [pc, #192]	@ (8001810 <convert+0x448>)
 8001750:	2208      	movs	r2, #8
 8001752:	601a      	str	r2, [r3, #0]
	}

	//ch9 nuoc

 	read9_out = read_9.out;
 8001754:	4b31      	ldr	r3, [pc, #196]	@ (800181c <convert+0x454>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a31      	ldr	r2, [pc, #196]	@ (8001820 <convert+0x458>)
 800175a:	6013      	str	r3, [r2, #0]
	if(read9_out < 7500)
 800175c:	4b30      	ldr	r3, [pc, #192]	@ (8001820 <convert+0x458>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 8001764:	4293      	cmp	r3, r2
 8001766:	d803      	bhi.n	8001770 <convert+0x3a8>
	{
		val = 9;
 8001768:	4b29      	ldr	r3, [pc, #164]	@ (8001810 <convert+0x448>)
 800176a:	2209      	movs	r2, #9
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e002      	b.n	8001776 <convert+0x3ae>
	}
	else
	{
		val = 10;
 8001770:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <convert+0x448>)
 8001772:	220a      	movs	r2, #10
 8001774:	601a      	str	r2, [r3, #0]
	}

	// ch10 choi truoc

	read10_out = read_10.out;
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <convert+0x45c>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4a2b      	ldr	r2, [pc, #172]	@ (8001828 <convert+0x460>)
 800177c:	6013      	str	r3, [r2, #0]
	if(read_10.out >= 42100)
 800177e:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <convert+0x45c>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f24a 4273 	movw	r2, #42099	@ 0xa473
 8001786:	4293      	cmp	r3, r2
 8001788:	d903      	bls.n	8001792 <convert+0x3ca>
	{
		val = 11;
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <convert+0x448>)
 800178c:	220b      	movs	r2, #11
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e00c      	b.n	80017ac <convert+0x3e4>
	}
	else if(read_10.out <= 42100)
 8001792:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <convert+0x45c>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f24a 4274 	movw	r2, #42100	@ 0xa474
 800179a:	4293      	cmp	r3, r2
 800179c:	d803      	bhi.n	80017a6 <convert+0x3de>
	{
		val = 12;
 800179e:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <convert+0x448>)
 80017a0:	220c      	movs	r2, #12
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e002      	b.n	80017ac <convert+0x3e4>
	}
	else
	{
		val = 13;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <convert+0x448>)
 80017a8:	220d      	movs	r2, #13
 80017aa:	601a      	str	r2, [r3, #0]
	}

	 //ch11 choi sau

	read11_out = read_11.out;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <convert+0x464>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <convert+0x468>)
 80017b2:	6013      	str	r3, [r2, #0]
	if(read_11.out >= 42100)
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <convert+0x464>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f24a 4273 	movw	r2, #42099	@ 0xa473
 80017bc:	4293      	cmp	r3, r2
 80017be:	d903      	bls.n	80017c8 <convert+0x400>
	{
		val = 14;
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <convert+0x448>)
 80017c2:	220e      	movs	r2, #14
 80017c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		val = 16;
	}
}
 80017c6:	e00c      	b.n	80017e2 <convert+0x41a>
	else if(read_11.out <= 42100)
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <convert+0x464>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f24a 4274 	movw	r2, #42100	@ 0xa474
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d803      	bhi.n	80017dc <convert+0x414>
		val = 15;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <convert+0x448>)
 80017d6:	220f      	movs	r2, #15
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	e002      	b.n	80017e2 <convert+0x41a>
		val = 16;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <convert+0x448>)
 80017de:	2210      	movs	r2, #16
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000150 	.word	0x20000150
 80017ec:	200001a8 	.word	0x200001a8
 80017f0:	20000154 	.word	0x20000154
 80017f4:	200001b4 	.word	0x200001b4
 80017f8:	20000158 	.word	0x20000158
 80017fc:	200001c0 	.word	0x200001c0
 8001800:	2000015c 	.word	0x2000015c
 8001804:	20000178 	.word	0x20000178
 8001808:	200001cc 	.word	0x200001cc
 800180c:	20000160 	.word	0x20000160
 8001810:	2000017c 	.word	0x2000017c
 8001814:	200001d8 	.word	0x200001d8
 8001818:	20000164 	.word	0x20000164
 800181c:	200001e4 	.word	0x200001e4
 8001820:	20000168 	.word	0x20000168
 8001824:	200001f0 	.word	0x200001f0
 8001828:	2000016c 	.word	0x2000016c
 800182c:	200001fc 	.word	0x200001fc
 8001830:	20000170 	.word	0x20000170

08001834 <control>:
		HAL_GPIO_WritePin(F_R_1B_GPIO_Port, F_R_1B_Pin, SET);
	}
}

void control(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	// check signal TX
	if(read_1.start != read1_check) // có tins hiệu
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <control+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <control+0x58>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d004      	beq.n	800184e <control+0x1a>
	{
		 read1_check = read_1.start;
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <control+0x54>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a10      	ldr	r2, [pc, #64]	@ (800188c <control+0x58>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e002      	b.n	8001854 <control+0x20>
	}
	else
	{
	   read_1.start = 0;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <control+0x54>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

		}
	}
	else
	{
		HAL_GPIO_WritePin(EN_1A_GPIO_Port, EN_1A_Pin, SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800185a:	480d      	ldr	r0, [pc, #52]	@ (8001890 <control+0x5c>)
 800185c:	f000 fd01 	bl	8002262 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1B_GPIO_Port, EN_1B_Pin, SET);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001866:	480b      	ldr	r0, [pc, #44]	@ (8001894 <control+0x60>)
 8001868:	f000 fcfb 	bl	8002262 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2A_GPIO_Port, EN_2A_Pin, SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001872:	4808      	ldr	r0, [pc, #32]	@ (8001894 <control+0x60>)
 8001874:	f000 fcf5 	bl	8002262 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2B_GPIO_Port, EN_2B_Pin, SET);
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800187e:	4805      	ldr	r0, [pc, #20]	@ (8001894 <control+0x60>)
 8001880:	f000 fcef 	bl	8002262 <HAL_GPIO_WritePin>
	}


}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000184 	.word	0x20000184
 800188c:	20000174 	.word	0x20000174
 8001890:	40011000 	.word	0x40011000
 8001894:	40011400 	.word	0x40011400

08001898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_MspInit+0x5c>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <HAL_MspInit+0x5c>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_MspInit+0x5c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_MspInit+0x5c>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <HAL_MspInit+0x5c>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <HAL_MspInit+0x5c>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	@ (80018f8 <HAL_MspInit+0x60>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <HAL_MspInit+0x60>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000

080018fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <HAL_TIM_Base_MspInit+0x7c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10c      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190e:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a1a      	ldr	r2, [pc, #104]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 8001914:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001926:	e022      	b.n	800196e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001930:	d10c      	bne.n	800194c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a11      	ldr	r2, [pc, #68]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
}
 800194a:	e010      	b.n	800196e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <HAL_TIM_Base_MspInit+0x84>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10b      	bne.n	800196e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <HAL_TIM_Base_MspInit+0x80>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	bf00      	nop
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40000400 	.word	0x40000400

08001984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019a2:	d118      	bne.n	80019d6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a27      	ldr	r2, [pc, #156]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019bc:	230e      	movs	r3, #14
 80019be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2302      	movs	r3, #2
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4619      	mov	r1, r3
 80019ce:	481f      	ldr	r0, [pc, #124]	@ (8001a4c <HAL_TIM_MspPostInit+0xc8>)
 80019d0:	f000 fa9c 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019d4:	e034      	b.n	8001a40 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <HAL_TIM_MspPostInit+0xcc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d12f      	bne.n	8001a40 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a18      	ldr	r2, [pc, #96]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_TIM_MspPostInit+0xc4>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a10:	23c0      	movs	r3, #192	@ 0xc0
 8001a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	4619      	mov	r1, r3
 8001a22:	480a      	ldr	r0, [pc, #40]	@ (8001a4c <HAL_TIM_MspPostInit+0xc8>)
 8001a24:	f000 fa72 	bl	8001f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2302      	movs	r3, #2
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	@ (8001a54 <HAL_TIM_MspPostInit+0xd0>)
 8001a3c:	f000 fa66 	bl	8001f0c <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40010c00 	.word	0x40010c00

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <HAL_UART_MspInit+0x8c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d131      	bne.n	8001adc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_UART_MspInit+0x90>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae8 <HAL_UART_MspInit+0x90>)
 8001a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b18      	ldr	r3, [pc, #96]	@ (8001ae8 <HAL_UART_MspInit+0x90>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_UART_MspInit+0x90>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <HAL_UART_MspInit+0x90>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_UART_MspInit+0x90>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	4619      	mov	r1, r3
 8001abc:	480b      	ldr	r0, [pc, #44]	@ (8001aec <HAL_UART_MspInit+0x94>)
 8001abe:	f000 fa25 	bl	8001f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	@ (8001aec <HAL_UART_MspInit+0x94>)
 8001ad8:	f000 fa18 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013800 	.word	0x40013800
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010800 	.word	0x40010800

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <NMI_Handler+0x4>

08001af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <MemManage_Handler+0x4>

08001b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f8ba 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH7_Pin);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f000 fba1 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH6_Pin);
 8001b5a:	2008      	movs	r0, #8
 8001b5c:	f000 fb9a 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH5_Pin);
 8001b68:	2010      	movs	r0, #16
 8001b6a:	f000 fb93 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8001b76:	2020      	movs	r0, #32
 8001b78:	f000 fb8c 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 8001b7c:	2040      	movs	r0, #64	@ 0x40
 8001b7e:	f000 fb89 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8001b82:	2080      	movs	r0, #128	@ 0x80
 8001b84:	f000 fb86 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 8001b88:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b8c:	f000 fb82 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH11_Pin);
 8001b90:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b94:	f000 fb7e 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH10_Pin);
 8001ba0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ba4:	f000 fb76 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH9_Pin);
 8001ba8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001bac:	f000 fb72 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH8_Pin);
 8001bb0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bb4:	f000 fb6e 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS2_Pin);
 8001bb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bbc:	f000 fb6a 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS3_Pin);
 8001bc0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bc4:	f000 fb66 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SS4_Pin);
 8001bc8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001bcc:	f000 fb62 	bl	8002294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be0:	f7ff fff8 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	@ (8001c14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001be6:	490c      	ldr	r1, [pc, #48]	@ (8001c18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001be8:	4a0c      	ldr	r2, [pc, #48]	@ (8001c1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a09      	ldr	r2, [pc, #36]	@ (8001c20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bfc:	4c09      	ldr	r4, [pc, #36]	@ (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f001 feed 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0e:	f7fe fb65 	bl	80002dc <main>
  bx lr
 8001c12:	4770      	bx	lr
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c1c:	08003a7c 	.word	0x08003a7c
  ldr r2, =_sbss
 8001c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c24:	2000020c 	.word	0x2000020c

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>
	...

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_Init+0x28>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	@ (8001c54 <HAL_Init+0x28>)
 8001c36:	f043 0310 	orr.w	r3, r3, #16
 8001c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f923 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	200f      	movs	r0, #15
 8001c44:	f000 f808 	bl	8001c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fe26 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_InitTick+0x54>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_InitTick+0x58>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f93b 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00e      	b.n	8001ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f903 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c98:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <HAL_InitTick+0x5c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_IncTick+0x1c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_IncTick+0x20>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a03      	ldr	r2, [pc, #12]	@ (8001cd8 <HAL_IncTick+0x20>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000208 	.word	0x20000208

08001cdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	@ (8001cec <HAL_GetTick+0x10>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	20000208 	.word	0x20000208

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4906      	ldr	r1, [pc, #24]	@ (8001d88 <__NVIC_EnableIRQ+0x34>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	@ (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f7ff ff90 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff2d 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff42 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff90 	bl	8001de0 <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5f 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff35 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffa2 	bl	8001e44 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	@ 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	e179      	b.n	8002214 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f20:	2201      	movs	r2, #1
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8168 	bne.w	800220e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a96      	ldr	r2, [pc, #600]	@ (800219c <HAL_GPIO_Init+0x290>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d05e      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f48:	4a94      	ldr	r2, [pc, #592]	@ (800219c <HAL_GPIO_Init+0x290>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d875      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f4e:	4a94      	ldr	r2, [pc, #592]	@ (80021a0 <HAL_GPIO_Init+0x294>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d058      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f54:	4a92      	ldr	r2, [pc, #584]	@ (80021a0 <HAL_GPIO_Init+0x294>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d86f      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f5a:	4a92      	ldr	r2, [pc, #584]	@ (80021a4 <HAL_GPIO_Init+0x298>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d052      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f60:	4a90      	ldr	r2, [pc, #576]	@ (80021a4 <HAL_GPIO_Init+0x298>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d869      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f66:	4a90      	ldr	r2, [pc, #576]	@ (80021a8 <HAL_GPIO_Init+0x29c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d04c      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f6c:	4a8e      	ldr	r2, [pc, #568]	@ (80021a8 <HAL_GPIO_Init+0x29c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d863      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f72:	4a8e      	ldr	r2, [pc, #568]	@ (80021ac <HAL_GPIO_Init+0x2a0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d046      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f78:	4a8c      	ldr	r2, [pc, #560]	@ (80021ac <HAL_GPIO_Init+0x2a0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d85d      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d82a      	bhi.n	8001fd8 <HAL_GPIO_Init+0xcc>
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d859      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f86:	a201      	add	r2, pc, #4	@ (adr r2, 8001f8c <HAL_GPIO_Init+0x80>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08002007 	.word	0x08002007
 8001f90:	08001fe1 	.word	0x08001fe1
 8001f94:	08001ff3 	.word	0x08001ff3
 8001f98:	08002035 	.word	0x08002035
 8001f9c:	0800203b 	.word	0x0800203b
 8001fa0:	0800203b 	.word	0x0800203b
 8001fa4:	0800203b 	.word	0x0800203b
 8001fa8:	0800203b 	.word	0x0800203b
 8001fac:	0800203b 	.word	0x0800203b
 8001fb0:	0800203b 	.word	0x0800203b
 8001fb4:	0800203b 	.word	0x0800203b
 8001fb8:	0800203b 	.word	0x0800203b
 8001fbc:	0800203b 	.word	0x0800203b
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	0800203b 	.word	0x0800203b
 8001fc8:	0800203b 	.word	0x0800203b
 8001fcc:	0800203b 	.word	0x0800203b
 8001fd0:	08001fe9 	.word	0x08001fe9
 8001fd4:	08001ffd 	.word	0x08001ffd
 8001fd8:	4a75      	ldr	r2, [pc, #468]	@ (80021b0 <HAL_GPIO_Init+0x2a4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fde:	e02c      	b.n	800203a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	623b      	str	r3, [r7, #32]
          break;
 8001fe6:	e029      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	3304      	adds	r3, #4
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e024      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e01f      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	330c      	adds	r3, #12
 8002002:	623b      	str	r3, [r7, #32]
          break;
 8002004:	e01a      	b.n	800203c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200e:	2304      	movs	r3, #4
 8002010:	623b      	str	r3, [r7, #32]
          break;
 8002012:	e013      	b.n	800203c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800201c:	2308      	movs	r3, #8
 800201e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	611a      	str	r2, [r3, #16]
          break;
 8002026:	e009      	b.n	800203c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002028:	2308      	movs	r3, #8
 800202a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	615a      	str	r2, [r3, #20]
          break;
 8002032:	e003      	b.n	800203c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x130>
          break;
 800203a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2bff      	cmp	r3, #255	@ 0xff
 8002040:	d801      	bhi.n	8002046 <HAL_GPIO_Init+0x13a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	e001      	b.n	800204a <HAL_GPIO_Init+0x13e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2bff      	cmp	r3, #255	@ 0xff
 8002050:	d802      	bhi.n	8002058 <HAL_GPIO_Init+0x14c>
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x152>
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	3b08      	subs	r3, #8
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	210f      	movs	r1, #15
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	401a      	ands	r2, r3
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	431a      	orrs	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80c1 	beq.w	800220e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800208c:	4b49      	ldr	r3, [pc, #292]	@ (80021b4 <HAL_GPIO_Init+0x2a8>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a48      	ldr	r2, [pc, #288]	@ (80021b4 <HAL_GPIO_Init+0x2a8>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b46      	ldr	r3, [pc, #280]	@ (80021b4 <HAL_GPIO_Init+0x2a8>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a4:	4a44      	ldr	r2, [pc, #272]	@ (80021b8 <HAL_GPIO_Init+0x2ac>)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3c      	ldr	r2, [pc, #240]	@ (80021bc <HAL_GPIO_Init+0x2b0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01f      	beq.n	8002110 <HAL_GPIO_Init+0x204>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3b      	ldr	r2, [pc, #236]	@ (80021c0 <HAL_GPIO_Init+0x2b4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d019      	beq.n	800210c <HAL_GPIO_Init+0x200>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3a      	ldr	r2, [pc, #232]	@ (80021c4 <HAL_GPIO_Init+0x2b8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x1fc>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a39      	ldr	r2, [pc, #228]	@ (80021c8 <HAL_GPIO_Init+0x2bc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1f8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a38      	ldr	r2, [pc, #224]	@ (80021cc <HAL_GPIO_Init+0x2c0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1f4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a37      	ldr	r2, [pc, #220]	@ (80021d0 <HAL_GPIO_Init+0x2c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1f0>
 80020f8:	2305      	movs	r3, #5
 80020fa:	e00a      	b.n	8002112 <HAL_GPIO_Init+0x206>
 80020fc:	2306      	movs	r3, #6
 80020fe:	e008      	b.n	8002112 <HAL_GPIO_Init+0x206>
 8002100:	2304      	movs	r3, #4
 8002102:	e006      	b.n	8002112 <HAL_GPIO_Init+0x206>
 8002104:	2303      	movs	r3, #3
 8002106:	e004      	b.n	8002112 <HAL_GPIO_Init+0x206>
 8002108:	2302      	movs	r3, #2
 800210a:	e002      	b.n	8002112 <HAL_GPIO_Init+0x206>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_GPIO_Init+0x206>
 8002110:	2300      	movs	r3, #0
 8002112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002114:	f002 0203 	and.w	r2, r2, #3
 8002118:	0092      	lsls	r2, r2, #2
 800211a:	4093      	lsls	r3, r2
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002122:	4925      	ldr	r1, [pc, #148]	@ (80021b8 <HAL_GPIO_Init+0x2ac>)
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	4924      	ldr	r1, [pc, #144]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	43db      	mvns	r3, r3
 8002152:	4920      	ldr	r1, [pc, #128]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 8002154:	4013      	ands	r3, r2
 8002156:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	491a      	ldr	r1, [pc, #104]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	60cb      	str	r3, [r1, #12]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4916      	ldr	r1, [pc, #88]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 800217c:	4013      	ands	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d025      	beq.n	80021d8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4910      	ldr	r1, [pc, #64]	@ (80021d4 <HAL_GPIO_Init+0x2c8>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e025      	b.n	80021e6 <HAL_GPIO_Init+0x2da>
 800219a:	bf00      	nop
 800219c:	10320000 	.word	0x10320000
 80021a0:	10310000 	.word	0x10310000
 80021a4:	10220000 	.word	0x10220000
 80021a8:	10210000 	.word	0x10210000
 80021ac:	10120000 	.word	0x10120000
 80021b0:	10110000 	.word	0x10110000
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40010800 	.word	0x40010800
 80021c0:	40010c00 	.word	0x40010c00
 80021c4:	40011000 	.word	0x40011000
 80021c8:	40011400 	.word	0x40011400
 80021cc:	40011800 	.word	0x40011800
 80021d0:	40011c00 	.word	0x40011c00
 80021d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_GPIO_Init+0x324>)
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4913      	ldr	r1, [pc, #76]	@ (8002230 <HAL_GPIO_Init+0x324>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_GPIO_Init+0x324>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	490e      	ldr	r1, [pc, #56]	@ (8002230 <HAL_GPIO_Init+0x324>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_GPIO_Init+0x324>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	43db      	mvns	r3, r3
 8002208:	4909      	ldr	r1, [pc, #36]	@ (8002230 <HAL_GPIO_Init+0x324>)
 800220a:	4013      	ands	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	3301      	adds	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f ae7e 	bne.w	8001f20 <HAL_GPIO_Init+0x14>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	372c      	adds	r7, #44	@ 0x2c
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e001      	b.n	8002256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	807b      	strh	r3, [r7, #2]
 800226e:	4613      	mov	r3, r2
 8002270:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002272:	787b      	ldrb	r3, [r7, #1]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002278:	887a      	ldrh	r2, [r7, #2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800227e:	e003      	b.n	8002288 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	041a      	lsls	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	611a      	str	r2, [r3, #16]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fd ffb6 	bl	8000224 <HAL_GPIO_EXTI_Callback>
  }
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e272      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8087 	beq.w	80023f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e4:	4b92      	ldr	r3, [pc, #584]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d00c      	beq.n	800230a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d112      	bne.n	8002322 <HAL_RCC_OscConfig+0x5e>
 80022fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002308:	d10b      	bne.n	8002322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	4b89      	ldr	r3, [pc, #548]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d06c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x12c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d168      	bne.n	80023f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e24c      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x76>
 800232c:	4b80      	ldr	r3, [pc, #512]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a7f      	ldr	r2, [pc, #508]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e02e      	b.n	8002398 <HAL_RCC_OscConfig+0xd4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x98>
 8002342:	4b7b      	ldr	r3, [pc, #492]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7a      	ldr	r2, [pc, #488]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b78      	ldr	r3, [pc, #480]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a77      	ldr	r2, [pc, #476]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xd4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0xbc>
 8002366:	4b72      	ldr	r3, [pc, #456]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a71      	ldr	r2, [pc, #452]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b6f      	ldr	r3, [pc, #444]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6e      	ldr	r2, [pc, #440]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xd4>
 8002380:	4b6b      	ldr	r3, [pc, #428]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6a      	ldr	r2, [pc, #424]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b68      	ldr	r3, [pc, #416]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a67      	ldr	r2, [pc, #412]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fc9c 	bl	8001cdc <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff fc98 	bl	8001cdc <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e200      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xe4>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fc88 	bl	8001cdc <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fc84 	bl	8001cdc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1ec      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b53      	ldr	r3, [pc, #332]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x10c>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800240a:	4b49      	ldr	r3, [pc, #292]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x18c>
 8002416:	4b46      	ldr	r3, [pc, #280]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b43      	ldr	r3, [pc, #268]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x176>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1c0      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b3d      	ldr	r3, [pc, #244]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4939      	ldr	r1, [pc, #228]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <HAL_RCC_OscConfig+0x270>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fc3d 	bl	8001cdc <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7ff fc39 	bl	8001cdc <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1a1      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4927      	ldr	r1, [pc, #156]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <HAL_RCC_OscConfig+0x270>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fc1c 	bl	8001cdc <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a8:	f7ff fc18 	bl	8001cdc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e180      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d03a      	beq.n	8002548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <HAL_RCC_OscConfig+0x274>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7ff fbfc 	bl	8001cdc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7ff fbf8 	bl	8001cdc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e160      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002506:	2001      	movs	r0, #1
 8002508:	f000 face 	bl	8002aa8 <RCC_Delay>
 800250c:	e01c      	b.n	8002548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_RCC_OscConfig+0x274>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7ff fbe2 	bl	8001cdc <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251a:	e00f      	b.n	800253c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251c:	f7ff fbde 	bl	8001cdc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d908      	bls.n	800253c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e146      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	42420000 	.word	0x42420000
 8002538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b92      	ldr	r3, [pc, #584]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e9      	bne.n	800251c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a6 	beq.w	80026a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b8b      	ldr	r3, [pc, #556]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b88      	ldr	r3, [pc, #544]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a87      	ldr	r2, [pc, #540]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b85      	ldr	r3, [pc, #532]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b7f      	ldr	r3, [pc, #508]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a7e      	ldr	r2, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7ff fb9f 	bl	8001cdc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7ff fb9b 	bl	8001cdc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b64      	cmp	r3, #100	@ 0x64
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e103      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b75      	ldr	r3, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x312>
 80025c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e02d      	b.n	8002632 <HAL_RCC_OscConfig+0x36e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x334>
 80025de:	4b6a      	ldr	r3, [pc, #424]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a69      	ldr	r2, [pc, #420]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a66      	ldr	r2, [pc, #408]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	e01c      	b.n	8002632 <HAL_RCC_OscConfig+0x36e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d10c      	bne.n	800261a <HAL_RCC_OscConfig+0x356>
 8002600:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a60      	ldr	r2, [pc, #384]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	4b5e      	ldr	r3, [pc, #376]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a5d      	ldr	r2, [pc, #372]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e00b      	b.n	8002632 <HAL_RCC_OscConfig+0x36e>
 800261a:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a5a      	ldr	r2, [pc, #360]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	4b58      	ldr	r3, [pc, #352]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a57      	ldr	r2, [pc, #348]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d015      	beq.n	8002666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7ff fb4f 	bl	8001cdc <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7ff fb4b 	bl	8001cdc <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0b1      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ee      	beq.n	8002642 <HAL_RCC_OscConfig+0x37e>
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7ff fb39 	bl	8001cdc <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7ff fb35 	bl	8001cdc <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e09b      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002684:	4b40      	ldr	r3, [pc, #256]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ee      	bne.n	800266e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b3c      	ldr	r3, [pc, #240]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a3b      	ldr	r2, [pc, #236]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8087 	beq.w	80027ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ac:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d061      	beq.n	800277c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d146      	bne.n	800274e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c0:	4b33      	ldr	r3, [pc, #204]	@ (8002790 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff fb09 	bl	8001cdc <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff fb05 	bl	8001cdc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e06d      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f4:	d108      	bne.n	8002708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026f6:	4b24      	ldr	r3, [pc, #144]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4921      	ldr	r1, [pc, #132]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002708:	4b1f      	ldr	r3, [pc, #124]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a19      	ldr	r1, [r3, #32]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	430b      	orrs	r3, r1
 800271a:	491b      	ldr	r1, [pc, #108]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x4cc>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff fad9 	bl	8001cdc <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff fad5 	bl	8001cdc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e03d      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x46a>
 800274c:	e035      	b.n	80027ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_RCC_OscConfig+0x4cc>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff fac2 	bl	8001cdc <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff fabe 	bl	8001cdc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e026      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x498>
 800277a:	e01e      	b.n	80027ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e019      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
 8002790:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_OscConfig+0x500>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0d0      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b67      	ldr	r3, [pc, #412]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4965      	ldr	r1, [pc, #404]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a58      	ldr	r2, [pc, #352]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800282e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a52      	ldr	r2, [pc, #328]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002846:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d040      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b41      	ldr	r3, [pc, #260]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e073      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3d      	ldr	r3, [pc, #244]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06b      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b39      	ldr	r3, [pc, #228]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4936      	ldr	r1, [pc, #216]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff fa10 	bl	8001cdc <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff fa0c 	bl	8001cdc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e053      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2d      	ldr	r3, [pc, #180]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d210      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4922      	ldr	r1, [pc, #136]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	@ (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <HAL_RCC_ClockConfig+0x1cc>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_RCC_ClockConfig+0x1d0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f96e 	bl	8001c58 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40022000 	.word	0x40022000
 800298c:	40021000 	.word	0x40021000
 8002990:	08003a48 	.word	0x08003a48
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x30>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ca:	e027      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ce:	613b      	str	r3, [r7, #16]
      break;
 80029d0:	e027      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029dc:	5cd3      	ldrb	r3, [r2, r3]
 80029de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0c5b      	lsrs	r3, r3, #17
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	4a11      	ldr	r2, [pc, #68]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xa0>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80029fe:	fb03 f202 	mul.w	r2, r3, r2
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e004      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	613b      	str	r3, [r7, #16]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1e:	613b      	str	r3, [r7, #16]
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	693b      	ldr	r3, [r7, #16]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	007a1200 	.word	0x007a1200
 8002a38:	08003a60 	.word	0x08003a60
 8002a3c:	08003a70 	.word	0x08003a70
 8002a40:	003d0900 	.word	0x003d0900

08002a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b02      	ldr	r3, [pc, #8]	@ (8002a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a5c:	f7ff fff2 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08003a58 	.word	0x08003a58

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a84:	f7ff ffde 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0adb      	lsrs	r3, r3, #11
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	@ (8002aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08003a58 	.word	0x08003a58

08002aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <RCC_Delay+0x34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <RCC_Delay+0x38>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a5b      	lsrs	r3, r3, #9
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac4:	bf00      	nop
  }
  while (Delay --);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	60fa      	str	r2, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <RCC_Delay+0x1c>
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e041      	b.n	8002b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fef6 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 fb22 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e03c      	b.n	8002c16 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_TIM_Base_Start+0x9c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_TIM_Base_Start+0x5c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <HAL_TIM_Base_Start+0xa0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_TIM_Base_Start+0x5c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc0:	d00e      	beq.n	8002be0 <HAL_TIM_Base_Start+0x5c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a18      	ldr	r2, [pc, #96]	@ (8002c28 <HAL_TIM_Base_Start+0xa4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_TIM_Base_Start+0x5c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_TIM_Base_Start+0xa8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_TIM_Base_Start+0x5c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <HAL_TIM_Base_Start+0xac>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d111      	bne.n	8002c04 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d010      	beq.n	8002c14 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c02:	e007      	b.n	8002c14 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40013400 	.word	0x40013400
 8002c28:	40000400 	.word	0x40000400
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	40000c00 	.word	0x40000c00

08002c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e041      	b.n	8002cca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f839 	bl	8002cd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f000 fa7a 	bl	800316c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_TIM_PWM_Start+0x24>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e022      	b.n	8002d4e <HAL_TIM_PWM_Start+0x6a>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d109      	bne.n	8002d22 <HAL_TIM_PWM_Start+0x3e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e015      	b.n	8002d4e <HAL_TIM_PWM_Start+0x6a>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d109      	bne.n	8002d3c <HAL_TIM_PWM_Start+0x58>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e008      	b.n	8002d4e <HAL_TIM_PWM_Start+0x6a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e072      	b.n	8002e3c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_PWM_Start+0x82>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d64:	e013      	b.n	8002d8e <HAL_TIM_PWM_Start+0xaa>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x92>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d74:	e00b      	b.n	8002d8e <HAL_TIM_PWM_Start+0xaa>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_PWM_Start+0xa2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d84:	e003      	b.n	8002d8e <HAL_TIM_PWM_Start+0xaa>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	6839      	ldr	r1, [r7, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fcb0 	bl	80036fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a28      	ldr	r2, [pc, #160]	@ (8002e44 <HAL_TIM_PWM_Start+0x160>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_TIM_PWM_Start+0xcc>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a27      	ldr	r2, [pc, #156]	@ (8002e48 <HAL_TIM_PWM_Start+0x164>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_PWM_Start+0xd0>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_TIM_PWM_Start+0xd2>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1d      	ldr	r2, [pc, #116]	@ (8002e44 <HAL_TIM_PWM_Start+0x160>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d018      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x122>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <HAL_TIM_PWM_Start+0x164>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x122>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de6:	d00e      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x122>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <HAL_TIM_PWM_Start+0x168>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x122>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_TIM_PWM_Start+0x16c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x122>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <HAL_TIM_PWM_Start+0x170>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d111      	bne.n	8002e2a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d010      	beq.n	8002e3a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	e007      	b.n	8002e3a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00

08002e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0ae      	b.n	8002fd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	f200 809f 	bhi.w	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e86:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8c:	08002ec1 	.word	0x08002ec1
 8002e90:	08002fc5 	.word	0x08002fc5
 8002e94:	08002fc5 	.word	0x08002fc5
 8002e98:	08002fc5 	.word	0x08002fc5
 8002e9c:	08002f01 	.word	0x08002f01
 8002ea0:	08002fc5 	.word	0x08002fc5
 8002ea4:	08002fc5 	.word	0x08002fc5
 8002ea8:	08002fc5 	.word	0x08002fc5
 8002eac:	08002f43 	.word	0x08002f43
 8002eb0:	08002fc5 	.word	0x08002fc5
 8002eb4:	08002fc5 	.word	0x08002fc5
 8002eb8:	08002fc5 	.word	0x08002fc5
 8002ebc:	08002f83 	.word	0x08002f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f9d6 	bl	8003278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	619a      	str	r2, [r3, #24]
      break;
 8002efe:	e064      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fa26 	bl	8003358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6999      	ldr	r1, [r3, #24]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	021a      	lsls	r2, r3, #8
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	619a      	str	r2, [r3, #24]
      break;
 8002f40:	e043      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fa79 	bl	8003440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0208 	orr.w	r2, r2, #8
 8002f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0204 	bic.w	r2, r2, #4
 8002f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	61da      	str	r2, [r3, #28]
      break;
 8002f80:	e023      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 facd 	bl	8003528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69d9      	ldr	r1, [r3, #28]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	021a      	lsls	r2, r3, #8
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	61da      	str	r2, [r3, #28]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0b4      	b.n	8003162 <HAL_TIM_ConfigClockSource+0x186>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800301e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003030:	d03e      	beq.n	80030b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003036:	f200 8087 	bhi.w	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303e:	f000 8086 	beq.w	800314e <HAL_TIM_ConfigClockSource+0x172>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003046:	d87f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b70      	cmp	r3, #112	@ 0x70
 800304a:	d01a      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0xa6>
 800304c:	2b70      	cmp	r3, #112	@ 0x70
 800304e:	d87b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b60      	cmp	r3, #96	@ 0x60
 8003052:	d050      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003054:	2b60      	cmp	r3, #96	@ 0x60
 8003056:	d877      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b50      	cmp	r3, #80	@ 0x50
 800305a:	d03c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0xfa>
 800305c:	2b50      	cmp	r3, #80	@ 0x50
 800305e:	d873      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b40      	cmp	r3, #64	@ 0x40
 8003062:	d058      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x13a>
 8003064:	2b40      	cmp	r3, #64	@ 0x40
 8003066:	d86f      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b30      	cmp	r3, #48	@ 0x30
 800306a:	d064      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800306c:	2b30      	cmp	r3, #48	@ 0x30
 800306e:	d86b      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d060      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d867      	bhi.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d05c      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b10      	cmp	r3, #16
 800307e:	d05a      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x15a>
 8003080:	e062      	b.n	8003148 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003092:	f000 fb14 	bl	80036be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	609a      	str	r2, [r3, #8]
      break;
 80030ae:	e04f      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c0:	f000 fafd 	bl	80036be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030d2:	609a      	str	r2, [r3, #8]
      break;
 80030d4:	e03c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fa74 	bl	80035d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2150      	movs	r1, #80	@ 0x50
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 facb 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 80030f4:	e02c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fa92 	bl	800362c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2160      	movs	r1, #96	@ 0x60
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fabb 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 8003114:	e01c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fa54 	bl	80035d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2140      	movs	r1, #64	@ 0x40
 800312e:	4618      	mov	r0, r3
 8003130:	f000 faab 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 8003134:	e00c      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f000 faa2 	bl	800368a <TIM_ITRx_SetConfig>
      break;
 8003146:	e003      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e000      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800314e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a39      	ldr	r2, [pc, #228]	@ (8003264 <TIM_Base_SetConfig+0xf8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <TIM_Base_SetConfig+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <TIM_Base_SetConfig+0xfc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00f      	beq.n	80031ac <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003192:	d00b      	beq.n	80031ac <TIM_Base_SetConfig+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a35      	ldr	r2, [pc, #212]	@ (800326c <TIM_Base_SetConfig+0x100>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <TIM_Base_SetConfig+0x40>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a34      	ldr	r2, [pc, #208]	@ (8003270 <TIM_Base_SetConfig+0x104>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_Base_SetConfig+0x40>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a33      	ldr	r2, [pc, #204]	@ (8003274 <TIM_Base_SetConfig+0x108>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d108      	bne.n	80031be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <TIM_Base_SetConfig+0xf8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_Base_SetConfig+0x82>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a27      	ldr	r2, [pc, #156]	@ (8003268 <TIM_Base_SetConfig+0xfc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0x82>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0x82>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a24      	ldr	r2, [pc, #144]	@ (800326c <TIM_Base_SetConfig+0x100>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0x82>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <TIM_Base_SetConfig+0x104>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0x82>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <TIM_Base_SetConfig+0x108>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0f      	ldr	r2, [pc, #60]	@ (8003264 <TIM_Base_SetConfig+0xf8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xc8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <TIM_Base_SetConfig+0xfc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f023 0201 	bic.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]
  }
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	bc80      	pop	{r7}
 8003262:	4770      	bx	lr
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40013400 	.word	0x40013400
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00

08003278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 0201 	bic.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f023 0302 	bic.w	r3, r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a20      	ldr	r2, [pc, #128]	@ (8003350 <TIM_OC1_SetConfig+0xd8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_OC1_SetConfig+0x64>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003354 <TIM_OC1_SetConfig+0xdc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10c      	bne.n	80032f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0308 	bic.w	r3, r3, #8
 80032e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <TIM_OC1_SetConfig+0xd8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_OC1_SetConfig+0x8e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a14      	ldr	r2, [pc, #80]	@ (8003354 <TIM_OC1_SetConfig+0xdc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d111      	bne.n	800332a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	621a      	str	r2, [r3, #32]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40012c00 	.word	0x40012c00
 8003354:	40013400 	.word	0x40013400

08003358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f023 0210 	bic.w	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a21      	ldr	r2, [pc, #132]	@ (8003438 <TIM_OC2_SetConfig+0xe0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_OC2_SetConfig+0x68>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a20      	ldr	r2, [pc, #128]	@ (800343c <TIM_OC2_SetConfig+0xe4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10d      	bne.n	80033dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a16      	ldr	r2, [pc, #88]	@ (8003438 <TIM_OC2_SetConfig+0xe0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_OC2_SetConfig+0x94>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a15      	ldr	r2, [pc, #84]	@ (800343c <TIM_OC2_SetConfig+0xe4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d113      	bne.n	8003414 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40013400 	.word	0x40013400

08003440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a21      	ldr	r2, [pc, #132]	@ (8003520 <TIM_OC3_SetConfig+0xe0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_OC3_SetConfig+0x66>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a20      	ldr	r2, [pc, #128]	@ (8003524 <TIM_OC3_SetConfig+0xe4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10d      	bne.n	80034c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a16      	ldr	r2, [pc, #88]	@ (8003520 <TIM_OC3_SetConfig+0xe0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_OC3_SetConfig+0x92>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	@ (8003524 <TIM_OC3_SetConfig+0xe4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40013400 	.word	0x40013400

08003528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	031b      	lsls	r3, r3, #12
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <TIM_OC4_SetConfig+0xa0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC4_SetConfig+0x68>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a10      	ldr	r2, [pc, #64]	@ (80035cc <TIM_OC4_SetConfig+0xa4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40013400 	.word	0x40013400

080035d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f023 0201 	bic.w	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f023 030a 	bic.w	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0210 	bic.w	r2, r3, #16
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	031b      	lsls	r3, r3, #12
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003668:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	621a      	str	r2, [r3, #32]
}
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f043 0307 	orr.w	r3, r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036be:	b480      	push	{r7}
 80036c0:	b087      	sub	sp, #28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	021a      	lsls	r2, r3, #8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	609a      	str	r2, [r3, #8]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	2201      	movs	r2, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1a      	ldr	r2, [r3, #32]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	43db      	mvns	r3, r3
 800371e:	401a      	ands	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1a      	ldr	r2, [r3, #32]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e050      	b.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1b      	ldr	r2, [pc, #108]	@ (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b2:	d00e      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a14      	ldr	r2, [pc, #80]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a12      	ldr	r2, [pc, #72]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10c      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40013400 	.word	0x40013400
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00

0800381c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e042      	b.n	80038b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe f908 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	@ 0x24
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800385e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f82b 	bl	80038bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80038f6:	f023 030c 	bic.w	r3, r3, #12
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	430b      	orrs	r3, r1
 8003902:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2c      	ldr	r2, [pc, #176]	@ (80039d0 <UART_SetConfig+0x114>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d103      	bne.n	800392c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7ff f8ac 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	e002      	b.n	8003932 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7ff f894 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8003930:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	4a22      	ldr	r2, [pc, #136]	@ (80039d4 <UART_SetConfig+0x118>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	0119      	lsls	r1, r3, #4
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	009a      	lsls	r2, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	fbb2 f2f3 	udiv	r2, r2, r3
 8003968:	4b1a      	ldr	r3, [pc, #104]	@ (80039d4 <UART_SetConfig+0x118>)
 800396a:	fba3 0302 	umull	r0, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	2064      	movs	r0, #100	@ 0x64
 8003972:	fb00 f303 	mul.w	r3, r0, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	3332      	adds	r3, #50	@ 0x32
 800397c:	4a15      	ldr	r2, [pc, #84]	@ (80039d4 <UART_SetConfig+0x118>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003988:	4419      	add	r1, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009a      	lsls	r2, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a0:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <UART_SetConfig+0x118>)
 80039a2:	fba3 0302 	umull	r0, r3, r3, r2
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2064      	movs	r0, #100	@ 0x64
 80039aa:	fb00 f303 	mul.w	r3, r0, r3
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	3332      	adds	r3, #50	@ 0x32
 80039b4:	4a07      	ldr	r2, [pc, #28]	@ (80039d4 <UART_SetConfig+0x118>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	440a      	add	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039c8:	bf00      	nop
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40013800 	.word	0x40013800
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <memset>:
 80039d8:	4603      	mov	r3, r0
 80039da:	4402      	add	r2, r0
 80039dc:	4293      	cmp	r3, r2
 80039de:	d100      	bne.n	80039e2 <memset+0xa>
 80039e0:	4770      	bx	lr
 80039e2:	f803 1b01 	strb.w	r1, [r3], #1
 80039e6:	e7f9      	b.n	80039dc <memset+0x4>

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	2600      	movs	r6, #0
 80039ec:	4d0c      	ldr	r5, [pc, #48]	@ (8003a20 <__libc_init_array+0x38>)
 80039ee:	4c0d      	ldr	r4, [pc, #52]	@ (8003a24 <__libc_init_array+0x3c>)
 80039f0:	1b64      	subs	r4, r4, r5
 80039f2:	10a4      	asrs	r4, r4, #2
 80039f4:	42a6      	cmp	r6, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	f000 f81a 	bl	8003a30 <_init>
 80039fc:	2600      	movs	r6, #0
 80039fe:	4d0a      	ldr	r5, [pc, #40]	@ (8003a28 <__libc_init_array+0x40>)
 8003a00:	4c0a      	ldr	r4, [pc, #40]	@ (8003a2c <__libc_init_array+0x44>)
 8003a02:	1b64      	subs	r4, r4, r5
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	42a6      	cmp	r6, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a10:	4798      	blx	r3
 8003a12:	3601      	adds	r6, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1a:	4798      	blx	r3
 8003a1c:	3601      	adds	r6, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	08003a74 	.word	0x08003a74
 8003a24:	08003a74 	.word	0x08003a74
 8003a28:	08003a74 	.word	0x08003a74
 8003a2c:	08003a78 	.word	0x08003a78

08003a30 <_init>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr

08003a3c <_fini>:
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	bf00      	nop
 8003a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a42:	bc08      	pop	{r3}
 8003a44:	469e      	mov	lr, r3
 8003a46:	4770      	bx	lr
